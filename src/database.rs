// This file is generated automatically by `build_database.py`. Change it there.
use crate::types::Signature::*;
use crate::types::Type::*;
use crate::types::*;
pub const NULLARY: [Signature; 295] = [
    Nullary("acctime", Number, "Returns the current time acceleration factor."),
    Nullary("activatedaddons", Array, "Returns a list of all activated addons."),
    Nullary("agents", Array, "Return a list of agents in the current mission."),
    Nullary("airdensitycurvertd", Array, "Returns air density curve graph."),
    Nullary("all3denentities", Array, "Returns array with all registered entities in format: [<objects>,<groups>,<triggers>,<logics>,<waypoints>,<markers>]"),
    Nullary("allactivetitleeffects", Array, "Returns a list of all layers that have currently active title effect"),
    Nullary("alladdonsinfo", Array, "Returns the list of all loaded addons in format [prefix, version, isPatched]"),
    Nullary("allairports", Array, "Return array of all airports in format [[static1, static2,..],[dyn1, dyn2,..]] "),
    Nullary("allcurators", Array, "Returns list of all curators."),
    Nullary("allcutlayers", Array, "Returns a list of all layer names currently used by cutXXXX commands."),
    Nullary("alldead", Array, "Return a list of dead units and destroyed vehicles. Dead unit might be inside vehicle."),
    Nullary("alldeadmen", Array, "Return a list of dead units. Dead unit might be inside vehicle."),
    Nullary("alldisplays", Array, "Returns list of all displays registered in engine."),
    Nullary("allenv3dsoundsources", Array, "Returns all environmental 3D sound sources in camera vicinity"),
    Nullary("allgroups", Array, "Return a list of all groups."),
    Nullary("allmapmarkers", Array, "Returns all markers in map."),
    Nullary("allmines", Array, "Returns an array of all mines in game."),
    Nullary("allplayers", Array, "Return a list of all players."),
    Nullary("allsites", Array, "Return a list of all sites."),
    Nullary("allunits", Array, "Return a list of all units (all persons except agents)."),
    Nullary("allunitsuav", Array, "Return a list of all UAV units."),
    Nullary("allusers", Array, "Returns player ids of all server users in the lobby or in game. Server side execution."),
    Nullary("ambienttemperature", Array, "Returns ambient temperature in format [airTemp, blackSurfaceTemp, whiteSurfaceTemp]"),
    Nullary("apertureparams", Array, "Returns various aperture related params."),
    Nullary("armorypoints", Number, "Return the stored value of armory points."),
    Nullary("benchmark", Number, "Returns the value of \"3D performance\" as it is in OFP preferences. This can be used to estimate computer performance. The function can be used to create missions that are able to adapt to computer peformance."),
    Nullary("blufor", Side, "Pre-defined variable for the blufor side."),
    Nullary("break", Nothing, "Skips all loop iterations"),
    Nullary("briefingname", String, "Returns the name of the current briefing."),
    Nullary("buldozer_isenabledroaddiag", Boolean, "Returns true if road diag is enabled in buldozer."),
    Nullary("buldozer_reloadopermap", Nothing, "Reload oper map visible in costMap diag tool."),
    Nullary("cadetmode", Boolean, "Returns true if the mission is played in cadet mode and false in veteran mode."),
    Nullary("cameraon", Object, "Returns the vehicle to which the camera is attached."),
    Nullary("cameraview", String, "Returns type of camera."),
    Nullary("campaignconfigfile", Config, "Return root of campaign description.ext entries hierarchy."),
    Nullary("cansuspend", Boolean, "Returns true if usage of sleep, uiSleep or waitUntil commands is allowed in the current scope."),
    Nullary("cheatsenabled", Boolean, "Checks whether cheats are enabled (whether the designers' version is running)."),
    Nullary("civilian", Side, "The Civilian side."),
    Nullary("clearforcesrtd", Nothing, "Remove all force generators from wolrd."),
    Nullary("clearitempool", Nothing, "Removes all magazines from the weapon pool (this is used in campaigns to transfer weapons to the next mission)."),
    Nullary("clearmagazinepool", Nothing, "Removes all magazines from the weapon pool (this is used in campaigns to transfer weapons to the next mission)."),
    Nullary("clearradio", Nothing, "Clean up the content of radio protocol history."),
    Nullary("clearweaponpool", Nothing, "Removes all weapons from the weapon pool (this is used in campaigns to transfer weapons to the next mission)."),
    Nullary("clientowner", Number, "Returns client's owner id"),
    Nullary("commandingmenu", String, "Return the name of the topmost commanding menu."),
    Nullary("configfile", Config, "Return root of config entries hierarchy."),
    Nullary("confignull", Config, "A non-existing config"),
    Nullary("continue", Nothing, "Skips current loop iteration and continues with next iteration"),
    Nullary("controlnull", Control, "A non-existing control. This value is not equal to anything, including itself."),
    Nullary("copyfromclipboard", String, "Return the content of the (text) clipboard."),
    Nullary("createhashmap", HashMap, "Creates a new HashMap."),
    Nullary("curatorcamera", Object, "Returns curator camera object."),
    Nullary("curatormouseover", Object, "Returns curator mouse over object."),
    Nullary("curatorselected", Array, "Returns list of all curator selected items."),
    Nullary("current3denoperation", String, "Name of the operation in progress."),
    Nullary("currentchannel", Number, "Return index of player's currently selected chat channel."),
    Nullary("currentnamespace", Namespace, "Returns the current namespace code runs in"),
    Nullary("cursorobject", Object, "This is the object pointed to by a players cursor."),
    Nullary("cursortarget", Object, "This is the entity pointed to by a players cursor."),
    Nullary("customwaypointposition", Array, "Return position of custom waypoint set by player."),
    Nullary("date", Array, "Return the actual mission date and time as an array [year, month, day, hour, minute]."),
    Nullary("daytime", Number, "Returns the time in the world, in hours."),
    Nullary("diag_activemissionfsms", Array, "Returns array with active Mission FSMs [[name, state, timeout],[name, state, timeout],...]"),
    Nullary("diag_activescripts", Array, "Returns an array with active scripts count [spawned SQFs, execVMed SQFs, FSMs, SQSes]"),
    Nullary("diag_activesqfscripts", Array, "Returns array with active SQFs [[name, fileName, isRunning, currentLine],[name, fileName, isRunning, currentLine],...]"),
    Nullary("diag_activesqsscripts", Array, "Returns array with active SQSs [[name, fileName, isRunning, currentLine],[name, fileName, isRunning, currentLine],...]"),
    Nullary("diag_allmissioneventhandlers", Array, "Returns an array with all mission event handlers in format [EH1name, EH1count,...]"),
    Nullary("diag_deltatime", Number, "Real time spent since the last frame."),
    Nullary("diag_fps", Number, "Returns average framerate over last 16 frames."),
    Nullary("diag_fpsmin", Number, "Returns minimal framerate. Calculated from the longest frame over last 16 frames."),
    Nullary("diag_frameno", Number, "Returns number of frame currently displayed ."),
    Nullary("diag_scope", Number, "Gets the current script scope depth."),
    Nullary("diag_stacktrace", Array, "Retrieves the current stacktrace."),
    Nullary("diag_ticktime", Number, "Real time spent from the start of the game."),
    Nullary("dialog", Boolean, "Returns whether a user dialog is present."),
    Nullary("diaryrecordnull", Task, "A non-existing diary record. This value is not equal to anything, including itself."),
    Nullary("didjip", Boolean, "Returns true if the local client joined the game in progress. Returns false in single player."),
    Nullary("difficulty", Number, "Returns difficulty."),
    Nullary("difficultyenabledrtd", Boolean, "Returns true if rotorlib simulation is enabled. Forcing by mission is included."),
    Nullary("disabledebriefingstats", Nothing, "Disable debriefing score table."),
    Nullary("disableserialization", Nothing, "Disable saving of script containing this command. After this, script can work with the data types which do not support serialization (UI types)."),
    Nullary("displaynull", Display, "A non-existing display. This value is not equal to anything, including itself."),
    Nullary("distributionregion", Number, "Return the region where the game was sold (based on distribution id)."),
    Nullary("dynamicsimulationsystemenabled", Boolean, "Returns if dynamic simulation system is enabled or not."),
    Nullary("east", Side, "The East side."),
    Nullary("enableenddialog", Nothing, "Enables the dialog buttons to be shown during the OnPlayerKilled script."),
    Nullary("endl", String, "Creates a string containing a line break."),
    Nullary("endloadingscreen", Nothing, "Finish loading screen displaying (started by startLoadingScreen)."),
    Nullary("environmentenabled", Array, "[agents, environment, windyCoef]"),
    Nullary("environmentvolume", Number, "Returns the current volume of the environment as set by <f>fadeEnvironment</f>."),
    Nullary("estimatedendservertime", Number, "Estimated end of MP game converted to serverTime."),
    Nullary("exit", Nothing, "Exits the script."),
    Nullary("false", Boolean, "Always false."),
    Nullary("finishmissioninit", Nothing, "Finish world initialization before mission is launched."),
    Nullary("fog", Number, "Return the current fog."),
    Nullary("fogforecast", Number, "Return the fog forecast."),
    Nullary("fogparams", Array, "Returns actual params for fog."),
    Nullary("forcedmap", Array, "Returns if map is forced in an array [forceMapForced, openMapForced]"),
    Nullary("forceend", Nothing, "Forces the mission to terminate."),
    Nullary("forceweatherchange", Nothing, "Forces saved wanted settings for weather to be actual. (BEWARE: Will cause lag)"),
    Nullary("freelook", Boolean, "Returns true if freelook is active."),
    Nullary("get3dencamera", Object, "Get 3den's camera object"),
    Nullary("get3deniconsvisible", Array, "Returns icons visibility in 3DEN"),
    Nullary("get3denlinesvisible", Array, "Returns lines visibility in 3DEN"),
    Nullary("get3denmouseover", Array, "Get what is under mouse in 3den"),
    Nullary("getartillerycomputersettings", Array, "Returns settings from artillery computer currently opened by player."),
    Nullary("getaudiooptionvolumes", Array, "Returns profile audio volumes in format [effects, music, radio, von, ui, map]"),
    Nullary("getcalculateplayervisibilitybyfriendly", Boolean, "Returns true if visibility of player is calculated by friendly units."),
    Nullary("getclientstate", String, "Return client state in network game"),
    Nullary("getclientstatenumber", String, "Return client state in network game"),
    Nullary("getcursorobjectparams", Array, "Returns an object and named selections under the cursor and the distance to the object's surface (to the point the cursor is pointing at). If the object is further than 50 meters away, selections are an empty array and the distance is 1e10 (10^10)"),
    Nullary("getdlcassetsusage", Array, "Returns an array of the DLC usage times. Returned array contain DLC item in this format: [[name, dlcAppId, sessionTime, totalTime], [name, dlcAppId, sessionTime, totalTime], ...]"),
    Nullary("getelevationoffset", Number, "Returns the map elevation offset from [map]/config.cpp"),
    Nullary("getlighting", Array, "Returns information about current lighting environment"),
    Nullary("getloadedmodsinfo", Array, "Returns info about currently loaded mods"),
    Nullary("getmissiondlcs", Array, "Returns list of DLCs that are used in the mission. List is created only from units listed in mission.sqm and doesn't detect units created by scripts!"),
    Nullary("getmissionlayers", Array, "Name of the operation in progress."),
    Nullary("getmouseposition", Array, "Returns Position of the mouse on the screen in UI coordinates."),
    Nullary("getmusicplayedtime", Number, "Return music played time."),
    Nullary("getobjectviewdistance", Array, "Returns object and shadow view distance."),
    Nullary("getpipviewdistance", Number, "Returns object view distance inside PiP"),
    Nullary("getremotesensorsdisabled", Boolean, "Returns true if sensors are computing visibility only for groups that have at least one local unit."),
    Nullary("getresolution", Array, "Returns [width, height, 2D viewport Width, 2D viewport Height, aspect ration, UI scale, topFOV, leftFOV, tripleHead]"),
    Nullary("getshadowdistance", Number, "Gets the shadows rendering distance."),
    Nullary("getsteamfriendsservers", Array, "Gets list of servers that Steam Friends are playing on"),
    Nullary("getsubtitleoptions", Array, "Returns subtitles settings in format [subtitles, radio subtitles]."),
    Nullary("getterraingrid", Number, "Returns the current size of the terrain grid."),
    Nullary("getterraininfo", Array, "Gets terrain source grid resolution"),
    Nullary("gettiparameters", HashMap, "Returns current thermal imaging parameters"),
    Nullary("gettotaldlcusagetime", Number, "Returns total DLC usage time in this game session"),
    Nullary("getvideooptions", HashMap, "Returns current video options"),
    Nullary("groupiconselectable", Boolean, "Return if groups icon raises onClick and onOver events."),
    Nullary("groupiconsvisible", Array, "Return group icons are visible."),
    Nullary("grpnull", Group, "A non-existing group. This value is not equal to anything, including itself."),
    Nullary("gusts", Number, "Return the current gusts value."),
    Nullary("halt", Nothing, "Stops the program into a debugger."),
    Nullary("hasinterface", Boolean, "Returns true if the computer has an inteface (a real player). False for a dedicated server or for a headless client."),
    Nullary("hcshownbar", Boolean, "Return true if the HC bar is shown/active."),
    Nullary("hudmovementlevels", Array, "Returns movement borders for HUD [min speed, max speed, min alt, max alt, min dir, max dir, position[x,y,z] or target]"),
    Nullary("humidity", Number, "Return the current humidity value."),
    Nullary("independent", Side, "Pre-defined variable for the independent side."),
    Nullary("initambientlife", Nothing, "Initialize the ambient life."),
    Nullary("is3den", Boolean, "Returns true while in 3DEN"),
    Nullary("is3denmultiplayer", Boolean, "Returns true if 3DEN is running in MP mode"),
    Nullary("is3denpreview", Boolean, "Returns true while in 3DEN Preview"),
    Nullary("isactionmenuvisible", Boolean, "Returns true if action menu is visible."),
    Nullary("isautotest", Boolean, "Returns true if game was started with autotest parameter"),
    Nullary("isdedicated", Boolean, "Returns true for dedicated server."),
    Nullary("isfilepatchingenabled", Boolean, "Returns true if file patching is enabled on the machine. Returns false otherwise"),
    Nullary("isgamefocused", Boolean, "Returns true if the game window has focus."),
    Nullary("isgamepaused", Boolean, "Returns true if game simulation is paused."),
    Nullary("isinstructorfigureenabled", Boolean, "True if instructor figure is enabled in Game Options."),
    Nullary("ismissionprofilenamespaceloaded", Boolean, "Returns true if missionProfileNamespace file exists and is loaded"),
    Nullary("ismultiplayer", Boolean, "Returns true if multiPlayer."),
    Nullary("ismultiplayersolo", Boolean, "Returns true when playing the game in solo multiplayer."),
    Nullary("ispipenabled", Boolean, "Returns true if PiP is enabled."),
    Nullary("isremoteexecuted", Boolean, "Returns true if code was remotely executed via remoteExec."),
    Nullary("isremoteexecutedjip", Boolean, "Returns true if JIP code was remotely executed via remoteExec."),
    Nullary("issaving", Boolean, "Returns the current game autosave request"),
    Nullary("isserver", Boolean, "Returns true if the computer is the server."),
    Nullary("issteammission", Boolean, "Returns true if mission is started from the steam."),
    Nullary("issteamoverlayenabled", Boolean, "Returns true if Steam overlay is enabled, otherwise false"),
    Nullary("isstreamfriendlyuienabled", Boolean, "True if stream friendly UI is enabled in Game Options."),
    Nullary("isstressdamageenabled", Boolean, "Returns true if stress damage is enabled."),
    Nullary("istuthintsenabled", Boolean, "True if tutorial hints are enabled in Game Options."),
    Nullary("isuicontext", Boolean, "Return true when function is called from the UI"),
    Nullary("language", String, "Returns current game language."),
    Nullary("librarycredits", Array, "Copyright information needed by libraries used."),
    Nullary("librarydisclaimers", Array, "Disclaimer information needed by libraries used (duplicate disclaimers are removed)."),
    Nullary("lightnings", Number, "Return lightnings value."),
    Nullary("linebreak", String, "Creates a structured text containing a line break."),
    Nullary("loadgame", Nothing, "Load a game from the autosave, if failed, restart the mission."),
    Nullary("localnamespace", Namespace, "Returns the local namespace attached to mission. Same lifetime as missionNamespace but is not global and cannot be serialized"),
    Nullary("locationnull", Location, "A non-existing location. This value is not equal to anything, including itself."),
    Nullary("logentities", Nothing, "Creates a log file containing a list of all game entites in scene.,"),
    Nullary("mapanimclear", Nothing, "Clears the map animation."),
    Nullary("mapanimcommit", Nothing, "Plays the map animation."),
    Nullary("mapanimdone", Boolean, "Checks whether the map animation has finished."),
    Nullary("markasfinishedonsteam", Boolean, "Marks current mission and finished on steam. Returns true is Steam query is successfully started or false otherwise."),
    Nullary("missionconfigfile", Config, "Return root of mission description.ext entries hierarchy."),
    Nullary("missiondifficulty", Number, "Return difficulty that has been forced for this mission, returns -1 if difficulty is not forced and it's used one from player's options."),
    Nullary("missionend", Array, "Returns mission end in format [endType, isFailMission, isFailed] or [] if mission has not ended"),
    Nullary("missionname", String, "Returns the name of the current mission."),
    Nullary("missionnamesource", String, "Returns the original filename of the current mission."),
    Nullary("missionnamespace", Namespace, "Returns the global namespace attached to mission."),
    Nullary("missionprofilenamespace", Namespace, "Returns the profile namespace attached to mission. Same lifetime as profileNamespace"),
    Nullary("missionstart", Array, "Returns the time of the mission start in format [year, month, day, hour, minute, second]."),
    Nullary("missionversion", Number, "Returns the version of the current mission."),
    Nullary("moonintensity", Number, "Returns moon light intensity."),
    Nullary("musicvolume", Number, "Returns the current music volume level as set by <f>fadeMusic</f>."),
    Nullary("netobjnull", NetObject, "A non-existing object. This value is not equal to anything, including itself."),
    Nullary("nextweatherchange", Number, "Return the time (in seconds) when the next weather change will occur."),
    Nullary("nil", Anything, "Nil value. This value can be used to undefine an existing variable."),
    Nullary("objnull", Object, "A non-existing object. This value is not equal to anything, including itself."),
    Nullary("opencuratorinterface", Nothing, "Force opens curator interface."),
    Nullary("opfor", Side, "Pre-defined variable for the opfor side."),
    Nullary("overcast", Number, "Return the current overcast."),
    Nullary("overcastforecast", Number, "Return the overcast forecast."),
    Nullary("parsingnamespace", Namespace, "Return the global namespace attached to config parser."),
    Nullary("particlesquality", Number, "Returns current settings for particles quality."),
    Nullary("pi", Number, "pi (180 degrees converted to radians)"),
    Nullary("pixelgrid", Number, "Returns grid size based on screen resolution, UI size and configs: uiScaleFactor, uiScaleMaxGrids"),
    Nullary("pixelgridbase", Number, "Returns grid size based on screen resolution."),
    Nullary("pixelgridnouiscale", Number, "Returns grid size based on screen resolution and configs: uiScaleFactor, uiScaleMaxGrids"),
    Nullary("pixelh", Number, "Returns height of one pixel for current resolution"),
    Nullary("pixelw", Number, "Returns width of one pixel for current resolution"),
    Nullary("playableunits", Array, "Return a list of playable units (occupied by both AI or players)."),
    Nullary("player", Object, "This is the person controlled by the player. In MP this value is different on each computer."),
    Nullary("playerrespawntime", Number, "Return the player remaining time to respawn."),
    Nullary("playerside", Side, "Returns the player's side. This is valid even when the player controlled person is dead (a difference from player side)."),
    Nullary("productversion", Array, "Return the product name, version, build and flag if game is modded in form [\"product name\", \"product short name\", version*100, \"build number\", \"build\", customMods, platform]"),
    Nullary("profilename", String, "Returns profile name."),
    Nullary("profilenamespace", Namespace, "Return the global namespace attached to user profile."),
    Nullary("profilenamesteam", String, "Returns name of the current Steam profile."),
    Nullary("radioenabled", Boolean, "A getter for the <f>enableRadio</f> command."),
    Nullary("radiovolume", Number, "Returns the current radio volume level as set by <f>fadeRadio</f>."),
    Nullary("rain", Number, "Return the current rain."),
    Nullary("rainbow", Number, "Return the current rainbow intensity."),
    Nullary("rainparams", Array, "Returns the current params for rain particles"),
    Nullary("remoteexecutedowner", Number, "Returns ID of the original owner of the remotely executed command. Return 0 is owner can't be determined"),
    Nullary("resetcamshake", Nothing, "Resets all camera shakes."),
    Nullary("resistance", Side, "The Resistance side."),
    Nullary("reversedmousey", Boolean, "Return if mouse vertical axe is inverted."),
    Nullary("runinitscript", Nothing, "Launch init.sqs script."),
    Nullary("safezoneh", Number, "Returns the height of the screen in screen measurement units"),
    Nullary("safezonew", Number, "Returns the width of the screen in screen measurement units"),
    Nullary("safezonewabs", Number, "Returns absolute SafeZoneW (all monitors, in case there's more than one)"),
    Nullary("safezonex", Number, "Returns the X of the left border of the screen in screen measurement units"),
    Nullary("safezonexabs", Number, "Returns absolute SafeZoneX (all monitors, in case there's more than one)"),
    Nullary("safezoney", Number, "Returns the Y of the top border of the screen in screen measurement units"),
    Nullary("savegame", Nothing, "Creates an autosave game (used for Retry)."),
    Nullary("savejoysticks", Nothing, "Saves joysticks key mappings into the joysticks.cfg file. Engine add these joysticks to the Joystick Scheme mapping dialog in options controls section."),
    Nullary("savemissionprofilenamespace", Boolean, "Saves the variables stored in missionProfileNamespace to user profile, returns true on success."),
    Nullary("saveprofilenamespace", Nothing, "Saves the variables stored in profileNamespace to user profile."),
    Nullary("savingenabled", Boolean, "Check if saving the game is enabled."),
    Nullary("scriptnull", Script, "A non-existing script. This value is not equal to anything, including itself."),
    Nullary("selectnoplayer", Nothing, "Switch player to no unit."),
    Nullary("sentencesenabled", Boolean, "A getter for the <f>enableSentences</f> command."),
    Nullary("servername", String, "Returns server hostname as it appears in server browser"),
    Nullary("servernamespace", Namespace, "Returns server namespace"),
    Nullary("servertime", Number, "Server time synchronized to clients."),
    Nullary("shownartillerycomputer", Boolean, "Checks whether the player has the artillery computer currently enabled."),
    Nullary("shownchat", Boolean, "Checks whether the player chat is visible."),
    Nullary("showncompass", Boolean, "Checks whether the player has the compass enabled."),
    Nullary("showncuratorcompass", Boolean, "Returns true if compass is shown."),
    Nullary("showngps", Boolean, "Checks whether the player has the GPS receiver enabled."),
    Nullary("shownhud", Array, "Returns array of booleans corresponding to visible HUD elements [hud, info, radar, compass, direction, menu, group, cursors, panels, icon3d]"),
    Nullary("shownmap", Boolean, "Checks whether the player has the map enabled."),
    Nullary("shownpad", Boolean, "Checks whether the player has the notebook enabled."),
    Nullary("shownradio", Boolean, "Checks whether the player has the radio transmitter enabled."),
    Nullary("shownscoretable", Number, "Returns state of scoretable, 0, 1 or -1 (forced not visible, forced visible, default)."),
    Nullary("shownsubtitles", Boolean, "A getter for the <f>showSubtitles</f> command."),
    Nullary("shownuavfeed", Boolean, "True if UAV view is visible."),
    Nullary("shownwarrant", Boolean, "Checks whether the player has the ID card enabled.
(Obsolete)."),
    Nullary("shownwatch", Boolean, "Checks whether the player has the watch enabled."),
    Nullary("sideambientlife", Side, "The Ambient Life side"),
    Nullary("sideempty", Side, "The Empty side"),
    Nullary("sideenemy", Side, "The Enemy side (used for renegades)."),
    Nullary("sidefriendly", Side, "The Friendly side (used for captives)."),
    Nullary("sidelogic", Side, "The Logic side."),
    Nullary("sideunknown", Side, "The unknown side."),
    Nullary("simulweathersync", Nothing, "Synchronizes SW with arma weather, generates all keyframes."),
    Nullary("slingloadassistantshown", Boolean, "Return true if Sling Load Assistant is shown."),
    Nullary("soundvolume", Number, "Returns the current sound volume level as set by <f>fadeSound</f>."),
    Nullary("speechvolume", Number, "Returns the current speech volume level as set by <f>fadeSpeech</f>."),
    Nullary("sunormoon", Number, "Returns sun to moon transition state."),
    Nullary("switchableunits", Array, "Return a list of units accessible through team switch."),
    Nullary("systemofunits", Number, "Returns 0 for metric, 1 for mixed (ground units uses metric, air units uses imperial) and 2 for imperial."),
    Nullary("systemtime", Array, "Returns the current local system time in format [year, month, day, hour, minute, second, millisecond]."),
    Nullary("systemtimeutc", Array, "Returns the current UTC system time in format [year, month, day, hour, minute, second, millisecond]."),
    Nullary("tasknull", Task, "A non-existing task. This value is not equal to anything, including itself."),
    Nullary("teammembernull", TeamMember, "A non-existing team member. This value is not equal to anything, including itself."),
    Nullary("teams", Array, "Return a list of teams in the current mission."),
    Nullary("teamswitch", Nothing, "Invoke the team switch dialog (force it even when conditions are not met)."),
    Nullary("teamswitchenabled", Boolean, "Check if tam switch is currently enabled."),
    Nullary("time", Number, "Returns the time that elapsed since the mission started (in seconds)."),
    Nullary("timemultiplier", Number, "Returns game time multiplier setted to speed up game time"),
    Nullary("true", Boolean, "Always true."),
    Nullary("uinamespace", Namespace, "Returns the global namespace attached to user interface."),
    Nullary("userinputdisabled", Boolean, "Returns true when all user input is disabled."),
    Nullary("vehicles", Array, "Return a list of vehicles in the current mission."),
    Nullary("viewdistance", Number, "Returns the rendering distance."),
    Nullary("visiblecompass", Boolean, "Checks whether the player has the compass opened and visible."),
    Nullary("visiblegps", Boolean, "Checks whether the player has the GPS receiver opened and visible."),
    Nullary("visiblemap", Boolean, "Returns true if the main map is shown (active)."),
    Nullary("visiblescoretable", Boolean, "Checks whether the scoretable is visible."),
    Nullary("visiblewatch", Boolean, "Checks whether the player has the watch opened and visible."),
    Nullary("waves", Number, "Return waves value."),
    Nullary("west", Side, "The West side."),
    Nullary("wind", Array, "Return the current wind vector."),
    Nullary("winddir", Number, "Return the current wind azimut."),
    Nullary("windrtd", Array, "Returns wind strength and direction."),
    Nullary("windstr", Number, "Return the current wind strength."),
    Nullary("worldname", String, "Return the name of the currently loaded world."),
    Nullary("worldsize", Number, "Return the name of the currently loaded world."),
];

pub const UNARY: [Signature; 1430] = [
    Unary("!", Boolean, Boolean, "not a"),
    Unary("+", Array, Array, "unary plus: returns a copy of the array"),
    Unary("+", HashMap, HashMap, "Creates a copy of the HashMap."),
    Unary("+", Number, Number, "unary plus: returns a"),
    Unary("-", Number, Number, "unary minus: zero minus a"),
    Unary("abs", Number, Number, "The absolute value of x."),
    Unary("acos", Number, Number, "The arccosine of x, the result is in degrees."),
    Unary("action", Array, Nothing, "Makes the unit peform an action. The format of action can be [type, target, param1, param2, param3]. Only type is required, target defaults to unit and param1, param2, param3 are type specific."),
    Unary("actionids", Object, Array, "Return array of IDs for user defined actions for specified entity"),
    Unary("actionkeys", Array, Array, "Returns a list of dikCodes of buttons assigned to the given user action in string format."),
    Unary("actionkeys", String, Array, "Returns a list of dikCodes of buttons assigned to the given user action."),
    Unary("actionkeysex", String, Array, "Returns the hotkeys for the given action with split modifier keys."),
    Unary("actionkeysimages", Array, String, "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes."),
    Unary("actionkeysimages", String, String, "Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes."),
    Unary("actionkeysnames", Array, String, "Returns a string of button names assigned to the given user action. A maximum of maxKeys keys is listed, 0=maximum possible. Sorted by inputDevicePriority with values 'Mouse','Keyboard','Stick','Gamepad','Trackir','Combo' (mouse and keyboard combinations),'Controler' (any controller other then mouse or keyboard). Other values are considered as 'Unsorted'. You can find the action names in config class ControllerSchemes."),
    Unary("actionkeysnames", String, String, "Returns a string of button names assigned to the given user action. A maximum of maxKeys keys is listed, 0=maximum possible. Sorted by inputDevicePriority with values 'Mouse','Keyboard','Stick','Gamepad','Trackir','Combo' (mouse and keyboard combinations),'Controler' (any controller other then mouse or keyboard). Other values are considered as 'Unsorted'. You can find the action names in config class ControllerSchemes."),
    Unary("actionkeysnamesarray", Array, Array, "Returns a list of button names assigned to the given user action. A maximum of maxKeys keys is listed, 0=maximum possible. Sorted by inputDevicePriority with values 'Mouse','Keyboard','Stick','Gamepad','Trackir','Combo' (mouse and keyboard combinations),'Controler' (any controller other then mouse or keyboard). Other values are considered as 'Unsorted'. You can find the action names in config class ControllerSchemes."),
    Unary("actionkeysnamesarray", String, Array, "Returns a list of button names assigned to the given user action. A maximum of maxKeys keys is listed, 0=maximum possible. Sorted by inputDevicePriority with values 'Mouse','Keyboard','Stick','Gamepad','Trackir','Combo' (mouse and keyboard combinations),'Controler' (any controller other then mouse or keyboard). Other values are considered as 'Unsorted'. You can find the action names in config class ControllerSchemes."),
    Unary("actionname", String, String, "Returns localized name of action."),
    Unary("activateaddons", Array, Nothing, "Activates the listed addons. The list of active addons is reinitialized during this function."),
    Unary("activatekey", String, Nothing, "Activates the given key for the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions."),
    Unary("activetitleeffectparams", Number, Array, "Returns [type, effect, speed, showInMap] of the given active title effect"),
    Unary("add3denconnection", Array, Nothing, "Adds connection of given type between <from> items and <to> item."),
    Unary("add3deneventhandler", Array, Number, "Returns ID of registered event handler usefull for ex. when removing it."),
    Unary("addcamshake", Array, Nothing, "Adds camera shake source."),
    Unary("addforcegeneratorrtd", Array, Number, "Add force generator to world. Returns force index."),
    Unary("additempool", Array, Nothing, "Adds count items of type name into the weapon pool (used in the campaign to transfer weapons to the next mission)."),
    Unary("addmagazinepool", Array, Nothing, "Adds count magazines of type name into the weapon pool (used in the campaign to transfer weapons to the next mission)."),
    Unary("addmissioneventhandler", Array, Number, "Adds mission event handler. Every event will create an array named _this, which contains specific information about the particular event. The index of the currently added handler is returned."),
    Unary("addmusiceventhandler", Array, Number, "Add an music track event handler. Returns id of the handler or -1 when failed."),
    Unary("addonfiles", Array, Array, "Returns the list of files contained in the addon"),
    Unary("addswitchableunit", Object, Nothing, "Add a unit into the list of units available for team switch."),
    Unary("addtoremainscollector", Array, Nothing, "Flags given objects to me managed by unitRemove manager"),
    Unary("adduseractioneventhandler", Array, Number, "addUserActionEventHandler [\"Reload\", \"Activate\", { systemChat \"reloading!\"; }];"),
    Unary("addweaponpool", Array, Nothing, "Adds count weapons of type name into the weapon pool (used in campaigns to transfer weapons to the next mission)."),
    Unary("admin", Number, Number, "Returns current admin state of the client: 0 - not admin, 1 - voted admin, 2 - logged in admin"),
    Unary("agent", TeamMember, Object, "Return a person for given agent."),
    Unary("agltoasl", Array, Array, "Converts a position from <ar>Position</ar> to <ar>PositionASL</ar> format."),
    Unary("aimpos", Object, Array, "Returns the position of the object other units can aim to in format <ar>PositionASL</ar>."),
    Unary("airdensityrtd", Number, Number, "Returns air density in given altitude."),
    Unary("airplanethrottle", Object, Number, "Get wanted throttle position"),
    Unary("airportside", Number, Side, "Checks a side of the airport."),
    Unary("airportside", Object, Side, "Checks a side of the airport."),
    Unary("aisfinishheal", Array, Nothing, "AIS end state."),
    Unary("alive", Object, Boolean, "Checks whether the given person, vehicle or building is't dead / destroyed."),
    Unary("allcontrols", Control, Array, "Returns a list of all controls from given controls group."),
    Unary("allcontrols", Display, Array, "Returns a list of all controls from given display."),
    Unary("alldiarysubjects", Object, Array, "Returns a list of all diary subjects available to given person."),
    Unary("alllods", Object, Array, "Returns a list of all object LODs and their resolutions."),
    Unary("alllods", String, Array, "Returns a list of all object LODs and their resolutions."),
    Unary("allmissionobjects", String, Array, "Returns all mission objects with given type. "),
    Unary("allowedservice", Object, Number, "Returns what kind of supply service is allowed - 0:none, 1:auto, 2:manual, 3:both. -1 if not supported"),
    Unary("allsimpleobjects", Array, Array, "Returns a list of simple objects with given type. "),
    Unary("allturrets", Array, Array, "Returns array with turrets in given vehicle. TRUE FALSE stands for return person turrets"),
    Unary("allturrets", Object, Array, "Returns array with turrets in given vehicle"),
    Unary("allvariables", Control, Array, "Returns a list of all variables stored in given map."),
    Unary("allvariables", Display, Array, "Returns a list of all variables stored in given display."),
    Unary("allvariables", Group, Array, "Returns a list of all variables stored in given group."),
    Unary("allvariables", Location, Array, "Returns a list of all variables stored in given location."),
    Unary("allvariables", Namespace, Array, "Returns a list of all variables in given namespace. UI and profile namespaces are excluded"),
    Unary("allvariables", Object, Array, "Returns a list of all variables stored in given object."),
    Unary("allvariables", Task, Array, "Returns a list of all variables stored in given task."),
    Unary("allvariables", TeamMember, Array, "Returns a list of all variables stored in given teamMember."),
    Unary("animationnames", Object, Array, "returns list of animation than command Animate should accept"),
    Unary("animationstate", Object, String, "Return the name of the current primary animation."),
    Unary("asin", Number, Number, "The arcsine of x, the result is in degrees."),
    Unary("asltoagl", Array, Array, "Converts a position from <ar>PositionASL</ar> to <ar>Position</ar> format."),
    Unary("asltoatl", Array, Array, "Converts a position from <ar>PositionASL</ar> to <ar>Position</ar> format."),
    Unary("assert", Boolean, Boolean, "Tests a condition and if the condition is false, halts the program."),
    Unary("assignedcargo", Object, Array, "Returns the list of soldiers assigned to the given vehicle as a cargo."),
    Unary("assignedcommander", Object, Object, "Returns the soldier assigned to the given vehicle as a commander."),
    Unary("assigneddriver", Object, Object, "Returns the soldier assigned to the given vehicle as a driver."),
    Unary("assignedgroup", Object, Group, "Returns group to which vehicle is assigned"),
    Unary("assignedgunner", Object, Object, "Returns the soldier assigned to the given vehicle as a gunner."),
    Unary("assigneditems", Object, Array, "Get array with all assigned items."),
    Unary("assignedtarget", Object, Object, "Return the target assigned to the vehicle."),
    Unary("assignedteam", Object, String, "Checks which team the vehicle (its commander unit) belongs to."),
    Unary("assignedvehicle", Object, Object, "Return the vehicle person is assigned to."),
    Unary("assignedvehiclerole", Object, Array, "Return the position in vehicle person is assigned to."),
    Unary("assignedvehicles", Group, Array, "Returns all vehicles added to the given group"),
    Unary("atan", Number, Number, "The arctangens of x, the result is in degrees."),
    Unary("atg", Number, Number, "The arctangens of x, the result is in degrees."),
    Unary("atltoasl", Array, Array, "Converts a position from <ar>Position</ar> to <ar>PositionASL</ar> format."),
    Unary("attachedobject", Location, Object, "Return object attached to given location."),
    Unary("attachedobjects", Object, Array, "Returns list of objects attached to the entity."),
    Unary("attachedto", Object, Object, "Returns the object the entity is attach to."),
    Unary("attackenabled", Group, Boolean, "Return whether leader can issue attack commands."),
    Unary("attackenabled", Object, Boolean, "Return whether leader can issue attack commands."),
    Unary("backpack", Object, String, "Returns a class of a backpack."),
    Unary("backpackcargo", Object, Array, "Get array with backpacks from ammo box (or any general weapon holder container)."),
    Unary("backpackcontainer", Object, Object, "Returns container of a backpack."),
    Unary("backpackitems", Object, Array, "Get array with all items from backpack."),
    Unary("backpackmagazines", Object, Array, "Get array with all magazines from vest."),
    Unary("behaviour", Object, String, "Returns the behaviour mode of the given unit (\"CARELESS\",\"SAFE\",\"AWARE\",\"COMBAT\" or \"STEALTH\")."),
    Unary("binocular", Object, String, "Returns name of currently used binocular."),
    Unary("binocularitems", Object, Array, "Get array with all items assigned to a binocular weapon."),
    Unary("binocularmagazine", Object, String, "Return the names of the types of currently loaded magazines in given weapon."),
    Unary("boundingbox", Object, Array, "Returns a bounding box of given object in model coordinates space with size adjusted according to animation and destruction. The result is in format [[minX, minZ, minY], [maxX, maxZ, maxY]]."),
    Unary("boundingboxreal", Object, Array, "Returns a bounding box of given object in model coordinates space. The result is in format [[minX, minZ, minY], [maxX, maxZ, maxY]]."),
    Unary("boundingcenter", Object, Array, "Returns the position of original (loaded) center of object in model coordinates.  The result is in format [x, z, y]"),
    Unary("brakesdisabled", Object, Boolean, "Returns true if vehicle brakes are disabled"),
    Unary("breakout", String, Nothing, "Breaks block out scope named 'name'. Nil is returned."),
    Unary("breakto", String, Nothing, "Breaks block to scope named 'name'. Nil is returned."),
    Unary("breakwith", Anything, Anything, "Skips all loop iterations."),
    Unary("buldozer_enableroaddiag", Boolean, Nothing, "Enables road diagnostics in buldozer."),
    Unary("buldozer_loadnewroads", String, Boolean, "Generates new roads."),
    Unary("buttonaction", Control, String, "Returns the action assigned to the given button or active text. The action is any expression in this scripting language."),
    Unary("buttonaction", Number, String, "Returns the action assigned to the control with id idc of the topmost user dialog. The action is any expression in this scripting language. The function can be used for buttons and active texts."),
    Unary("buttonsetaction", Array, Nothing, "Assigns an action to the control with id idc of the topmost user dialog. Action is any expression in this scripting language. The function can be used for buttons and active texts."),
    Unary("calculatepath", Array, Object, "Calculates path for a vehicle"),
    Unary("calculateplayervisibilitybyfriendly", Boolean, Nothing, "friendly units will/will not calculate visility of player"),
    Unary("call", Code, Anything, "Executes the given code."),
    Unary("camcommitted", Object, Boolean, "Checks whether the camera has finished committing."),
    Unary("camdestroy", Object, Nothing, "Destroys the camera."),
    Unary("cameraeffectenablehud", Boolean, Nothing, "Enable / disable showing of in-game UI during currently active camera effect."),
    Unary("camerainterest", Object, Number, "Return camera interest for given entity."),
    Unary("campreloaded", Object, Boolean, "Checks whether the camera has finished preloading."),
    Unary("camtarget", Object, Object, "Returns camera's target."),
    Unary("camusenvg", Boolean, Nothing, "Set / clear using of night vision during cutscenes."),
    Unary("cancelsimpletaskdestination", Task, Nothing, "Cancels a simple task destination"),
    Unary("candeployweapon", Object, Boolean, "Returns true if weapon can be deployed."),
    Unary("canfire", Object, Boolean, "Checks whether the given vehicle is able to fire. It does not check for ammo, only for damage."),
    Unary("canmove", Object, Boolean, "Checks whether the given vehicle is able to move. It does not test for fuel, only the damage status is checked."),
    Unary("canstand", Object, Boolean, "Checks whether the given soldier is able to stand up."),
    Unary("cantriggerdynamicsimulation", Object, Boolean, "Returns true if given unit can activate dynamically disabled entities, otherwise return false"),
    Unary("canunloadincombat", Object, Boolean, "Check if cargo of this vehicle want to get out when in combat."),
    Unary("captive", Object, Boolean, "Checks whether the unit is a captive. If the unit is a vehicle, its commander is checked instead."),
    Unary("captivenum", Object, Number, "Checks whether the unit is a captive. If the unit is a vehicle, its commander is checked instead."),
    Unary("case", Anything, Switch, "see switch"),
    Unary("cbchecked", Control, Boolean, "Returns the current state of CheckBox."),
    Unary("ceil", Number, Number, "The ceil value of x."),
    Unary("channelenabled", Number, Array, "Returns availability of the chat and VoN for the given channel."),
    Unary("checkaifeature", String, Boolean, "Check if given AI feature is currently enabled."),
    Unary("classname", Location, String, "Return short name of location. (used for scripting)"),
    Unary("clear3deninventory", Array, Nothing, "Clear saved state of entitie's inventory from SQM."),
    Unary("clearallitemsfrombackpack", Object, Nothing, "Removes all items from the backpack."),
    Unary("clearbackpackcargo", Object, Nothing, "Removes all backpacks from ammo box (or any general weapon holder container)."),
    Unary("clearbackpackcargoglobal", Object, Nothing, "Removes all magazines from the vehicle cargo space. MP synchronized."),
    Unary("cleargroupicons", Group, Nothing, "Removes all icon from group."),
    Unary("clearitemcargo", Object, Nothing, "Removes all items from ammo box (or any general weapon holder container)."),
    Unary("clearitemcargoglobal", Object, Nothing, "Removes all items from ammo box (or any general weapon holder container)."),
    Unary("clearmagazinecargo", Object, Nothing, "Removes all magazines from the vehicle cargo space."),
    Unary("clearmagazinecargoglobal", Object, Nothing, "Removes all magazines from the vehicle cargo space. MP synchronized."),
    Unary("clearoverlay", Control, Nothing, "Clear the current overlay."),
    Unary("clearweaponcargo", Object, Nothing, "Removes all weapons from the vehicle cargo space."),
    Unary("clearweaponcargoglobal", Object, Nothing, "Removes all weapons from the vehicle cargo space. MP synchronized."),
    Unary("closedialog", Number, Nothing, "Closes the topmost user dialog as if a button with id idc was pressed."),
    Unary("closeoverlay", Control, Nothing, "Closes the current overlay without committing."),
    Unary("collapseobjecttree", Control, Nothing, "Collapse the object tree."),
    Unary("collect3denhistory", Code, Nothing, "Collects all history steps created by executing given code."),
    Unary("collectivertd", Object, Number, "Returns collective."),
    Unary("collisiondisabledwith", Object, Array, "Returns the object, given object has collision disabled with and whether or not returned object has collision disabled with the given object as well."),
    Unary("combatbehaviour", Group, String, "Returns the behaviour mode of the given group (\"CARELESS\",\"SAFE\",\"AWARE\",\"COMBAT\" or \"STEALTH\")."),
    Unary("combatbehaviour", Object, String, "Returns the behaviour mode of the given unit (\"CARELESS\",\"SAFE\",\"AWARE\",\"COMBAT\" or \"STEALTH\")."),
    Unary("combatmode", Group, String, "Returns the combat mode of the given unit's group (\"BLUE\",\"GREEN\",\"YELLOW\" or \"RED\")."),
    Unary("combatmode", Object, String, "Returns the combat mode of the given unit's group (\"BLUE\",\"GREEN\",\"YELLOW\" or \"RED\")."),
    Unary("commander", Object, Object, "Returns the commander of the vehicle. If the vehicle is not a vehicle, but a person, the person is returned instead."),
    Unary("commandgetout", Array, Nothing, "Orders the unit to get out from the vehicle (via the radio)."),
    Unary("commandgetout", Object, Nothing, "Orders the unit to get out from the vehicle (via the radio)."),
    Unary("commandstop", Array, Nothing, "Orders the unit to stop (via the radio).
Note: the stop command is never finished; the unit will never be ready."),
    Unary("commandstop", Object, Nothing, "Orders the unit to stop (via the radio).
Note: the stop command is never finished; the unit will never be ready."),
    Unary("comment", String, Nothing, "This function does nothing. It's used to create comments."),
    Unary("commitoverlay", Control, Nothing, "Commit the current overlay."),
    Unary("compatibleitems", Array, Array, "Returns all compatible items for the given weapon class, or the given slot of the weapon."),
    Unary("compatibleitems", String, Array, "Returns all compatible items for the given weapon class, or the given slot of the weapon."),
    Unary("compatiblemagazines", Array, Array, "Returns all compatible magazines for every muzzle of the given weapon class, or the specified muzzle."),
    Unary("compatiblemagazines", String, Array, "Returns all compatible magazines for every muzzle of the given weapon class, or the specified muzzle."),
    Unary("compile", String, Code, "Compile expression."),
    Unary("compilefinal", String, Code, "Compile expression. Expression cannot be overridden."),
    Unary("compilescript", Array, Code, "Preprocesses and Compiles a script file."),
    Unary("completedfsm", Number, Boolean, "Check whether the given FSM completes. The FSM handle is the number returned by the execFSM command."),
    Unary("composetext", Array, String, "Creates a structured text by joining the given structured or plain texts."),
    Unary("confighierarchy", Config, Array, "Returns array of parent configs"),
    Unary("configname", Config, String, "Returns name of config entry."),
    Unary("configof", Object, Config, "Returns the config class of the given object."),
    Unary("configproperties", Array, Array, "Returns a list of all properties of the given class. Parameter is an array where first item is a target config class, second is string with condition (similar to configClasses), third is a bool: when set to true, the inherited properties are also included."),
    Unary("configsourceaddonlist", Config, Array, "Returns list of addons from which the given config class was loaded/updated."),
    Unary("configsourcemod", Config, String, "Returns modDir of the mod that given config class was loaded from."),
    Unary("configsourcemodlist", Config, Array, "Returns an array of mods which modified the given config class."),
    Unary("connecttoserver", Array, Nothing, "Connects to given IP, ip and password are strings, port is a number."),
    Unary("continuewith", Anything, Anything, "Skips current loop iteration and continues with next iteration."),
    Unary("conversationdisabled", Object, Boolean, "Returns true if kbTell's 'IsSpeaking' for the given unit is true"),
    Unary("copytoclipboard", String, Nothing, "Copy the text to the clipboard."),
    Unary("cos", Number, Number, "The cosine of x, the argument is in degrees."),
    Unary("count", Array, Number, "The number of elements in the array."),
    Unary("count", Config, Number, "Returns count of subentries."),
    Unary("count", HashMap, Number, "Returns number of entries in the HashMap."),
    Unary("count", String, Number, "Return a length of a given string."),
    Unary("create3dencomposition", Array, Array, "Creates new object composition based on given config based on CfgGroups."),
    Unary("create3denentity", Array, Anything, "Creates new entity in given mode in 3DEN."),
    Unary("createagent", Array, Object, "Creates an (independent) agent (person) of the given type (type is a name of a subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used. Otherwise, the given position is used. The unit is placed inside a circle with this position as its center and placement as its radius. Special properties can be: \"NONE\" and \"FORM\"."),
    Unary("createcenter", Side, Side, "Creates a new AI center for the given side."),
    Unary("createdialog", Array, Display, "Creates a user dialog from the resource template name. If a user dialog already exists, it creates a child dialog of the topmost user dialog. The class name is searched in the description.ext file of the mission, the description.ext file of the campaign and the globlal resource.cpp file. The function returns its success."),
    Unary("createdialog", String, Boolean, "Creates a user dialog from the resource template name. If a user dialog already exists, it creates a child dialog of the topmost user dialog. The class name is searched in the description.ext file of the mission, the description.ext file of the campaign and the globlal resource.cpp file. The function returns its success."),
    Unary("creatediarylink", Array, String, "Create a link to the section of diary given by subject. Record is selected based on given object (diary record, task or unit)."),
    Unary("creategeardialog", Array, Nothing, "Opens gear dialog for given unit."),
    Unary("creategroup", Array, Group, "Creates a new AI group for the given center (side)."),
    Unary("creategroup", Side, Group, "Creates a new AI group for the given center (side)."),
    Unary("createguardedpoint", Array, Nothing, "Adds a point guarded by the given side. If idStatic is not negative, the position of a static object with the given id is guarded. If the given vehicle is valid, the starting position of the vehicle is guarded, otherwise the given position is guarded."),
    Unary("createhashmapfromarray", Array, HashMap, "Creates a new HashMap from given [key,value] array."),
    Unary("createlocation", Array, Location, "Create location of given type with given size at given position."),
    Unary("createmarker", Array, String, "Creates a new marker on the given position. The marker name has to be unique. The marker is created on all computers in a network session."),
    Unary("createmarkerlocal", Array, String, "Creates a new marker on the given position. The marker name has to be unique. The marker is only created on the computer where the command is called."),
    Unary("createmine", Array, Object, "Creates a mine of the given type (type is the name of the subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used. Otherwise, the given position is used. The mine is placed inside a circle with this position as its center and placement as its radius."),
    Unary("createsimpleobject", Array, Object, "Creates an object with a given shape or class. The object will not be simulated (no PhysX, no sound, not a target for AI) allowing the placement of decorative objects with a very little network traffic."),
    Unary("createsoundsource", Array, Object, "Creates a sound source of the given type (type is the name of the subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used. Otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius."),
    Unary("createteam", Array, TeamMember, "Create a team and name it."),
    Unary("createtrigger", Array, Object, "Creates a new trigger on the given position. An object of the given type is created; this type must be a class name in CfgNonAIVehicles or CfgVehicles with simulation=detector. If global is false, detector is created only localy."),
    Unary("createvehicle", Array, Object, "Creates a vehicle of the given type (type is the name of the subclass in CfgVehicles). If the markers array contains several marker names, the position of a random one is used. Otherwise, the given position is used. The vehicle is placed inside a circle with this position as center and placement as its radius. Special properties can be: \"NONE\", \"FLY\" and \"FORM\"."),
    Unary("createvehiclecrew", Object, Group, "Creates crew to given vehicle."),
    Unary("crew", Object, Array, "Returns all units mounted in the given vehicle. If the vehicle is not a vehicle, but  person, a list containing only persons is returned."),
    Unary("ctaddheader", Control, Array, "Adds a header line of controls according to the HeaderTemplate class. Returns an array containing 2 elements: header index and array of created controls."),
    Unary("ctaddrow", Control, Array, "Adds one row of controls according to the RowTemplate class. Returns an array containing 2 elements: row index and array of created controls."),
    Unary("ctclear", Control, Nothing, "Removes all lines (both rows and headers) from the table."),
    Unary("ctcursel", Control, Number, "Returns index of the selected row or negative value if no row is selected."),
    Unary("ctheadercount", Control, Number, "Returns number of headers (rows not included) in the table."),
    Unary("ctrlactivate", Control, Nothing, "Launch actions attached to given (button based) control."),
    Unary("ctrlangle", Control, Array, "Gets array of rotation info of the control in format: [angle, xCenter, yCenter]"),
    Unary("ctrlautoscrolldelay", Control, Number, "Returns number of seconds until auto-scroll starts. -2 if scrollbar not present."),
    Unary("ctrlautoscrollrewind", Control, Boolean, "True if auto-scroll should move back to start after it reach end."),
    Unary("ctrlautoscrollspeed", Control, Number, "Returns number of seconds to auto-scroll one line. -1 if auto-scroll is disabled. -2 if scrollbar not present."),
    Unary("ctrlbackgroundcolor", Control, Array, "Returns control's background color."),
    Unary("ctrlchecked", Control, Boolean, "Returns the current state of textual checkbox."),
    Unary("ctrlclassname", Control, String, "Returns class name of given control."),
    Unary("ctrlcommitted", Control, Boolean, "Check if the control animation is finished."),
    Unary("ctrldelete", Control, Boolean, "Deletes given control."),
    Unary("ctrlenable", Array, Nothing, "Enables / disables the control with id idc of the topmost user dialog."),
    Unary("ctrlenabled", Control, Boolean, "Returns whether given control is enabled."),
    Unary("ctrlenabled", Number, Boolean, "Returns whether the control with id idc of the topmost user dialog is enabled."),
    Unary("ctrlfade", Control, Number, "Returns the current fade factor of control."),
    Unary("ctrlfontheight", Control, Number, "Returns control's font size, usually \"sizeEx\" value."),
    Unary("ctrlforegroundcolor", Control, Array, "Returns control's foreground color."),
    Unary("ctrlhtmlloaded", Control, Boolean, "Returns true when HTML content was successfully loaded."),
    Unary("ctrlidc", Control, Number, "Returns control IDC."),
    Unary("ctrlidd", Display, Number, "Returns display IDD."),
    Unary("ctrlmapanimclear", Control, Nothing, "Clears the map animation."),
    Unary("ctrlmapanimcommit", Control, Nothing, "Plays the map animation."),
    Unary("ctrlmapanimdone", Control, Boolean, "Checks whether the map animation has finished."),
    Unary("ctrlmapmouseover", Control, Array, "Returns description of map sign mouse cursor is over in format [name<string>, id<GameValue>]. Recognized types: unit, vehicle, vehicleGroup, object, waypoint, trigger, marker, task, taskTooltip, customMark."),
    Unary("ctrlmapposition", Control, Array, "Returns map position in format [x,y,w,h]. If map is inside controls group, the position is relative."),
    Unary("ctrlmapscale", Control, Number, "Return the current scale of the map control."),
    Unary("ctrlmodel", Control, String, "Returns model setted in given control."),
    Unary("ctrlmodeldirandup", Control, Array, "Returns orientation setted in given control."),
    Unary("ctrlmodelscale", Control, Number, "Returns scale setted in given control object"),
    Unary("ctrlmouseposition", Control, Array, "Returns position of the mouse on the screen relative to UI Control in UI coordinates."),
    Unary("ctrlparent", Control, Display, "Returns container of given control."),
    Unary("ctrlparentcontrolsgroup", Control, Control, "Returns parent control group of given control."),
    Unary("ctrlposition", Control, Array, "Returns the current position and size of control as [x, y, w, h] array."),
    Unary("ctrlscale", Control, Number, "Returns the current scale of control."),
    Unary("ctrlscrollvalues", Control, Array, "Returns control's scroll values in format [vScrollValue, hScrollValue] in 0...1 range. -1 means this scrollbar is unavailable"),
    Unary("ctrlsetfocus", Control, Nothing, "Set the input focus on given control."),
    Unary("ctrlsettext", Array, Nothing, "Sets the text that will be shown in the control with id idc of the topmost user dialog. This can be used for static texts, buttons, edit lines and active texts."),
    Unary("ctrlshadow", Control, Number, "Returns 'shadow' property of the control"),
    Unary("ctrlshow", Array, Nothing, "Shows / hides the control with id idc of the topmost user dialog."),
    Unary("ctrlshown", Control, Boolean, "Returns whether given control is shown."),
    Unary("ctrlstyle", Control, Number, "Returns value representing style of control."),
    Unary("ctrltext", Control, String, "Returns the text shown in given control."),
    Unary("ctrltext", Number, String, "Returns the text shown in the control with id idc of the topmost user dialog. This can be used for static texts, buttons, edit lines and active texts."),
    Unary("ctrltextcolor", Control, Array, "Returns control's text color."),
    Unary("ctrltextheight", Control, Number, "Returns the text height."),
    Unary("ctrltextsecondary", Control, String, "Returns the secondary text of the given control (if control is supporting a secondary text)."),
    Unary("ctrltextselection", Control, Array, "Returns control text selection in format [start, length, selectedText]"),
    Unary("ctrltextwidth", Control, Number, "Returns max text width of all lines in given control."),
    Unary("ctrltooltip", Control, String, "Returns text value of control's tooltip"),
    Unary("ctrltype", Control, Number, "Returns value representing type of control."),
    Unary("ctrlurl", Control, String, "Returns control's URL set value where applicable."),
    Unary("ctrlurloverlaymode", Control, Number, "Returns URL overlay mode set for this control"),
    Unary("ctrlvisible", Number, Boolean, "Returns whether the control with id idc of the topmost user dialog is visible."),
    Unary("ctrowcount", Control, Number, "Returns number of rows (headers not included) in the table."),
    Unary("curatoraddons", Object, Array, "Return list of addons allowed to given curator."),
    Unary("curatorcameraarea", Object, Array, "Return all curator camera areas."),
    Unary("curatorcameraareaceiling", Object, Number, "Return ceiling height for curator camera."),
    Unary("curatoreditableobjects", Object, Array, "Return all editable objects which belongs to a curator."),
    Unary("curatoreditingarea", Object, Array, "Returns all curator editing areas"),
    Unary("curatoreditingareatype", Object, Boolean, "Returns type of edit areas assigned to curator (blacklist/whitelist)."),
    Unary("curatorpoints", Object, Number, "Return number of points that curator have."),
    Unary("curatorregisteredobjects", Object, Array, "Returns array with all objects that has curator registered and their settings."),
    Unary("curatorwaypointcost", Object, Number, "Return current price for placing waypoints (curator specific)."),
    Unary("currentcommand", Object, String, "Return the current command type (empty string when no command)."),
    Unary("currentmagazine", Object, String, "Return the name of the type of the currently using magazine (on the primary turret for vehicles)."),
    Unary("currentmagazinedetail", Object, Array, "Return the name of the type of the currently using magazine (on the primary turret for vehicles)."),
    Unary("currentmuzzle", Object, String, "Returns current muzzle of unit's weapon."),
    Unary("currentpilot", Object, Object, "Returns the person piloting the vehicle. If co-pilot is piloting, co-pilot is returned"),
    Unary("currenttask", Object, Task, "Return current task of given person."),
    Unary("currenttasks", TeamMember, Array, "List all uncompleted tasks."),
    Unary("currentthrowable", Object, Array, "Return the array with information about the currently selected throwable weapon in format  [selectedThrowableMagazineClassName, selectedThrowMuzzle>, [id,creatorofthemagazine]]."),
    Unary("currentvisionmode", Array, Array, "Returns current vision mode and FLIR index for the given entity. 0-dayTime, 1-night vision, 2-FLIR "),
    Unary("currentvisionmode", Object, Number, "Returns current vision mode for the given entity. 0-dayTime, 1-night vision, 2-FLIR "),
    Unary("currentwaypoint", Group, Number, "Return the index of the current waypoint."),
    Unary("currentweapon", Object, String, "Return the name of the currently selected weapon (on the primary turret for vehicles)."),
    Unary("currentweaponmode", Object, String, "Returns current weapon mode of unit's weapon."),
    Unary("currentzeroing", Object, Number, "Returns zeroing of unit's weapon."),
    Unary("cutobj", Array, Nothing, "Object background - the argument uses format [\"name\",\"type\",speed, showInMap] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
The object can be defined in the description.ext file."),
    Unary("cutrsc", Array, Nothing, "Resource background - the argument uses format [\"name\",\"type\",speed, showInMap] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
The resource can be defined in the description.ext file."),
    Unary("cuttext", Array, Nothing, "Text background - the argument uses format [\"text\",\"type\",speed, showInMap, isStructuredText] or [\"text\",\"type\"]. If speed is not given, it's assumed to be one. Type may be one of: \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" or \"WHITE IN\"."),
    Unary("damage", Object, Number, "Returns the object damage in a range of 0 to 1. Note: this function is identical to <f>getDammage</f>."),
    Unary("datetonumber", Array, Number, "Convert date to float number."),
    Unary("deactivatekey", String, Nothing, "Deactivates the given key from the current user profile. The keys are used to unlock missions or campaigns. See keys, keysLimit and doneKeys in the description.ext file of the missions."),
    Unary("debriefingtext", String, Number, "Return debriefing text."),
    Unary("debuglog", Anything, Nothing, "Dumps the argument's type and value to the debugging output."),
    Unary("decaygraphvalues", Array, Array, "Decay old graph values towards 0, unless new value is higher)"),
    Unary("default", Code, Nothing, "see switch"),
    Unary("deg", Number, Number, "Converts x from radians to degrees."),
    Unary("delete3denentities", Array, Nothing, "Deletes all given entities from 3DEN and adds entry to history."),
    Unary("deletecenter", Side, Nothing, "Destroys the AI center of the given side."),
    Unary("deletecollection", Object, Nothing, "same as hideObject."),
    Unary("deletegroup", Group, Nothing, "Destroys the given AI group."),
    Unary("deleteidentity", String, Boolean, "Deletes an identity created by saveIdentity from the campaign progress file."),
    Unary("deletelocation", Location, Nothing, "Delete the given location."),
    Unary("deletemarker", String, Nothing, "Destroys the given marker. The marker is destroyed on all computers in a network session."),
    Unary("deletemarkerlocal", String, Nothing, "Destroys the given marker. The marker is only destroyed on the computer where the command is called."),
    Unary("deletesite", Object, Nothing, "Removes the site."),
    Unary("deletestatus", String, Boolean, "Deletes a status created by saveStatus from the campaign progress file."),
    Unary("deleteteam", TeamMember, Nothing, "Destroy given team."),
    Unary("deletevehicle", Object, Nothing, "Deletes any unit or vehicle. Only vehicles inserted in the editor or created during a mission can be deleted. The player unit cannot be deleted."),
    Unary("deletevehiclecrew", Object, Nothing, "Deletes entire crew from vehicle including dead crew."),
    Unary("deletewaypoint", Array, Nothing, "Removes the waypoint."),
    Unary("detach", Object, Nothing, "Detaches an object."),
    Unary("detectedmines", Side, Array, "Returns list af all mines detected by given side."),
    Unary("diag_codeperformance", Array, Array, "Runs the given code given number of times and then returns average time"),
    Unary("diag_dynamicsimulationend", String, Nothing, "Ends dynamic simulation stats gathering and writes results into given file"),
    Unary("diag_lightnewload", String, Nothing, "Allows loading of lightning config during the gameplay (effectively changing the current scene lightning). Filename path can be either absolute or relative. The file must contain only the class LightningNew, which should contain lightning configuration."),
    Unary("diag_localized", String, Array, "Returns array of localized variables names from given table or from core table or array of all table names"),
    Unary("diag_log", Anything, Nothing, "Dumps the argument's type and value to the report file."),
    Unary("diag_setlightnew", String, Nothing, "Overrides currently used scene lightning. The operand is config that is placed as a string (not file). The changes may not be applied immediately, but can be forced by the call of simulWeatherSync."),
    Unary("didjipowner", Object, Boolean, "Returns true if the current owner of given object has joined the game in progress, works only on Server, returns false on clients or in single player."),
    Unary("difficultyenabled", String, Boolean, "Obsolete. Use difficultyOption instead."),
    Unary("difficultyoption", String, Number, "Returns current value of given difficulty option. For possible values of option, see config class Options in CfgDifficultyPresets."),
    Unary("direction", Location, Number, "Return direction (angle) of given location."),
    Unary("direction", Object, Number, "Returns the object heading in the range of 0 to 360."),
    Unary("disablemapindicators", Array, Nothing, "Enables/disables map indicators. Overrides difficulty settings."),
    Unary("disableremotesensors", Boolean, Nothing, "Units, that are not in a group with at least one local member, will not check visibility of other units. This will cause, that remote units will not have updated knowsAbout and it will save some CPU time."),
    Unary("disableuserinput", Boolean, Nothing, "Disables all user input. This is normally used only in cutscenes to disable the player's controls."),
    Unary("displaychild", Display, Display, "Returns the child of the given diplay."),
    Unary("displayctrl", Number, Control, "Returns given control from currently open dialog"),
    Unary("displayparent", Display, Display, "Returns the parent of the given diplay."),
    Unary("displayuniquename", Display, String, "Retrieves the Unique name of a UIOnTexture display"),
    Unary("displayupdate", Display, Nothing, "Schedules a update for a UI on Texture"),
    Unary("dissolveteam", String, Nothing, "Dissolves the given team. All members become members of the main team. Possible team values are: \"RED\", \"GREEN\", \"BLUE\" or \"YELLOW\"."),
    Unary("do3denaction", String, Nothing, "Processes given editor operation."),
    Unary("dogetout", Array, Nothing, "Orders a unit to get out from the vehicle (silently)."),
    Unary("dogetout", Object, Nothing, "Orders a unit to get out from the vehicle (silently)."),
    Unary("dostop", Array, Nothing, "Orders the unit to stop (silently).
Note: the stop command is never finished; the unit will never be ready."),
    Unary("dostop", Object, Nothing, "Orders the unit to stop (silently).
Note: the stop command is never finished; the unit will never be ready."),
    Unary("drawicon3d", Array, Nothing, "Draws an ingame icon at a given position."),
    Unary("drawlaser", Array, Nothing, "Draws a Laser."),
    Unary("drawline3d", Array, Nothing, "Draws a line of a given COLOR from START to END."),
    Unary("driver", Object, Object, "Returns the driver of the vehicle. If the vehicle is not a vehicle, but a person, the person is returned instead."),
    Unary("drop", Array, Nothing, "Drops a particle into the scene. Array is in format <ar>ParticleArray</ar>."),
    Unary("dynamicsimulationdistance", String, Number, "Returns what activation distance is set for given activation category. The recognized activation categories are \"Group\", \"Vehicle\", \"EmptyVehicle\" and \"Prop\"."),
    Unary("dynamicsimulationdistancecoef", String, Number, "Returns value of the given activation distance multiplier. Currently the only recognized activation multiplier is \"IsMoving\""),
    Unary("dynamicsimulationenabled", Group, Boolean, "Returns if dynamic simulation is on for given group"),
    Unary("dynamicsimulationenabled", Object, Boolean, "Returns if dynamic simulation is on for given object"),
    Unary("echo", String, Nothing, "Sends any text into the debugger console or the logfile."),
    Unary("edit3denmissionattributes", String, Nothing, "Openes configuration for given global attribute type."),
    Unary("effectivecommander", Object, Object, "Returns the effective commander (who really commands) of the vehicle."),
    Unary("enableaudiofeature", Array, Boolean, "Enable/disable audio feature, features are: { \"lowpass\", \"building_interior\" }. Return previous state"),
    Unary("enablecamshake", Boolean, Nothing, "Enables/disables camera shakes."),
    Unary("enablecaustics", Boolean, Nothing, "Enable/disable caustics drawing."),
    Unary("enabledebriefingstats", Array, Nothing, "Enable debriefing score table. The table will be displayed at specified coordinates."),
    Unary("enablediaglegend", Boolean, Nothing, "Enable or disable legend for diagnostic"),
    Unary("enabledynamicsimulationsystem", Boolean, Nothing, "Enables or disables whole dynamic simulation system"),
    Unary("enableengineartillery", Boolean, Nothing, "Enables/disables engine's artillery."),
    Unary("enableenvironment", Array, Nothing, "Enable/disable environmental effects (ambient life + sound)."),
    Unary("enableenvironment", Boolean, Nothing, "Enable/disable environmental effects (ambient life + sound)."),
    Unary("enableradio", Boolean, Nothing, "Enables radio transmissions to be heard and seen on screen."),
    Unary("enablesatnormalondetail", Boolean, Nothing, "Enables/disables satellite normal map od detail maps."),
    Unary("enablesaving", Array, Nothing, "Enable / disable saving of the game. When disabled, the autosave is created (if not forbidden by save == false)."),
    Unary("enablesaving", Boolean, Nothing, "Enable / disable saving of the game. When disabled, the autosave is created (if not forbidden by save == false)."),
    Unary("enablesentences", Boolean, Nothing, "Enables radio transmissions to be heard and seen on screen. It does not affect KBTell conversations."),
    Unary("enablestressdamage", Boolean, Nothing, "Enable stress damage."),
    Unary("enableteamswitch", Boolean, Nothing, "Enable / disable team switch."),
    Unary("enabletraffic", Boolean, Nothing, "Enable ambient traffic."),
    Unary("enableweapondisassembly", Boolean, Nothing, "Controls player ability to disassemble any object"),
    Unary("endmission", String, Nothing, "Finish the mission. The end type can be \"CONTINUE\", \"KILLED\", \"LOSER\", \"END1\", \"END2\", \"END3\", \"END4\", \"END5\", or \"END6\"."),
    Unary("enginesisonrtd", Object, Array, "Returns which engines are producing some work."),
    Unary("enginespowerrtd", Object, Array, "Power produced by engines in Watts."),
    Unary("enginesrpmrtd", Object, Array, "Returns all engines RPM."),
    Unary("enginestorquertd", Object, Array, "Torque produced by engines in Newton*meter."),
    Unary("entities", Array, Array, "Returns a list of entities with given type. "),
    Unary("entities", String, Array, "Returns a list of entities with given type. "),
    Unary("equipmentdisabled", Object, Array, "Returns array with disabled state of NVG and TI equipment"),
    Unary("estimatedtimeleft", Number, Nothing, "Returns the estimated time left in the game. Using this function the designer can provide a \"time left\" estimate that is shown in the \"Game in progress\" screen or in the master browser. For missions with a hard set limit adjusted via Param1, the following example can be used in the init.sqs file."),
    Unary("everybackpack", Object, Array, "Returns array of backpacks stored in given crate .e.g. used for accessing backpack content of a backpack on ground."),
    Unary("everycontainer", Object, Array, "Returns array of all containers(uniforms, vest, backpacks) stored in given crate .e.g. used for accessing container's content stored into ammoBox or ground."),
    Unary("execfsm", String, Number, "Execute the scripted FSM. The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. Return the FSM handler or 0 when failed."),
    Unary("execvm", String, Script, "Compile and execute function (sqf). The function is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder."),
    Unary("exp", Number, Number, "The exponential value of x."),
    Unary("expecteddestination", Object, Array, "Return expected destination of unit as a [position, planningMode, forceReplan]."),
    Unary("exportjipmessages", String, Nothing, "Exports list of JIP messages to a file."),
    Unary("eyedirection", Object, Array, "Returns the direction object is watching (eyes, or a vehicle primary observer)."),
    Unary("eyepos", Object, Array, "Returns the position of the object eye in format <ar>PositionASL</ar>."),
    Unary("face", Object, String, "Returns the face from identity of given object."),
    Unary("faction", Object, String, "Gets unit faction. If faction is not defined, returns empty string."),
    Unary("failmission", String, Nothing, "Finish the mission. The end type can be \"CONTINUE\", \"KILLED\", \"LOSER\", \"END1\", \"END2\", \"END3\", \"END4\", \"END5\", or \"END6\". Mission saves will not be deleted."),
    Unary("fileexists", String, Boolean, "Checks if file at given path exists."),
    Unary("fillweaponsfrompool", Object, Nothing, "Adds magazines from the campaign pool to the person (depending on the weapons the person has)."),
    Unary("finddisplay", Number, Display, "Find display by its IDD."),
    Unary("finddisplay", String, Display, "Find display by its UniqueName (UIOnTexture only)."),
    Unary("finite", Number, Boolean, "True, if number is finite (not infinite and valid number)"),
    Unary("firstbackpack", Object, Object, "Returns object of the first stored backpack in another weaponholder.e.g. used for accessing backpack content of a backpack on ground."),
    Unary("flag", Object, Object, "If the unit has a flag, this flag is returned.
If not, objNull is returned."),
    Unary("flaganimationphase", Object, Number, "Returns current animations phase of a flag"),
    Unary("flagowner", Object, Object, "When used on a flag, the returned value is the person that has this flag.
When used on anything else, objNull is returned."),
    Unary("flagside", Object, Side, "Returns the current side of the flag."),
    Unary("flagtexture", Object, String, "Returns the current texture of the flag."),
    Unary("flatten", Array, Array, "Flattens an array."),
    Unary("fleeing", Object, Boolean, "Checks whether the unit is fleeing. A dead or empty unit returns false."),
    Unary("floor", Number, Number, "The floor value of x."),
    Unary("focusedctrl", Display, Control, "Returns currently focused control."),
    Unary("for", Array, For, "creates cycle, using C like style. See example."),
    Unary("for", String, For, "Starts for sequence, use in complete form(see example)."),
    Unary("forceatpositionrtd", Array, Array, "Add force generator to world. Returns force index."),
    Unary("forcecadetdifficulty", Array, Array, "Overrides showCadetHints and showCadetWP difficulty settings and returns previous settings."),
    Unary("forcegeneratorrtd", Number, Array, "Add force generator to world. Returns force index."),
    Unary("forcemap", Boolean, Nothing, "Forces the map to display."),
    Unary("forcerespawn", Object, Nothing, "Force respawns given unit (stays old \"killed\" body). Will not count score"),
    Unary("forceunicode", Number, Nothing, "Enabled Unicode handling for compatible commands. -1 : OFF; 0 : ON until end of script; 1 : ON until next compatible command. "),
    Unary("format", Array, String, "The first argument of the array is in format string. This string may contain references to the following arguments using format %1, %2, etc. Each %x is replaced by the corresponding argument. %x may appear in the string in any order."),
    Unary("formation", Group, String, "Returns the formation of the group (\"COLUMN\", \"STAG COLUMN\", \"WEDGE\", \"ECH LEFT\", \"ECH RIGHT\", \"VEE\" or \"LINE\")."),
    Unary("formation", Object, String, "Returns the formation of the group (\"COLUMN\", \"STAG COLUMN\", \"WEDGE\", \"ECH LEFT\", \"ECH RIGHT\", \"VEE\" or \"LINE\")."),
    Unary("formation", TeamMember, String, "Return a formation of given team."),
    Unary("formationdirection", Object, Number, "Return the direction unit watching in formation."),
    Unary("formationleader", Object, Object, "Return leader of the formation."),
    Unary("formationmembers", Object, Array, "Return list of units (drivers) in the formation."),
    Unary("formationposition", Object, Array, "Return position of unit in the formation."),
    Unary("formationtask", Object, String, "Return the current task of the unit in the formation."),
    Unary("formattext", Array, String, "Creates a structured text by replacing %1, %2, etc. in format by plain or structured texts given as arguments."),
    Unary("formleader", Object, Object, "Returns the formation leader for the given unit. For dead units objNull is returned. The result is often the same as groupLeader, but not always."),
    Unary("freeextension", String, Boolean, "Unloads given extension (DEV branch only)"),
    Unary("freeextension", String, Nothing, "Unloads given extension (DEV branch only)"),
    Unary("fromeditor", TeamMember, Boolean, "Return if given team was inserted directly from mission editor."),
    Unary("fuel", Object, Number, "Checks how much fuel is left in the gas tank, in the range from 0 to 1."),
    Unary("fullcrew", Array, Array, "Returns array with all crew of given type inside given vehicle"),
    Unary("fullcrew", Object, Array, "Returns array with all crew inside given vehicle"),
    Unary("gearidcammocount", Number, Number, "Returns ammo count of assigned magazine."),
    Unary("gearslotammocount", Control, Number, "Returns ammo count of assigned magazine."),
    Unary("gearslotdata", Control, String, "Returns gear slot item name."),
    Unary("gesturestate", Object, String, "Return the name of the current primary gesture."),
    Unary("get3denactionstate", String, Number, "Returns state of given operation."),
    Unary("get3denconnections", Anything, Array, "Returns list of all connections related to given entity."),
    Unary("get3denentity", Number, Anything, "Finds entity with given ID in editor and returns it for use in scripts."),
    Unary("get3denentityid", Anything, Number, "Returns 3DEN ID of given entity."),
    Unary("get3dengrid", String, Nothing, "Gets grid size of given grid type."),
    Unary("get3denlayerentities", Number, Array, "Returns list of all items from inside of given layer."),
    Unary("get3denselected", String, Array, "Return all selected objects of given type."),
    Unary("getaimingcoef", Object, Number, "Get current aiming coefficient (higher ~ less precise, default is 1)"),
    Unary("getallenv3dsoundcontrollers", Object, Array, "Returns pairs of all 3D controllers for the given environmental object"),
    Unary("getallenvsoundcontrollers", Array, Array, "Returns pairs of all environmental controllers"),
    Unary("getallhitpointsdamage", Object, Array, "Returns 3 arrays for easy cross reference: 1st - array of hit point names, 2nd - array of hit selection names, 3rd - array of damage values."),
    Unary("getallownedmines", Object, Array, "Get all mine objects this unit has ownership over."),
    Unary("getallpylonsinfo", Object, Array, "Return array with all vehicle pylons info"),
    Unary("getallsoundcontrollers", Object, Array, "Return pairs (name, value) of all vehicle controllers"),
    Unary("getallunittraits", Object, Array, "Returns all units traits currently present on that unit"),
    Unary("getammocargo", Object, Number, "Returns the amount of ammo resources in the cargo space of a repair vehicle."),
    Unary("getanimaimprecision", Object, Number, "Returns aim precision for current animation"),
    Unary("getanimspeedcoef", Object, Number, "Get coefficient for animation speed"),
    Unary("getarray", Config, Array, "Extract array from config entry."),
    Unary("getartilleryammo", Array, Array, "Get list of all available magazines of artillery units in the list."),
    Unary("getassetdlcinfo", Array, Array, "Returns DLC information about given config class. Config param is optional, default is 'configFile >> \"CfgVehicles\"'"),
    Unary("getassetdlcinfo", Object, Array, "Returns DLC information about given object or model"),
    Unary("getassetdlcinfo", String, Array, "Returns DLC information about given object or model"),
    Unary("getassignedcuratorlogic", Object, Object, "Returns curator logic to which has given player access."),
    Unary("getassignedcuratorunit", Object, Object, "Returns unit assigned to curator logic."),
    Unary("getattacktarget", Object, Object, "Return the target currently being attacked by the vehicle."),
    Unary("getbackpackcargo", Object, Array, "Returns all backpacks  names and count from ammo box (or any general weapon holder container)."),
    Unary("getbleedingremaining", Object, Number, "Return reamining time of bleeding."),
    Unary("getburningvalue", Object, Number, "Return amount of damage from fire."),
    Unary("getcameraviewdirection", Object, Array, "Returns the direction the unit is looking in."),
    Unary("getcenterofmass", Object, Array, "Returns center of mass of an object"),
    Unary("getconnecteduav", Object, Object, "Returns UAV if unit has connection to some UAV."),
    Unary("getconnecteduavunit", Object, Object, "Returns UAV unit if the given unit has connection to some UAV and took control of a turret."),
    Unary("getcontainermaxload", String, Number, "Returns max load of a given containerItem"),
    Unary("getcorpse", Object, Object, "Returns the corpse which is associated with given supply"),
    Unary("getcruisecontrol", Object, Array, "Returns the vehicles current speed limiter/cruise control parameters"),
    Unary("getcustomaimcoef", Object, Number, "Returns custom aiming coefficient for weapon sway"),
    Unary("getcustomsoundcontroller", Array, Number, "Return current value set to the controller"),
    Unary("getcustomsoundcontrollercount", Object, Number, "Return number of custom sound controllers for the vehicle"),
    Unary("getdammage", Object, Number, "Returns the object damage in the range from 0 to 1."),
    Unary("getdebriefingtext", String, Array, "Returns array in format [title, description, subtitle, picture, pictureBackground]"),
    Unary("getdescription", Object, Array, "Returns the string representation of unit as an four slots array ([unit,uniform,vest,backpack])"),
    Unary("getdir", Object, Number, "Returns the object heading in the range from 0 to 360."),
    Unary("getdirvisual", Object, Number, "Returns the object heading in the range from 0 to 360."),
    Unary("getdiverstate", Object, Boolean, "Returns true when object is in diver state (diving goggles on)"),
    Unary("getdlcassetsusagebyname", String, Array, "Returns an array with the session and global time the asset has been used."),
    Unary("getdlcs", Number, Array, "Returns list of appIds of game DLCs. Use filter param to get only certain DLCs: 0:all, 1:owned, 2:not owned"),
    Unary("getdlcusagetime", Number, Number, "Returns total time the assets of the given DLC has been used."),
    Unary("geteditorcamera", Control, Object, "Fetches a reference to the mission editor camera."),
    Unary("geteditormode", Control, String, "Returns the current mode of the editor."),
    Unary("getenginetargetrpmrtd", Object, Array, "Returns target rpm of all engines."),
    Unary("geteventhandlerinfo", Array, Array, "Returns event handler info in the following format: [exists, islast, total]"),
    Unary("getfatigue", Object, Number, "Returns relative exhaustion of a unit [0..1]"),
    Unary("getfieldmanualstartpage", Display, Array, "Returns array of the starting topic and hint the given field manual should display"),
    Unary("getforcedflagtexture", Object, String, "Returns the current texture of the forced flag. see ForceFlagTexture"),
    Unary("getforcedspeed", Object, Number, "Returns the value of vehicle forced speed or -1 if not set"),
    Unary("getfuelcargo", Object, Number, "Returns the fuel amount in the cargo space of a refuelling vehicle."),
    Unary("getgraphvalues", Array, Array, "Generate graph y - coordinates of all input values within specific x and y range"),
    Unary("getgroupiconparams", Group, Array, "Returns group icons params. [color, text,scale, visible]"),
    Unary("getgroupicons", Group, Array, "Returns all group icons.[[id,icon,[offsetx,offsety],[..],..]"),
    Unary("getitemcargo", Object, Array, "Returns all items names and count from ammo box (or any general weapon holder container)."),
    Unary("getlightingat", Object, Array, "returns current lighting at world position"),
    Unary("getmagazinecargo", Object, Array, "Returns all magazines  names and count from ammo box (or any general weapon holder container)."),
    Unary("getmarkercolor", String, String, "Gets the marker color. See <f>setMarkerColor</f>."),
    Unary("getmarkerpos", Array, Array, "Returns the marker position in format [x,z,y], where z is preserved."),
    Unary("getmarkerpos", String, Array, "Returns the marker positon in format [x,z,y]."),
    Unary("getmarkersize", String, Array, "Gets the marker size. See <f>setMarkerSize</f>."),
    Unary("getmarkertype", String, String, "Gets the type of the marker. See <f>setMarkerType</f>."),
    Unary("getmass", Object, Number, "Returns mass of an object"),
    Unary("getmissionconfig", String, Config, "Returns config for given mission attribute"),
    Unary("getmissionconfigvalue", Array, Array, "Returns value of given entry in mission config file"),
    Unary("getmissionconfigvalue", Array, Number, "Returns value of given entry in mission config file"),
    Unary("getmissionconfigvalue", Array, String, "Returns value of given entry in mission config file"),
    Unary("getmissionconfigvalue", String, Array, "Returns value of given entry in mission config file"),
    Unary("getmissionconfigvalue", String, Number, "Returns value of given entry in mission config file"),
    Unary("getmissionconfigvalue", String, String, "Returns value of given entry in mission config file"),
    Unary("getmissionlayerentities", Number, Array, "Returns list of entities currently in mission form given layer."),
    Unary("getmissionlayerentities", String, Array, "Returns list of entities currently in mission form given layer."),
    Unary("getmissionpath", String, String, "Returns the full mission root plus filename."),
    Unary("getmodelinfo", Object, Array, "Returns object's model info in format [modelName, modelPath, hasSkeleton, placingPoint]. Model path is suitable for use with <f>createSimpleObject</f> command."),
    Unary("getnumber", Config, Number, "Extract number from config entry."),
    Unary("getobjectdlc", Object, Number, "Returns an appId the object belongs to. The information is taken from it's model."),
    Unary("getobjectfov", Object, Number, "Returns current FOV of the given object"),
    Unary("getobjectid", Object, String, "Returns Visitor object id in string format"),
    Unary("getobjectmaterials", Object, Array, "Returns a list of all custom materials assigned to given object."),
    Unary("getobjectscale", Object, Number, "Returns the render scale of the object."),
    Unary("getobjecttextures", Object, Array, "Returns a list of all custom textures assigned to given object."),
    Unary("getobjecttype", Object, Number, "Returns object type as Number"),
    Unary("getoxygenremaining", Object, Number, "Return amount of remaining oxygen."),
    Unary("getpersonuseddlcs", Object, Array, "Returns list of all DLCs (appIds, both owned or not) the person is currently using."),
    Unary("getpilotcameradirection", Object, Array, "Returns pilot camera direction (model space)"),
    Unary("getpilotcameraposition", Object, Array, "Returns pilot camera position (model space)"),
    Unary("getpilotcamerarotation", Object, Array, "Returns pilot camera orientation (model space)"),
    Unary("getpilotcameratarget", Object, Array, "Returns position/target pilot camera is pointing at"),
    Unary("getplatenumber", Object, String, "get plate info from car or motorcycle"),
    Unary("getplayerchannel", Object, Number, "Returns channel the player currently speaks on. Returns -1 if there is no communication in progress."),
    Unary("getplayerid", Object, String, "Returns player ID used for marker creation."),
    Unary("getplayerscores", Object, Array, "MP: returns the unit's table of scores (infantry kills, soft vehicle kills, armor kills, air kills, deaths, total score)."),
    Unary("getplayeruid", Object, String, "Get unique player id."),
    Unary("getplayervonvolume", Object, Number, "Returns the players current Voice over Net volume."),
    Unary("getpos", Location, Array, "Return (raw) position of given location."),
    Unary("getpos", Object, Array, "Returns the object position in format <ar>Position</ar>."),
    Unary("getposasl", Object, Array, "Returns the object position in format <ar>PositionASL</ar>."),
    Unary("getposaslvisual", Object, Array, "Returns the object rendered position in format <ar>PositionASL</ar>."),
    Unary("getposaslw", Object, Array, "Returns the object position in format <ar>PositionASLW</ar>."),
    Unary("getposatl", Object, Array, "Returns the object position in format <ar>PositionATL</ar>."),
    Unary("getposatlvisual", Object, Array, "Returns the object position in format <ar>PositionATL</ar>."),
    Unary("getposvisual", Object, Array, "Returns the object rendered position in format <ar>Position</ar>."),
    Unary("getposworld", Object, Array, "Returns the object position in format <ar>PositionWorld</ar>."),
    Unary("getposworldvisual", Object, Array, "Returns the object rendered position in format <ar>PositionWorld</ar>."),
    Unary("getpylonmagazines", Object, Array, "return array of magazines on pylons"),
    Unary("getrepaircargo", Object, Number, "Returns the amount or repair resources in the cargo space of a repair vehicle."),
    Unary("getroadinfo", Object, Array, "Returns road info in format [maptype, width, ispedestrian, texture, texture end, material, begpos, endpos, isbridge]"),
    Unary("getrotorbrakertd", Object, Number, "Returns if rotorbrake is on."),
    Unary("getsensortargets", Object, Array, "Returns vehicles current sensor targets"),
    Unary("getsensorthreats", Object, Array, "Returns vehicles current threads as provided by its sensors"),
    Unary("getshotparents", Object, Array, "Get the shot's parent and a unit which caused the shot to happen."),
    Unary("getslingload", Object, Object, "Return object which is sling loaded by vehicle"),
    Unary("getstamina", Object, Number, "Get current stamina (~ seconds until depletion)"),
    Unary("getstatvalue", String, Number, "Returns value of the given stat. "),
    Unary("getsuppression", Object, Number, "Gets the AI suppression level."),
    Unary("getterrainheight", Array, Number, "Returns terrain height of nearest point from position"),
    Unary("getterrainheightasl", Array, Number, "Returns terrain height above sea level."),
    Unary("gettext", Config, String, "Extract text from config entry."),
    Unary("gettextraw", Config, String, "Extract unlocalized text value from config entry."),
    Unary("gettextureinfo", String, Array, "Returns width and height of the given texture."),
    Unary("gettowparent", Object, Object, "Returns vehicle which is towing given vehicle."),
    Unary("gettrimoffsetrtd", Object, Array, "Returns controls trim offset."),
    Unary("getturretopticsmode", Object, Array, "Returns the index of the current optic mode of the turret occupied by the unit."),
    Unary("getunitfreefallinfo", Object, Array, "Returns array in format [isFalling, isInFreefallPose, freefallMinHeight]"),
    Unary("getunitloadout", Array, Array, "Get array with all assigned items, weapons, containers and its stored items."),
    Unary("getunitloadout", Config, Array, "Get array with all assigned items, weapons, containers and its stored items."),
    Unary("getunitloadout", Object, Array, "Get array with all assigned items, weapons, containers and its stored items."),
    Unary("getunitloadout", String, Array, "Get array with all assigned items, weapons, containers and its stored items."),
    Unary("getunloadincombat", Object, Array, "Returns array with allowCargo and allowTurrets boolean values for setUnloadInCombat"),
    Unary("getuserinfo", String, Array, "Returns an extended information about given user on the server. Server side execution."),
    Unary("getusermfdtext", Object, Array, "Returns array of user text variables used in MFD."),
    Unary("getusermfdvalue", Object, Array, "Returns array of user variables used in MFD."),
    Unary("getvehiclecargo", Object, Array, "Get list of vehicles loaded inside this vehicle."),
    Unary("getvehicletipars", Object, Array, "Get TI parameters for specified vehicle in format [engine/body, tracks/wheels, main gun]"),
    Unary("getweaponcargo", Object, Array, "Returns all weapons  names and count from ammo box (or any general weapon holder container)."),
    Unary("getweaponsway", Object, Number, "Returns current size of weapon sway of a given unit, in radians"),
    Unary("getwingsorientationrtd", Object, Number, "Returns orientation of horizontaol stabilizers."),
    Unary("getwingspositionrtd", Object, Number, "Returns position of stabilizers."),
    Unary("getwppos", Array, Array, "Gets the waypoint position. The format of waypoint is <ar>Waypoint</ar>."),
    Unary("goggles", Object, String, "Returns name of currently used goggles."),
    Unary("goto", String, Nothing, "Only in scripts: go to given label. Note: the string argument is used here. Be sure to use double quotes around the label name in goto."),
    Unary("group", Object, Group, "Returns the group to which the given unit is assigned. For dead units, grpNull is returned."),
    Unary("groupfromnetid", String, Group, "Get group with given unique ID."),
    Unary("groupid", Group, String, "Returns group name."),
    Unary("groupid", Object, Number, "Returns units ID in its group."),
    Unary("groupowner", Group, Number, "Returns ID of client to which the group is local. Can be run only from server. When called from client, it always returns 0."),
    Unary("groups", Side, Array, "Returns all groups on a specific side."),
    Unary("groupselectedunits", Object, Array, "Returns selected groups in sgroup."),
    Unary("gunner", Object, Object, "Returns the gunner of the vehicle. If the vehicle is not a vehicle, but a person, the person is returned."),
    Unary("handgunitems", Object, Array, "Get array with all items assigned to a weapon."),
    Unary("handgunmagazine", Object, String, "Return the names of the types of currently loaded magazines in given weapon."),
    Unary("handgunweapon", Object, String, "Returns the name of a units's handgun (an empty string if there is none)."),
    Unary("handshit", Object, Number, "Checks whether the soldier's hands are hit (causing inaccurate aiming)."),
    Unary("hashvalue", Array, String, "Returns the hash of a value."),
    Unary("hashvalue", Boolean, String, "Returns the hash of a value."),
    Unary("hashvalue", Code, String, "Returns the hash of a value."),
    Unary("hashvalue", Config, String, "Returns the hash of a value."),
    Unary("hashvalue", Group, String, "Returns the hash of a value."),
    Unary("hashvalue", Namespace, String, "Returns the hash of a value."),
    Unary("hashvalue", Number, String, "Returns the hash of a value."),
    Unary("hashvalue", Object, String, "Returns the hash of a value."),
    Unary("hashvalue", Side, String, "Returns the hash of a value."),
    Unary("hashvalue", String, String, "Returns the hash of a value."),
    Unary("haspilotcamera", Object, Boolean, "Returns true if planerOrHeli has pilot camera"),
    Unary("hcallgroups", Object, Array, "Returns selected groups in high command."),
    Unary("hcleader", Group, Object, "Returns group's HC commander."),
    Unary("hcremoveallgroups", Object, Nothing, "Remove all groups from unit's high command bar."),
    Unary("hcselected", Object, Array, "Returns selected groups in high command."),
    Unary("hcshowbar", Boolean, Nothing, "Shows or hides HC bar. There must be some groups under hc command to show hc bar."),
    Unary("headgear", Object, String, "Returns name of currently used headgear."),
    Unary("hidebody", Object, Nothing, "Hides the body of the given person."),
    Unary("hideobject", Object, Nothing, "Hide object (cannot hide static objects)."),
    Unary("hideobjectglobal", Object, Nothing, "Hide object globally (cannot hide static objects). Only from server"),
    Unary("hint", String, Nothing, "Shows a text hint. The text can contain several lines. \\n is used to indicate the end of a line."),
    Unary("hintc", String, Nothing, "Shows a text hint. The text can contain several lines. \\n is used to indicate the end of a line. This hint has to be confirmed."),
    Unary("hintcadet", String, Nothing, "Shows a text hint only when using cadet mode. The text can contain several lines. \\n is used to indicate the end of a line."),
    Unary("hintsilent", String, Nothing, "Same as <f>hint</f>, but without a sound."),
    Unary("hmd", Object, String, "Returns name of currently used HMD."),
    Unary("hostmission", Array, Nothing, "Host the MP mission described by config class. Should be called as a reaction to some UI action in some dialog."),
    Unary("if", Boolean, If, "The first part of the if command."),
    Unary("image", String, String, "Creates a structured text containing the given image."),
    Unary("importallgroups", Control, Nothing, "Imports all groups into the RTE."),
    Unary("importance", Location, Number, "Return importance of given location."),
    Unary("incapacitatedstate", Object, String, "Returns the incapacitated state of the given unit."),
    Unary("inflamed", Object, Boolean, "Check if fireplace is inflamed (burning)."),
    Unary("infopanel", String, Array, "Returns component (like GPS mini-map) on a given info panel. \"left\" or \"right\" constants can be used as panel names. "),
    Unary("infopanels", Array, Array, "Returns array all info panels configured for given object or object and turret path."),
    Unary("infopanels", Object, Array, "Returns array all info panels configured for given object or object and turret path."),
    Unary("ingameuiseteventhandler", Array, Nothing, "Sets given event handler of in-game UI."),
    Unary("inheritsfrom", Config, Config, "Returns base entry of config entry."),
    Unary("inputaction", String, Number, "Return the state of input devices mapped to given input action (see CfgDefaultKeysMapping for action names)."),
    Unary("inputcontroller", Number, Number, "Returns the state of the given controller input"),
    Unary("inputmouse", Number, Number, "Returns the state of the given mouse button: 0-released, 1-click, 2-click+hold, 3-dblclick, 4-dblclick+hold"),
    Unary("inputmouse", String, Boolean, "Returns the result of the given combo involving mouse interaction"),
    Unary("insidebuilding", Object, Number, "Returns how much a man is inside a building (0...1): 0 - outside, 1 - inside"),
    Unary("isabletobreathe", Object, Boolean, "Return whether the unit is diving."),
    Unary("isagent", TeamMember, Boolean, "Check if team member is an agent."),
    Unary("isaimprecisionenabled", Object, Boolean, "Returns true if procedural aiming precision affects weapon sway"),
    Unary("isallowedcrewinimmobile", Object, Boolean, "Returns whether or not units can be in vehicle with broken tracks/wheels"),
    Unary("isarray", Config, Boolean, "Check if config entry represents array."),
    Unary("isautohoveron", Object, Boolean, "Returns true if vehicle has enabled auto hover"),
    Unary("isautonomous", Object, Boolean, "Return true if UAV is in autonomous mode."),
    Unary("isautostartupenabledrtd", Object, Array, "Returns true if automatic start up action is enabled."),
    Unary("isautotrimonrtd", Object, Boolean, "Returns true if autotrim is enabled."),
    Unary("isawake", Object, Boolean, "Returns false is PhysX object is sleeping, or a body is in ragdoll simulation"),
    Unary("isbleeding", Object, Boolean, "Return whether the unit is bleeding."),
    Unary("isburning", Object, Boolean, "Return whether the unit is burning."),
    Unary("isclass", Config, Boolean, "Check if config entry represents config class."),
    Unary("iscollisionlighton", Object, Boolean, "Checks whether the collision light is on.(non-vehicle param returns false)"),
    Unary("iscopilotenabled", Object, Boolean, "Returns true if copilots actions are enabled."),
    Unary("isdamageallowed", Object, Boolean, "Returns true if object damage is allowed"),
    Unary("isdlcavailable", Number, Boolean, "Returns true if the DLC is marked as available."),
    Unary("isengineon", Object, Boolean, "Checks whether the engine is on. "),
    Unary("isfinal", Code, Boolean, "Checks whether or not the passed variable with code could be overridden."),
    Unary("isfinal", String, Boolean, "Checks whether or not the passed variable with code could be overridden."),
    Unary("isforcedwalk", Object, Boolean, "Returns true if player is forced to walk"),
    Unary("isformationleader", Object, Boolean, "Returns true if the specified person is subgroup leader."),
    Unary("isgroupdeletedwhenempty", Group, Boolean, "Returns whether given group is garbage collected or not"),
    Unary("ishidden", Object, Boolean, "Return whether the person  is hidden (reached the hiding position)."),
    Unary("isinremainscollector", Object, Boolean, "Returns true if object will be managed by the unitRemove manager"),
    Unary("iskeyactive", String, Boolean, "Checks whether the given key is active in the current user profile."),
    Unary("islaseron", Object, Boolean, "Returns true if vehicle have laser turned on."),
    Unary("islighton", Array, Boolean, "Checks whether the light is on.(non-vehicle param returns false)"),
    Unary("islighton", Object, Boolean, "Checks whether the light is on.(non-vehicle param returns false)"),
    Unary("islocalized", String, Boolean, "Checks whether given string name is localized."),
    Unary("ismanualfire", Object, Boolean, "Returns true if manual fire is on."),
    Unary("ismarkedforcollection", Object, Boolean, "Checks whether the object is marked for weapons collection."),
    Unary("isnil", Code, Boolean, "Tests whether the variable is null. The function returns true if the variable is null and false if it's not."),
    Unary("isnil", String, Boolean, "Tests whether the variable is null. The function returns true if the variable is null and false if it's not."),
    Unary("isnull", Config, Boolean, "Checks whether the value is equal to configNull."),
    Unary("isnull", Control, Boolean, "Checks whether the value is equal to controlNull.
Note: a==controlNull does not work, because controlNull is not equal to anything, even to itself."),
    Unary("isnull", DiaryRecord, Boolean, "Checks whether the value is equal to diaryRecordNull.
Note: a==diaryRecordNull does not work, because diaryRecordNull is not equal to anything, even to itself."),
    Unary("isnull", Display, Boolean, "Checks whether the value is equal to displayNull.
Note: a==displayNull does not work, because displayNull is not equal to anything, even to itself."),
    Unary("isnull", Group, Boolean, "Checks whether the value is equal to grpNull.
Note: a==GrpNull does not work, because grpNull is not equal to anything, even to itself."),
    Unary("isnull", Location, Boolean, "Check whether the value is null."),
    Unary("isnull", NetObject, Boolean, "Checks whether the value is equal to objNetNull.
Note: a==ObjNetNull does not work, because objNetNull is not equal to anything, even to itself."),
    Unary("isnull", Object, Boolean, "Checks whether the value is equal to objNull.
Note: a==ObjNull does not work, because objNull is not equal to anything, even to itself."),
    Unary("isnull", Script, Boolean, "Checks whether the value is equal to scriptNull.
Note: script == scriptNull does not work, because scriptNull is not equal to anything, even to itself."),
    Unary("isnull", Task, Boolean, "Checks whether the value is equal to taskNull.
Note: a==TaskNull does not work, because taskNull is not equal to anything, even to itself."),
    Unary("isnull", TeamMember, Boolean, "Checks if team member is null."),
    Unary("isnumber", Config, Boolean, "Check if config entry represents number."),
    Unary("isobjecthidden", Object, Boolean, "Checks visibility of an object."),
    Unary("isobjectrtd", Object, Boolean, "Returns true if RTD model is loaded."),
    Unary("isonroad", Array, Boolean, "Check whether given position is on road."),
    Unary("isonroad", Object, Boolean, "Check whether given position is on road."),
    Unary("isplayer", Array, Boolean, "Check if given person or body is/was the player."),
    Unary("isplayer", Object, Boolean, "Check if given person is the player."),
    Unary("isrealtime", Control, Boolean, "Returns true if the mission editor is operating in real time mode."),
    Unary("isshowing3dicons", Control, Boolean, "Returns true if the editor is set to draw 3D icons."),
    Unary("issimpleobject", Object, Boolean, "Check weather given entity is simple object or not"),
    Unary("issprintallowed", Object, Boolean, "Returns true if player is allowed to sprint"),
    Unary("isstaminaenabled", Object, Boolean, "Check if stamina depletion is enabled"),
    Unary("istext", Config, Boolean, "Check if config entry represents text."),
    Unary("istouchingground", Object, Boolean, "Returns true if object is touching the ground."),
    Unary("isturnedout", Object, Boolean, "Returns true if the given unit is turned out. Default is false."),
    Unary("isuavconnected", Object, Boolean, "Returns true if UAV is connected to some terminal."),
    Unary("isvehiclecargo", Object, Object, "Return transporting vehicle if vehicle loaded in one."),
    Unary("isvehicleradaron", Object, Boolean, "Returns true if vehicle has active sensors on."),
    Unary("iswalking", Object, Boolean, "Returns true walk is toggled."),
    Unary("isweapondeployed", Array, Boolean, "Returns true if weapon is deployed. Optional surface select: true - check if deployed on ground, false - check if deployed on object"),
    Unary("isweapondeployed", Object, Boolean, "Returns true if weapon is currently deployed"),
    Unary("isweaponrested", Object, Boolean, "Returns true if weapon is currently rested"),
    Unary("itemcargo", Object, Array, "Get array with items from ammo box (or any general weapon holder container). "),
    Unary("items", Object, Array, "Returns only items that are not magazines/explosives/grenades. Includes also items that are linked on unit (i.e. includes assignedItems array)"),
    Unary("itemswithmagazines", Object, Array, "Get array with all inventory items."),
    Unary("keyimage", Number, String, "Returns a structured text, containing an image or  name (if no image is found) of the button (on the keyboard, mouse or joystick) with the given code."),
    Unary("keyimage", String, String, "Returns a structured text, containing an image or  name (if no image is found) of the button (on the keyboard, mouse or joystick) with the given code."),
    Unary("keyname", Number, String, "Returns the name of a button (on the keyboard, mouse or joystick) with the given code."),
    Unary("keyname", String, String, "Returns the name of a button (on the keyboard, mouse or joystick) with the given code."),
    Unary("keys", HashMap, Array, "Returns all keys stored in the HashMap."),
    Unary("landresult", Object, String, "Return the result of helicopter landing position searching (performed after land command). The value can be \"Found\" (position found), \"NotFound\" (position not found), \"NotReady\" (position searching is still in progress) or empty string when wrong argument given."),
    Unary("lasertarget", Object, Object, "Returns target created by gunner in given vehicle."),
    Unary("lbadd", Array, Number, "Adds an item with the given text to the listbox or combobox with id idc of the topmost user dialog. It returns the index of the newly added item."),
    Unary("lbclear", Control, Nothing, "Clears all items in the given listbox or combobox."),
    Unary("lbclear", Number, Nothing, "Clears all items in the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbcolor", Array, Array, "Returns the text color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog. The color is returned in format <ar>Color</ar>."),
    Unary("lbcolorright", Array, Array, "Returns the text color of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user dialog. The color is returned in format <ar>Color</ar>."),
    Unary("lbcursel", Control, Number, "Returns the index of the selected item of the given listbox or combobox."),
    Unary("lbcursel", Number, Number, "Returns the index of the selected item of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbdata", Array, String, "Returns the additional text (invisible) in an item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbdelete", Array, Nothing, "Removes the item with the given index from the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbpicture", Array, String, "Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbpictureright", Array, String, "Returns the second (right aligned) picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbselection", Control, Array, "Returns the array of selected rows indices in the given listbox."),
    Unary("lbsetcolor", Array, Nothing, "Sets the color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given color. Color is in format <ar>Color</ar>."),
    Unary("lbsetcolorright", Array, Nothing, "Sets the color of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given color. Color is in format <ar>Color</ar>."),
    Unary("lbsetcursel", Array, Nothing, "Selects the item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbsetdata", Array, Nothing, "Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data."),
    Unary("lbsetpicture", Array, Nothing, "Sets the picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Unary("lbsetpicturecolor", Array, Nothing, "Sets the color of item's picture with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Unary("lbsetpicturecolordisabled", Array, Nothing, "Sets the disabled color of item's picture with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Unary("lbsetpicturecolorselected", Array, Nothing, "Sets the selected color of item's picture with the given index of the listbox with id idc of the topmost user dialog to the given color. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Unary("lbsetpictureright", Array, Nothing, "Sets the second (right aligned) picture in the item with the given index of the listbox or combobox with id idc of the topmost user dialog. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Unary("lbsetselectcolor", Array, Nothing, "Sets the select color of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given color. Color is in format <ar>Color</ar>."),
    Unary("lbsetselectcolorright", Array, Nothing, "Sets the select color of the secondary text (right aligned) of the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given color. Color is in format <ar>Color</ar>."),
    Unary("lbsettext", Array, String, "Returns the secondary shown text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbsettooltip", Array, Nothing, "Sets tooltip for item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data."),
    Unary("lbsetvalue", Array, Nothing, "Sets the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given value."),
    Unary("lbsize", Control, Number, "Returns the number of items in the given listbox or combobox."),
    Unary("lbsize", Number, Number, "Returns the number of items in the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbsort", Array, Nothing, "Sorts the given listbox or combobox by item text, order can be \"asc\" for ascending or \"desc\" for descending."),
    Unary("lbsort", Control, Nothing, "Sorts the given listbox or combobox by item text."),
    Unary("lbsort", Number, Nothing, "Sorts the given listbox or combobox by item text."),
    Unary("lbsortbyvalue", Control, Nothing, "Sorts the given listbox or combobox by item value."),
    Unary("lbsortbyvalue", Number, Nothing, "Sorts the given listbox or combobox by item value."),
    Unary("lbtext", Array, String, "Returns the shown text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbtextright", Array, String, "Returns the secondary shown text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("lbtooltip", Array, String, "Returns tooltip for the given index of the listbox with id idc of the topmost user dialog"),
    Unary("lbvalue", Array, Number, "Returns the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog."),
    Unary("leader", Group, Object, "Returns the group leader for the given group. For a dead unit, grpNull is returned."),
    Unary("leader", Object, Object, "Returns the group leader for the given unit. For dead units, objNull is returned."),
    Unary("leader", TeamMember, TeamMember, "Return the leader of given team."),
    Unary("leaderboarddeinit", String, Boolean, "Deletes internal class for the leaderboard with given name. Returns true if the board has been found and deinitialized."),
    Unary("leaderboardgetrows", String, Array, "Returns an array with values for the given leaderboard, the array is in format: [[player1Name, score, rank, [details]], [player2Name, score, rank, [details]], [player3Name, score, rank, [details]] ... ]; This can be called after the one of the row request function has been called and successfully finished!"),
    Unary("leaderboardinit", String, Boolean, "Initialize the leaderboard structure for board with given name. Returns true if the board is already initialized."),
    Unary("leaderboardrequestrowsfriends", String, Boolean, "Requests given leaderboard to download friends rows from the given leaderboard;"),
    Unary("leaderboardrequestrowsglobal", Array, Boolean, "Requests given leaderboard to download values from global table; rowOffset:how many rows are skipped; rowsRequested: max. number of rows downloaded. Returns true if request has been started."),
    Unary("leaderboardrequestrowsglobalarounduser", Array, Boolean, "Requests given leaderboard to download rows around the user position in the table; rowOffset:offset from user position (ex. -5 = five position before user etc.); rowsRequested: max. number of rows downloaded; Returns true if request has been started."),
    Unary("leaderboardsrequestuploadscore", Array, Boolean, "Starts async. operation to upload score to board with given name, value always overwrite the current value in the board. The details array is optional. The board has to be initialized before the call."),
    Unary("leaderboardsrequestuploadscorekeepbest", Array, Boolean, "Starts async. operation to upload score to board with given name, value is only stored to board if it's better than one already in the board. The details array is optional. The board has to be initialized before the call."),
    Unary("leaderboardstate", String, Number, "returns state of the board with given name. 0: Busy (async. operation in progress); 1: Async. operation ended with success; 2: Async. operation ended with error; 3: Invalid board (bad board name, not initialized etc.)."),
    Unary("lifestate", Object, String, "Returns the life state of the given unit."),
    Unary("lightdetachobject", Object, Nothing, "Detach light from object."),
    Unary("lightison", Object, String, "Checks whether the lampost is turned on. Possible values are \"ON\", \"OFF\" and \"AUTO\" (auto means the lamp will be shining during the night automatically)."),
    Unary("linearconversion", Array, Number, "Converts value in interval [min, max] to newMin + a*(max-min)/(newMax - newMin), potentially clamps the final value."),
    Unary("lineintersects", Array, Boolean, "Returns true, if line intersect with any object."),
    Unary("lineintersectsobjs", Array, Array, "Returns list of objects intersected by given line. Filters (can be combined): CF_ONLY_WATER=1,CF_NEAREST_CONTACT=2,CF_ONLY_STATIC=4,CF_ONLY_DYNAMIC=8,CF_FIRST_CONTACT=16,CF_ALL_OBJECTS=32 (usable only with CF_FIRST_CONTACT and it will check one contact per object)"),
    Unary("lineintersectssurfaces", Array, Array, "Returns list of objects and points on surfaces intersected by given line"),
    Unary("lineintersectswith", Array, Array, "Returns list of objects intersected by given line."),
    Unary("list", Object, Array, "Returns a list of units that would activate the given trigger. For a trigger of type \"Not present\" the list is the same as the list that would be returned for type \"Present\"."),
    Unary("listremotetargets", Side, Array, "return list of datalink targets and time for which they will be/were known"),
    Unary("listvehiclesensors", Object, Array, "return class names and component names of available sensors"),
    Unary("ln", Number, Number, "The natural logarithm of x."),
    Unary("lnbaddarray", Array, Number, "Adds list of rows of strings."),
    Unary("lnbaddcolumn", Array, Number, "Adds an column at given position. It returns the index of the newly added column."),
    Unary("lnbaddrow", Array, Number, "Adds an row of strings."),
    Unary("lnbclear", Control, Nothing, "Clears all items in the given listbox or combobox."),
    Unary("lnbclear", Number, Nothing, "Clears all items in the 2D listbox."),
    Unary("lnbcolor", Array, Array, "Returns the text color of the item with the given position of the 2D listbox. The color is returned in format <ar>Color</ar>."),
    Unary("lnbcolorright", Array, Array, "Returns the secondary text (right aligned) color of the item with the given position of the 2D listbox. The color is returned in format <ar>Color</ar>."),
    Unary("lnbcurselrow", Control, Number, "Returns the index of the selected item of the given listbox or combobox."),
    Unary("lnbcurselrow", Number, Number, "Returns the index of the selected row id 2D listbox."),
    Unary("lnbdata", Array, String, "Returns the additional text (invisible) in an item with the given position of the 2D listbox."),
    Unary("lnbdeletecolumn", Array, Nothing, "Removes column with given index."),
    Unary("lnbdeleterow", Array, Nothing, "Removes row with given index from the 2D listbox."),
    Unary("lnbgetcolumnsposition", Control, Array, "Returns the index of the selected item of the given listbox or combobox."),
    Unary("lnbgetcolumnsposition", Number, Array, "Returns the columns position in 2D listbox."),
    Unary("lnbpicture", Array, String, "Returns the picture name of the item with the given position of the 2D listbox."),
    Unary("lnbpictureright", Array, String, "Returns the second (right aligned) picture name of the item with the given position of the 2D listbox."),
    Unary("lnbsetcolor", Array, Nothing, "Sets the color of the item with the given position of the 2D listbox. Color is in format <ar>Color</ar>."),
    Unary("lnbsetcolorright", Array, Nothing, "Sets the color of the secondary text (right aligned) of the item with the given position of the 2D listbox. Color is in format <ar>Color</ar>."),
    Unary("lnbsetcolumnspos", Array, Nothing, "Sets position of 2d listbox columns."),
    Unary("lnbsetcurselrow", Array, Nothing, "Selects the row with the given index of the 2D listbox."),
    Unary("lnbsetdata", Array, Nothing, "Sets the additional text (invisible) in the item with the given position of the 2D listbox."),
    Unary("lnbsetpicture", Array, Nothing, "Sets the picture in the item with the given position of the 2D listbox. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Unary("lnbsetpicturecolor", Array, Nothing, "Sets the picture color in the item with the given position of the 2D listbox."),
    Unary("lnbsetpicturecolorright", Array, Nothing, "Sets the second (right aligned) picture color in the item with the given position of the 2D listbox."),
    Unary("lnbsetpicturecolorselected", Array, Nothing, "Sets the picture color in the item with the given position of the 2D listbox."),
    Unary("lnbsetpicturecolorselectedright", Array, Nothing, "Sets the second (right aligned) picture color in the item with the given position of the 2D listbox."),
    Unary("lnbsetpictureright", Array, Nothing, "Sets the second (right aligned) picture in the item with the given position of the 2D listbox. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Unary("lnbsettext", Array, Nothing, "Sets the text in the item with the given position of the 2D listbox."),
    Unary("lnbsettextright", Array, Nothing, "Sets the secondary (right aligned) text in the item with the given index of the given 2D listbox to the given text."),
    Unary("lnbsettooltip", Array, Nothing, "Sets the tooltip on the item with the given position of the given 2D listbox"),
    Unary("lnbsetvalue", Array, Nothing, "Sets the additional integer value in the item with the position index of the 2D listbox."),
    Unary("lnbsize", Control, Array, "Returns the number of items in the given listbox or combobox."),
    Unary("lnbsize", Number, Array, "Returns [X,Y] size of 2D listbox."),
    Unary("lnbsort", Array, Nothing, "Sorts given multicolumn listbox by texts in given column in ascending or descending order."),
    Unary("lnbsortbyvalue", Array, Nothing, "Sorts given multicolumn listbox by values in given column in ascending or descending order."),
    Unary("lnbtext", Array, String, "Returns the shown text in the item with the given position of the 2D listbox."),
    Unary("lnbtextright", Array, String, "Returns the shown secondary text (right aligned) in the item with the given position of the 2D listbox."),
    Unary("lnbvalue", Array, Number, "Returns the additional integer value in the item with the given position of the 2D listbox."),
    Unary("load", Object, Number, "Returns percentage of current sum of mass from items stored in a container or, if unit is given, in all unit's containers"),
    Unary("loadabs", Object, Number, "Returns current sum of mass from items stored in a container or, if unit is given, in all unit's containers, linked items and weapons."),
    Unary("loadbackpack", Object, Number, "Returns current sum of mass from items stored in a backpack."),
    Unary("loadconfig", String, Config, "Loads a config file"),
    Unary("loadfile", String, String, "Returns contents of a given file. On dedicated server/client connected to a dedicated server, if allowedLoadFileExtensions parameter is used in the DS config file this only returns contents of a file if the file extension is listed in it. The list should contain at least the following extensions: hpp, sqs, sqf, fsm, cpp, paa, txt, xml, inc, ext, sqm, ods, fxy, lip, csv, kb, bik, bikn, html, biedi. Note, this list may not be completely up to date"),
    Unary("loaduniform", Object, Number, "Returns current sum of mass from items stored in a uniform."),
    Unary("loadvest", Object, Number, "Returns current sum of mass from items stored in a vest."),
    Unary("local", Group, Boolean, "MP: checks whether the given group is local on the computer."),
    Unary("local", Object, Boolean, "MP: checks whether the given unit is local on the computer. This can be used when one or more activation fields or scripts need to be performed only on one computer.
In SP all objects are local. Note: all static objects are local on all computers."),
    Unary("localize", String, String, "Replaces the string with the given name with the corresponding localized text from the stringtable.csv file."),
    Unary("locationposition", Location, Array, "Return position of given location."),
    Unary("locked", Object, Number, "Checks whether the vehicle is locked for the player. If it's locked, the player cannot mount / dismount without an order. 0 - Unlocked, 1 - Default, 2 - Locked, 3 - Locked for player"),
    Unary("lockeddriver", Object, Boolean, "Check whether driver position of the vehicle turret is locked."),
    Unary("lockedinventory", Object, Boolean, "Checks whether vehicle inventory is locked"),
    Unary("lockidentity", Object, Boolean, "Locks identity of a person. This will disable default identity."),
    Unary("log", Number, Number, "The base-10 logarithm of x."),
    Unary("lognetwork", Array, Number, "Registers new log file for recording a network traffic, returns handle for the log."),
    Unary("lognetworkterminate", Number, Nothing, "Terminates a network log file with given handle"),
    Unary("magazinecargo", Object, Array, "Get array with magazines from ammo box (or any general weapon holder container). "),
    Unary("magazines", Array, Array, "Returns an array with the type names of all the vehicle's magazines."),
    Unary("magazines", Object, Array, "Returns an array with the type names of all the vehicle's magazines."),
    Unary("magazinesallturrets", Array, Array, "Returns an array with the type names of all the vehicle's magazines and ammo count."),
    Unary("magazinesallturrets", Object, Array, "Returns an array with the type names of all the vehicle's magazines and ammo count."),
    Unary("magazinesammo", Array, Array, "Returns an array of subarrays with the type names and ammo left of all the vehicle's magazines."),
    Unary("magazinesammo", Object, Array, "Returns an array of subarrays with the type names and ammo left of all the vehicle's magazines."),
    Unary("magazinesammocargo", Object, Array, "Returns an array of subarrays with the type names and ammo left of all the vehicle's cargo magazines."),
    Unary("magazinesammofull", Array, Array, "Returns an array of subarrays with the type names and ammo left of all the vehicle's magazines."),
    Unary("magazinesammofull", Object, Array, "Returns an array of subarrays with the type names and ammo left of all the vehicle's magazines."),
    Unary("magazinesdetail", Array, Array, "Returns an array with the type names of all the unit's magazines."),
    Unary("magazinesdetail", Object, Array, "Returns an array with the type names of all the unit's magazines."),
    Unary("magazinesdetailbackpack", Array, Array, "Returns an array with the type names of all the unit's backpack magazines."),
    Unary("magazinesdetailbackpack", Object, Array, "Returns an array with the type names of all the unit's backpack magazines."),
    Unary("magazinesdetailuniform", Array, Array, "Returns an array with the type names of all the unit's uniform magazines."),
    Unary("magazinesdetailuniform", Object, Array, "Returns an array with the type names of all the unit's uniform magazines."),
    Unary("magazinesdetailvest", Array, Array, "Returns an array with the type names of all the unit's vest magazines."),
    Unary("magazinesdetailvest", Object, Array, "Returns an array with the type names of all the unit's vest magazines."),
    Unary("mapanimadd", Array, Nothing, "Adds the next frame to the map animation. The format of frame is [time, zoom, position], the format of position is <ar>Position2D</ar>."),
    Unary("mapcenteroncamera", Control, Array, "center minimap on camera"),
    Unary("mapgridposition", Array, String, "Returns the position as map coords."),
    Unary("mapgridposition", Object, String, "Returns the position as map coords."),
    Unary("markeralpha", String, Number, "Gets the marker alpha. See <f>setMarkerAlpha</f>."),
    Unary("markerbrush", String, String, "Gets the marker brush. See <f>setMarkerBrush</f>."),
    Unary("markerchannel", String, String, "Gets the markers chat channel."),
    Unary("markercolor", String, String, "Gets the marker color. See <f>setMarkerColor</f>.
Note: this function is identical to <f>getMarkerColor</f>."),
    Unary("markerdir", String, Number, "Gets the marker direction. See <f>setMarkerDir</f>."),
    Unary("markerpolyline", String, Array, "Gets the markers polyline coordinates."),
    Unary("markerpos", Array, Array, "Returns the marker position in format [x,z,y], where z is preserved."),
    Unary("markerpos", String, Array, "Returns the marker position in format [x,z,y].
Note: this function is identical to <f>getMarkerPos</f>."),
    Unary("markershadow", String, Boolean, "Returns whether marker has shadow enabled. See <f>setMarkerShadow</f>."),
    Unary("markershape", String, String, "Gets the marker shape. See <f>setMarkerShape</f>."),
    Unary("markersize", String, Array, "Gets the marker size. See <f>setMarkerSize</f>.
Note: this function is identical to <f>getMarkerSize</f>."),
    Unary("markertext", String, String, "Gets the marker text. See <f>setMarkerText</f>."),
    Unary("markertype", String, String, "Gets the type of the marker. See <f>setMarkerType</f>.
Note: this function is identical to <f>getMarkerType</f>."),
    Unary("matrixtranspose", Array, Array, "Returns transposed input matrix"),
    Unary("maxload", Object, Number, "Returns maximum load value of a unit or container"),
    Unary("members", TeamMember, Array, "Return a list of members in given team."),
    Unary("menuaction", Array, String, "Returns action stored in item on given path."),
    Unary("menuadd", Array, Number, "Adds new submenu entry into item on given path."),
    Unary("menuchecked", Array, Boolean, "Returns if item on given path is checked or not."),
    Unary("menuclear", Control, Nothing, "Removes all entries from given menu strip."),
    Unary("menuclear", Number, Nothing, "Removes all entries from given menu strip."),
    Unary("menucollapse", Array, Nothing, "Collapses item on given path and all its childs."),
    Unary("menudata", Array, String, "Returns data stored in menu entry on given path"),
    Unary("menudelete", Array, Nothing, "Deletes menu entry on given path."),
    Unary("menuenable", Array, Nothing, "Enables or disables menu entry on given path."),
    Unary("menuenabled", Array, Boolean, "Returns if menu entry on given path is enabled or not."),
    Unary("menuexpand", Array, Nothing, "Expands given menu entry on given path and all its parents so entry is visible."),
    Unary("menuhover", Control, Array, "Returns path to menu entry mouse is currently hovering over."),
    Unary("menuhover", Number, Array, "Returns path to menu entry mouse is currently hovering over."),
    Unary("menupicture", Array, String, "Returns picture set into item on given path"),
    Unary("menusetaction", Array, Nothing, "Sets new action into menu entry on given path."),
    Unary("menusetcheck", Array, Nothing, "Sets item on given path to be checked or not."),
    Unary("menusetdata", Array, Nothing, "Sets new data into item on given path."),
    Unary("menusetpicture", Array, Nothing, "Sets new picture into menu entry on given path."),
    Unary("menusetshortcut", Array, Nothing, "Sets shortcut for menu item on given path."),
    Unary("menusettext", Array, Nothing, "Sets text for menu item on given path."),
    Unary("menuseturl", Array, Nothing, "Sets URL for menu item on given path."),
    Unary("menusetvalue", Array, Nothing, "Sets new value into menu entry on given path."),
    Unary("menushortcut", Array, Number, "Returns shortcut related to menu entry on given path."),
    Unary("menushortcuttext", Array, String, "Returns string containing shortcut text for menu item on given path."),
    Unary("menusize", Array, Number, "Returns how many sub entries is in item on given path."),
    Unary("menusort", Array, Nothing, "Sorts subentries of item on given path by their text."),
    Unary("menutext", Array, String, "Returns current text set in menu entry on given path."),
    Unary("menuurl", Array, String, "Returns current URL set in entry on given path."),
    Unary("menuvalue", Array, Number, "Returns current value set in menu entry on given path."),
    Unary("mineactive", Object, Boolean, "Checks whether the given mine is active"),
    Unary("missiletarget", Object, Object, "Returns current target of given guided missile"),
    Unary("missiletargetpos", Object, Array, "Returns assigned position of given manual missile"),
    Unary("modparams", Array, Array, "Returns list of mod parameters according to given options, values are in same order as the given options. Available options: name, picture, logo, logoOver, logoSmall, tooltip, tooltipowned, action, actionName, overview, hidePicture, hideName, defaultMod, serverOnly, active"),
    Unary("moonphase", Array, Number, "Returns the moon phase on the specified date."),
    Unary("morale", Object, Number, "Checks a current morale level of the unit (-1..+1)."),
    Unary("move3dencamera", Array, Nothing, "Moves 3DEN camera to given position."),
    Unary("moveout", Object, Nothing, "Moves the soldier out of vehicle. (Immediately, without animation)."),
    Unary("movetime", Object, Number, "Returns the current time of the most important RTM animation currently being played on the soldier."),
    Unary("movetocompleted", Object, Boolean, "Check if latest low level moveTo command is finished."),
    Unary("movetofailed", Object, Boolean, "Check if latest low level moveTo command failed."),
    Unary("name", Location, String, "Return name of global vatiable containing given location."),
    Unary("name", Object, String, "Returns the name of the variable assigned to the object in the mission editor. When used on a vehicle, the name of the first crew member is returned (in order: commander, driver, gunner)."),
    Unary("namedproperties", Object, Array, "returns list of named properties on Geometry LOD"),
    Unary("namesound", Object, String, "Returns the nameSound of the variable assigned to the object in the mission editor."),
    Unary("nearestbuilding", Array, Object, "Returns the nearest building to the given position."),
    Unary("nearestbuilding", Object, Object, "Returns the nearest building to the given object."),
    Unary("nearestlocation", Array, Location, "Find the nearest location (to the given position) of given type."),
    Unary("nearestlocations", Array, Array, "Find the nearest locations (from the given position) of certain types, within the specified distance. If &lt;position to sort from&gt; is provided, locations will be ordered by distance from this point."),
    Unary("nearestlocationwithdubbing", Array, Location, "Find the nearest location (to the given position) having it speech non-empty."),
    Unary("nearestmines", Array, Array, "Returns list of nearest mines according to the given params."),
    Unary("nearestobject", Array, Object, "Returns the nearest object of the given type to the given position or object.
Pos may be using format [x,y,z, \"type\"] or [object, \"type\"]."),
    Unary("nearestobjects", Array, Array, "Returns a list of nearest objects of the given types to the given position or object, within the specified distance.
Pos may be using format [x,y,z, [\"type\",...], limit] or [object, [\"type\",...], limit]."),
    Unary("nearestterrainobjects", Array, Array, "Returns a list of nearest objects of the given map types to the given position or object, within the specified distance. The returned list can be sorted or unsorted.
Pos may be using format [x,y,z, [\"map type\",...], limit] or [object, [\"map type\",...], limit]."),
    Unary("needreload", Object, Number, "Return how much vehicle wants to reload its weapons."),
    Unary("needservice", Object, Array, "Returns how much vehicle needs [repair, refuel, rearm]"),
    Unary("netid", Group, String, "Unique ID of a group."),
    Unary("netid", Object, String, "Unique ID of an object."),
    Unary("nextmenuitemindex", Control, Number, "Returns the next available menu item index."),
    Unary("not", Boolean, Boolean, "not a"),
    Unary("numberofenginesrtd", Object, Number, "Returns number of engines helicopter has."),
    Unary("numbertodate", Array, Array, "Convert float number to date."),
    Unary("objectcurators", Object, Array, "Returns array with all curators which can edit given object."),
    Unary("objectfromnetid", String, Object, "Get object with given unique ID."),
    Unary("objectparent", Object, Object, "Returns object's parent."),
    Unary("onbriefinggroup", String, Nothing, "Defines a sound (voice) that is played the first time when the Group section in the briefing is selected."),
    Unary("onbriefingnotes", String, Nothing, "Defines a sound (voice) that is played the first time when the Notes section in the briefing is selected."),
    Unary("onbriefingplan", String, Nothing, "Defines a sound (voice) that is played the first time when the Plan section in the briefing is selected."),
    Unary("onbriefingteamswitch", String, Nothing, "Defines a sound (voice) that is played the first time when the Team switch section in the briefing is selected."),
    Unary("oncommandmodechanged", Code, Nothing, "Defines an action performed when command mode change. Command receives <br/>
_isHighCommand <t>bool</t> "),
    Unary("oncommandmodechanged", String, Nothing, "Defines an action performed when command mode change. Command receives <br/>
_isHighCommand <t>bool</t> "),
    Unary("oneachframe", Code, Nothing, "Defines an action performed on each frame (even when game is paused). Code is performed synchronously, cannot contain any sleep or wait."),
    Unary("oneachframe", String, Nothing, "Defines an action performed on each frame (even when game is paused). Code is performed synchronously, cannot contain any sleep or wait."),
    Unary("ongroupiconclick", Code, Nothing, "Defines an action performed when player clicked on group marker (3D or in a map)"),
    Unary("ongroupiconclick", String, Nothing, "Defines an action performed when player clicked on group marker (3D or in a map)"),
    Unary("ongroupiconoverenter", Code, Nothing, "Defines an action performed when player clicked on group marker (3D or in a map)"),
    Unary("ongroupiconoverenter", String, Nothing, "Defines an action performed when player clicked on group marker (3D or in a map)"),
    Unary("ongroupiconoverleave", Code, Nothing, "Defines an action performed when player clicked on group marker (3D or in a map)"),
    Unary("ongroupiconoverleave", String, Nothing, "Defines an action performed when player clicked on group marker (3D or in a map)"),
    Unary("onhcgroupselectionchanged", Code, Nothing, "Defines an action performed when HC group has been selected. Command receives <br/>
_group <t>group</t> selected group <br/>
_isSelected <t>bool</t> new selection state"),
    Unary("onhcgroupselectionchanged", String, Nothing, "Defines an action performed when HC group has been selected. Command receives <br/>
_group <t>group</t> selected group <br/>
_isSelected <t>bool</t> new selection state"),
    Unary("onmapsingleclick", Code, Nothing, "Defines an action performed when the user clicks on the map. Command receives:<br/>
<br/>
_pos <t>array</t> position<br/>
_units <t>array</t> selected units<br/>
_shift,_alt <t>bool</t> key state<br/>
<br/>If the click is processed, command should return true."),
    Unary("onmapsingleclick", String, Nothing, "Defines an action performed when the user clicks on the map. Command receives:<br/>
<br/>
_pos <t>array</t> position<br/>
_units <t>array</t> selected units<br/>
_shift,_alt <t>bool</t> key state<br/>
<br/>If the click is processed, command should return true."),
    Unary("onplayerconnected", Code, Nothing, "This statement is launched whenever a player is connected to a MP session. Variables _id, _name and _uid are set. See also getPlayerUID, kickUID, banUID."),
    Unary("onplayerconnected", String, Nothing, "This statement is launched whenever a player is connected to a MP session. Variables _id, _name and _uid are set. See also getPlayerUID, kickUID, banUID."),
    Unary("onplayerdisconnected", Code, Nothing, "This statement is launched whenever a player is disconnected from a MP session. Variables _id, _name and _uid are set."),
    Unary("onplayerdisconnected", String, Nothing, "This statement is launched whenever a player is disconnected from a MP session. Variables _id, _name and _uid are set."),
    Unary("onpreloadfinished", Code, Nothing, "Defines an action performed after the preload screen finished."),
    Unary("onpreloadfinished", String, Nothing, "Defines an action performed after the preload screen finished."),
    Unary("onpreloadstarted", Code, Nothing, "Defines an action performed just before the preload screen started."),
    Unary("onpreloadstarted", String, Nothing, "Defines an action performed just before the preload screen started."),
    Unary("onteamswitch", Code, Nothing, "Defines an action performed when the team switch is finished. Command receives:<br/>
<br/>
_from <t>object</t> previous unit<br/>
_to <t>object</t> current units<br/>
<br/>"),
    Unary("onteamswitch", String, Nothing, "Defines an action performed when the team switch is finished. Command receives:<br/>
<br/>
_from <t>object</t> previous unit<br/>
_to <t>object</t> current units<br/>
<br/>"),
    Unary("opendlcpage", Number, Boolean, "Opens a Steam page of the app with given appId. Only works for known appId (game + linked DLCs)"),
    Unary("opengps", Boolean, Boolean, "Opens or closes GPS minimap, returns true on success"),
    Unary("openmap", Array, Boolean, "Show player's map. If forced, cannot be closed."),
    Unary("openmap", Boolean, Boolean, "Show player's map. If forced, cannot be closed."),
    Unary("opensteamapp", Number, Boolean, "Opens a Steam application, returns false if it wasn't possible to run the application."),
    Unary("openyoutubevideo", String, Boolean, "Opens Steam overlay with the given YT video. The YT url is the end of the video page url. Example: for 'https://www.youtube.com/watch?v=DXIoEUq8YE8' set youTubeUrl to 'watch?v=DXIoEUq8YE8'"),
    Unary("owner", Object, Number, "On server machine, return the ID of the client where the object is local. Otherwise return 0."),
    Unary("param", Array, Anything, "Parses _this param inside a script by given index and returns the value"),
    Unary("params", Array, Boolean, "Parses _this param inside a script into array of private variables"),
    Unary("parsenumber", Boolean, Number, "Parse boolean into 1 or 0"),
    Unary("parsenumber", String, Number, "Parse string containing real number."),
    Unary("parsesimplearray", String, Array, "Parses formatted as simple array string into array. Simple array consists of numbers, strings, booleans and arrays of all of the above"),
    Unary("parsetext", String, String, "Creates a structured text by parsing the given XML description."),
    Unary("pickweaponpool", Object, Nothing, "Transfers weapons and magazines from the cargo space of object obj to the weapon pool (used in campaigns to transfer weapons to the next mission)."),
    Unary("pitch", Object, String, "Returns the pitch of the variable assigned to the object in the mission editor."),
    Unary("playableslotsnumber", Side, Number, "Returns the number of available slots in mission per side (both empty and taken). In singleplayer mission, it returns number of playable units per side."),
    Unary("playersnumber", Side, Number, "Returns the number of players playing on the given side."),
    Unary("playmission", Array, Nothing, "The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped."),
    Unary("playmusic", Array, Nothing, "Plays music defined in the description.ext file. The format of nameAndPos is [name,position]. Position is in seconds."),
    Unary("playmusic", String, Nothing, "Plays music defined in the description.ext file."),
    Unary("playscriptedmission", Array, Nothing, "Load the given world, launch an empty mission and execute the given expression. Config (optional) can reference to the config entry replacing description.ext for this mission."),
    Unary("playsound", Array, Object, "Plays a sound defined in the description.ext file. Accomodation set to false disable sound volume changes."),
    Unary("playsound", String, Object, "Plays a sound defined in the description.ext file."),
    Unary("playsound3d", Array, Number, "Plays a sound with given filename. Position of the source object in world coordinates. Distance is how far is sound audible (0 = no max distance). At least 2 parameters must be added. Returns sound id."),
    Unary("playsoundui", Array, Number, "Plays a sound though the UI sound channel with given params, returns created sound id"),
    Unary("pose", Object, String, "Returns the pose of the given unit."),
    Unary("position", Location, Array, "Return (raw) position of given location."),
    Unary("position", Object, Array, "Returns the object position in format <ar>Position</ar>."),
    Unary("positioncameratoworld", Array, Array, "Transform position from camera coordinate space to world coordinate space."),
    Unary("ppeffectcommitted", Number, Boolean, "Check whether given post process effect is commited"),
    Unary("ppeffectcommitted", String, Boolean, "Check whether given post process effect is commited"),
    Unary("ppeffectcreate", Array, Array, "Create post process effect specified by name and priority"),
    Unary("ppeffectcreate", Array, Number, "Create post process effect specified by name and priority"),
    Unary("ppeffectdestroy", Array, Nothing, "Create post process effect specified by name and priority"),
    Unary("ppeffectdestroy", Number, Nothing, "Destroy post process effect given by handle"),
    Unary("ppeffectenabled", Number, Boolean, "Check whether given post process effect is enabled"),
    Unary("ppeffectenabled", String, Boolean, "Check whether given post process effect is enabled"),
    Unary("precision", Object, Number, "Return the precision of the given entity."),
    Unary("preloadcamera", Array, Boolean, "Preload all textures and models around given position"),
    Unary("preloadsound", String, Boolean, "Make sure sound can start playing without any delay once we need it."),
    Unary("preloadtitleobj", Array, Boolean, "Object title  - argument uses format [\"text\",\"type\",speed, showInMap] or [\"name\",\"type\"]. Speed is ignored.
Preload data
The object can be defined in the description.ext file."),
    Unary("preloadtitlersc", Array, Boolean, "Resource title  - argument uses format [\"name\",\"type\",speed, showInMap] or [\"name\",\"type\"]. Speed is ignored.
Preload data
The resource can be defined in the description.ext file."),
    Unary("preprocessfile", String, String, "Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using // or /* and */ and macros defined with #define. On dedicated server/client connected to a dedicated server, if allowedPreprocessFileExtensions parameter is used in the DS config file this only returns contents of a given file if the file extension is listed in it. The list should containt at least the following extensions: hpp, sqs, sqf, fsm, cpp, paa, txt, xml, inc, ext, sqm, ods, fxy, lip, csv, kb, bik, bikn, html, biedi. Note, this list may not be completely up to date"),
    Unary("preprocessfilelinenumbers", String, String, "Returns the preprocessed contents of a given file. The preprocessor is C-like, it supports comments using // or /* and */ and macros defined with #define. On dedicated server/client connected to a dedicated server, if allowedPreprocessFileExtensions parameter is used in the DS config file this only returns contents of a given file if the file extension is listed in it. The list should containt at least the following extensions: hpp, sqs, sqf, fsm, cpp, paa, txt, xml, inc, ext, sqm, ods, fxy, lip, csv, kb, bik, bikn, html, biedi. Note, this list may not be completely up to date."),
    Unary("primaryweapon", Object, String, "Returns the name of the vehicle's primary weapon (an empty string if there is none)."),
    Unary("primaryweaponitems", Object, Array, "Get array with all items assigned to a weapon."),
    Unary("primaryweaponmagazine", Object, Array, "Return the names of the types of currently loaded magazines in given weapon."),
    Unary("priority", Task, Number, "Return the priority of the task."),
    Unary("private", Array, Nothing, "Introduces one or more local variables in the innermost scope."),
    Unary("private", String, Nothing, "Introduces one or more local variables in the innermost scope."),
    Unary("processdiarylink", String, Nothing, "Open the diary screen on the record specified by link."),
    Unary("progressloadingscreen", Number, Nothing, "If loading screen is show, set progress bar to the given value (from interval [0, 1])"),
    Unary("progressposition", Control, Number, "Returns the current position in the progress bar."),
    Unary("publicvariable", String, Nothing, "Broadcasts the variable value to all computers.
Only type <t>Number</t> is supported in versions 1.33 and before.
The following types are supported since 1.34:
<t>Number</t>, <t>Boolean</t>, <t>Object</t> and <t>Group</t>."),
    Unary("publicvariableserver", String, Nothing, "Send the variable value to the server computer.
Only type <t>Number</t> is supported in versions 1.33 and before.
The following types are supported since 1.34:
<t>Number</t>, <t>Boolean</t>, <t>Object</t> and <t>Group</t>."),
    Unary("putweaponpool", Object, Nothing, "Transfers weapons and magazines from the weapon pool (used in campaigns to transfer weapons to the next mission) into the cargo space of object obj."),
    Unary("queryitemspool", String, Number, "Returns the number of items of type name in the weapon pool (used in campaigns to transfer weapons to the next mission)."),
    Unary("querymagazinepool", String, Number, "Returns the number of magazines of type name in the weapon pool (used in campaigns to transfer weapons to the next mission)."),
    Unary("queryweaponpool", String, Number, "Returns the number of weapons of type name in the weapon pool (used in campaigns to transfer weapons to the next mission)."),
    Unary("rad", Number, Number, "Converts x from degrees to radians."),
    Unary("radiochannelcreate", Array, Number, "Create Custom Radio Channel with given callSign color, callSign format and units. sentenceColorType sets color for sentences - true for colorMessageProtocol otherwise colorMessage. Returns index to identify/manipulate the created Custom Channel."),
    Unary("radiochannelinfo", Number, Array, "Returns custom channel information."),
    Unary("random", Array, Number, "The random real value from min to max with average of mid"),
    Unary("random", Number, Number, "The random real value from 0 to x. (0&lt;=random&lt;1)"),
    Unary("rank", Object, String, "Return the rank of the given unit."),
    Unary("rankid", Object, Number, "Return the rank of the given unit for comparison."),
    Unary("rating", Object, Number, "Checks the unit rating. This rating is increased for killing enemies, decreased for killing friendlies and can be changed by a mission designer."),
    Unary("rectangular", Location, Boolean, "Check if given location has rectangular shape."),
    Unary("registeredtasks", TeamMember, Array, "List all registered task types."),
    Unary("reload", Object, Nothing, "Reload all weapons."),
    Unary("reloadenabled", Object, Boolean, "Check whether magazine is reloaded whenever emptied."),
    Unary("remoteexec", Array, Nothing, "Executes the function remotely by spawning it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Unary("remoteexec", Array, String, "Executes the function remotely by spawning it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Unary("remoteexeccall", Array, Nothing, "Executes the function remotely by calling it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Unary("remoteexeccall", Array, String, "Executes the function remotely by calling it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Unary("remove3denconnection", Array, Nothing, "Removes connection of given type between <from> items and <to> item."),
    Unary("remove3deneventhandler", Array, Nothing, "Removes event handler with given ID."),
    Unary("remove3denlayer", Number, Boolean, "Deletes whole layer and moves items from within it into the parent of deleted layer."),
    Unary("removeall3deneventhandlers", String, Nothing, "Removes all registered even handlers"),
    Unary("removeallactions", Object, Nothing, "Removes the action with the given id."),
    Unary("removeallassigneditems", Object, Nothing, "Removes all linked items from gear (map, compass, headgear, goggles etc.)."),
    Unary("removeallbinocularitems", Object, Nothing, "Removes all items from weapon except magazine."),
    Unary("removeallcontainers", Object, Nothing, "Removes all containers from the unit."),
    Unary("removeallcuratoraddons", Object, Nothing, "Restrict access to all addons for given curator."),
    Unary("removeallcuratorcameraareas", Object, Nothing, "Delete all curator camera areas."),
    Unary("removeallcuratoreditingareas", Object, Nothing, "Delete all curator edit areas."),
    Unary("removeallhandgunitems", Object, Nothing, "Removes all items from weapon except magazine."),
    Unary("removeallitems", Object, Nothing, "Removes all items from the uniform, vest and backpack."),
    Unary("removeallitemswithmagazines", Object, Nothing, "Removes all items from the uniform, vest and backpack."),
    Unary("removeallmissioneventhandlers", String, Nothing, "Removes all event handlers of the given type which were added by <f>addMissionEventHandler</f>."),
    Unary("removeallmusiceventhandlers", String, Nothing, "Remove all music track event handlers."),
    Unary("removeallownedmines", Object, Nothing, "Remove ownership over all remotely detonable mines from the unit."),
    Unary("removeallprimaryweaponitems", Object, Nothing, "Removes all items from weapon except magazine."),
    Unary("removeallsecondaryweaponitems", Object, Nothing, "Removes all items from weapon except magazine."),
    Unary("removealluseractioneventhandlers", Array, Nothing, "removeAllMissionEventHandlers [\"Reload\", \"Activate\"];"),
    Unary("removeallweapons", Object, Nothing, "Removes all weapons from the unit."),
    Unary("removebackpack", Object, Nothing, "Remove backpack from unit."),
    Unary("removebackpackglobal", Object, Nothing, "Remove backpack from unit(even non-local)."),
    Unary("removefromremainscollector", Array, Nothing, "Removes flag from given objects to be managed by unitRemove manager"),
    Unary("removegoggles", Object, Nothing, "Remove goggles from unit."),
    Unary("removeheadgear", Object, Nothing, "Remove headgear from unit."),
    Unary("removemissioneventhandler", Array, Nothing, "Removes event handler added by <f>addMissionEventHandler</f>. Id is returned by addMissionEventHandler. When any handler is removed, all handler indices higher that the deleted one should be decremented."),
    Unary("removemusiceventhandler", Array, Nothing, "Remove specified music track event handler."),
    Unary("removeswitchableunit", Object, Nothing, "Remove a unit from the list of units available for team switch."),
    Unary("removeuniform", Object, Nothing, "Remove uniform from unit."),
    Unary("removeuseractioneventhandler", Array, Nothing, "removeUserActionEventHandler [\"Reload\", \"Activate\", _reloadUAEH];"),
    Unary("removevest", Object, Nothing, "Remove vest from unit."),
    Unary("requiredversion", String, Boolean, "Checks whether the appropriate version of the application is available. If it's not, a warning message is shown and false is returned. The version format is \"Major.Minor\", e.g. \"1.30\"."),
    Unary("resetsubgroupdirection", Object, Nothing, "Reset direction of subgroup."),
    Unary("resources", TeamMember, Array, "Return a list of the resources belonging to a team."),
    Unary("restarteditorcamera", Control, Nothing, "Restarts the mission editor camera (if it was deleted by a script, for example)."),
    Unary("reverse", Array, Nothing, "Reverse elements position in the array([0,1,2] -> [2,1,0])."),
    Unary("reverse", String, String, "Reverses string and returns new string."),
    Unary("roadat", Array, Object, "Returns the road the object or position is on."),
    Unary("roadat", Object, Object, "Returns the road the object or position is on."),
    Unary("roadsconnectedto", Array, Array, "Find the road segments connected to the given road segment."),
    Unary("roadsconnectedto", Object, Array, "Find the road segments connected to the given road segment."),
    Unary("roledescription", Object, String, "Returns friendly role description from editor"),
    Unary("ropeattachedobjects", Object, Array, "Returns list of attached objects on ropes"),
    Unary("ropeattachedto", Object, Object, "Returns the object it is attached to by the first rope"),
    Unary("ropeattachenabled", Object, Boolean, "Check if the vehicle can be attached to ropes"),
    Unary("ropecreate", Array, Object, "Create instance of rope object attached on vehicle"),
    Unary("ropecut", Array, Nothing, "Cut rope and detach rope from vehicle"),
    Unary("ropedestroy", Object, Nothing, "Destroy rope and detach rope from vehicle"),
    Unary("ropeendposition", Object, Array, "Return rope end positions"),
    Unary("ropelength", Object, Number, "Return rope length (set by ropeCreate, ropeCut, ropeUnwind)"),
    Unary("ropes", Object, Array, "Return vehicle ropes"),
    Unary("ropesattachedto", Object, Array, "Returns array of objects it is attached to by all ropes"),
    Unary("ropesegments", Object, Array, "Return all rope segments of given rope"),
    Unary("ropeunwind", Array, Nothing, "Unwind rope to target length. Use relative parameter for change rope length +/- from current length"),
    Unary("ropeunwound", Object, Boolean, "False if unwiding in progress, otherwise true"),
    Unary("rotorsforcesrtd", Object, Array, "Returns force produced by rotors."),
    Unary("rotorsrpmrtd", Object, Array, "Returns rotors RPM."),
    Unary("round", Number, Number, "The round value of x."),
    Unary("save3deninventory", Array, Nothing, "Saves current state of entitie's inventory to SQM."),
    Unary("saveoverlay", Control, Nothing, "Save the current overlay."),
    Unary("savevar", String, Nothing, "Saves the variable value into the global campaign space. The variable is then available to all following missions in the campaign."),
    Unary("scopename", String, Nothing, "defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands. Scope name can be defined only once per scope."),
    Unary("score", Object, Number, "MP: returns the unit's score."),
    Unary("scoreside", Side, Number, "MP: returns side score."),
    Unary("screenshot", String, Boolean, "Captures a screenshot and stores it in \\Documents\\Arma 3\\Screenshots\\. If filename is empty, it will be auto-generated. Must have .png extension. Folder size is limited by \"maxScreenShotFolderSizeMB\" velu in profile. "),
    Unary("screentoworld", Array, Array, "Returns the position on landscape (in world coordinates) corresponding to the given point on screen (in UI coordinates)."),
    Unary("scriptdone", Script, Boolean, "Check if script is already finished"),
    Unary("scriptname", String, Nothing, "Assign a friendly name to the VM script this command is executed from."),
    Unary("scudstate", Object, Number, "Returns the current state of the given scud launcher. The following states are recognized: 0 - No activity, 1 - Launch preparation, 2 - Launch prepared, 3 - Ignition and 4 - Launched. Note:  non-integral values are used to indicate a transition between states."),
    Unary("secondaryweapon", Object, String, "Returns the name of a vehicle's secondary weapon (an empty string if there is none)."),
    Unary("secondaryweaponitems", Object, Array, "Get array with all items assigned to a weapon."),
    Unary("secondaryweaponmagazine", Object, Array, "Return the names of the types of currently loaded magazines in given weapon."),
    Unary("selectbestplaces", Array, Array, "Find the places with the max. value of _expression in the given area."),
    Unary("selectededitorobjects", Control, Nothing, "Returns a list of currently selected editor objects."),
    Unary("selectionnames", Object, Array, "returns list of modelSelections"),
    Unary("selectionposition", Array, Array, "Returns animation position of the given named selection in optional render or future scope"),
    Unary("selectmax", Array, Anything, "Returns array element with maximum value"),
    Unary("selectmin", Array, Anything, "Returns array element with minimum value"),
    Unary("selectplayer", Object, Nothing, "Switch player to given unit."),
    Unary("selectrandom", Array, Anything, "Returns random element of given array"),
    Unary("selectrandomweighted", Array, Anything, "Returns random weighted element of array"),
    Unary("sendaumessage", Array, Nothing, "Send the command to the list of clients or some count of clients."),
    Unary("sendudpmessage", Array, Boolean, "Send message to given address using UDP protocol."),
    Unary("servercommand", String, Boolean, "Process the specified server command.
The Server command string is identical to that used in chat line in MP.
This command needs to be executed from UI handler to succeed."),
    Unary("servercommandavailable", String, Boolean, "Checks whether current user is able to process the specified server command. See also <f>serverCommand</f>"),
    Unary("servercommandexecutable", String, Boolean, "Checks whether current user is able to execute the specified server command.
This command needs to be executed from UI handler to succeed and mirrors serverCommand behavior. See also <f>serverCommand</f>"),
    Unary("set3denattributes", Array, Boolean, "Returns TRUE if change was processed."),
    Unary("set3dengrid", Array, Nothing, "Sets grid size for given grid type."),
    Unary("set3deniconsvisible", Array, Nothing, "Enables or disables icons visibility in 3DEN"),
    Unary("set3denlinesvisible", Array, Nothing, "Enables or disables lines visibility in 3DEN"),
    Unary("set3denmissionattributes", Array, Nothing, "Sets given attribute into the engine."),
    Unary("set3denmodelsvisible", Array, Nothing, "Enables or disables lines visibility in 3DEN"),
    Unary("set3denselected", Array, Nothing, "Changes selection in 3den to what is inside entities array."),
    Unary("setacctime", Number, Nothing, "Sets the time acceleration coeficient. It can also be used to slow down time in cutscenes."),
    Unary("setaperture", Number, Nothing, "Sets custom camera apreture (-1 to do it automatically)."),
    Unary("setaperturenew", Array, Nothing, "Sets custom camera apreture (-1 to do it automatically)."),
    Unary("setarmorypoints", Number, Nothing, "Store the given amount of armory points."),
    Unary("setcamshakedefparams", Array, Nothing, "Sets camera shake default params."),
    Unary("setcamshakeparams", Array, Nothing, "Sets camera shake params."),
    Unary("setcompassoscillation", Array, Nothing, "Set Compass Oscillation."),
    Unary("setcurrentchannel", Number, Boolean, "Sets given channel as current channel"),
    Unary("setcustommissiondata", Array, Nothing, "SetCustomMissionData [\"decision1\", \"ending2\"]"),
    Unary("setcustomsoundcontroller", Array, Boolean, "Return true if value was set to the controller, false if not"),
    Unary("setdate", Array, Nothing, "Sets the actual mission date and time."),
    Unary("setdefaultcamera", Array, Nothing, "Sets the position and direction for camera used after camera is set on no object (e.g. leaving a multiplayer game)."),
    Unary("setdetailmapblendpars", Array, Nothing, "Sets the detail texture map blend pars."),
    Unary("setgroupiconsselectable", Boolean, Nothing, "Sets if group icons raises onclick and onover events."),
    Unary("setgroupiconsvisible", Array, Nothing, "Sets if group icons are visible."),
    Unary("sethorizonparallaxcoef", Number, Nothing, "Sets coef used to shift horizon position based on camera height (use 0 to disable shifting)."),
    Unary("sethudmovementlevels", Array, Nothing, "Set min/max movement borders displayed in HUD gauges. Use -1 to skip some value.Speed [m/s],alt [m], dir [deg]. Use [-1,-1,-1] to keep current position"),
    Unary("sethumidity", Number, Nothing, "Sets surface humidity"),
    Unary("setinfopanel", Array, Boolean, "Opens given component or first component of given component type on specified info panel. Returns true if panel was successfully opened.  \"left\" or \"right\" constants can be used as panel names."),
    Unary("setlocalwindparams", Array, Nothing, "Sets parameters for local wind emiters (like helicopters). Default [1.0, 1.0]"),
    Unary("setmouseposition", Array, Nothing, "Move (UI) mouse pointer to specified position of the screen."),
    Unary("setmusiceventhandler", Array, Nothing, "Sets given music track event handler."),
    Unary("setobjectviewdistance", Array, Nothing, "Sets the rendering distance of objects."),
    Unary("setobjectviewdistance", Number, Nothing, "Sets the rendering distance of objects."),
    Unary("setpipviewdistance", Number, Nothing, "Sets the rendering distance of objects inside PiP."),
    Unary("setplayable", Object, Nothing, "Create MP role for the unit."),
    Unary("setplayerrespawntime", Number, Nothing, "Set the time interval to wait on player respawn. It is set to mission default on mission start again."),
    Unary("setrain", Array, Nothing, "Sets RainParticles params from array"),
    Unary("setrain", Config, Nothing, "Sets RainParticles params from config"),
    Unary("setshadowdistance", Number, Nothing, "Sets the shadows rendering distance."),
    Unary("setsimulweatherlayers", Number, Nothing, "Sets simul weather layers"),
    Unary("setstaminascheme", String, Nothing, "Set stamina bar color"),
    Unary("setstatvalue", Array, Boolean, "Sets a value to given stat. "),
    Unary("setsystemofunits", Number, Nothing, "Set system of units. 0 for metric, 1 for mixed, 2 for imperial."),
    Unary("setterraingrid", Number, Nothing, "Sets the desired terrain resolution (in meters). For default landscapes the supported resolutions are: 50, 25, 12.5, 6.25 and 3.125. If you select an unsupported resolution, the nearest supported resolution is used instead."),
    Unary("setterrainheight", Array, Nothing, "Sets terrain height for one or multiple positions"),
    Unary("settimemultiplier", Number, Nothing, "Time multiplier for in game time."),
    Unary("settiparameter", Array, Nothing, "Sets a thermal imaging parameter"),
    Unary("settrafficdensity", Array, Nothing, "Set the density of ambient cars in a rectangle (in cars per kilometer)."),
    Unary("settrafficdistance", Number, Nothing, "Set maximum ambient traffic draw distance (in 2D)."),
    Unary("settrafficgap", Array, Nothing, "Set the average gap between ambient cars in a rectangle (in meters)."),
    Unary("settrafficspeed", Array, Nothing, "Set ambient traffic speed in a rectangle (in kilometers per hour)."),
    Unary("setviewdistance", Number, Nothing, "Sets the rendering distance. Default is 900 meters. The accepted range is from 500 to 5000 meters."),
    Unary("setwind", Array, Nothing, "Set current (forced == false) or permanent (forced == true) wind direction and force."),
    Unary("setwinddir", Array, Nothing, "Set current wind direction and force."),
    Unary("showchat", Boolean, Nothing, "Shows/hides the whole chat window."),
    Unary("showcinemaborder", Boolean, Nothing, "Forces drawing of the cinema borders. This is normally used in cutscenes to indicate the player has no control."),
    Unary("showcommandingmenu", String, Nothing, "Create the commanding menu described by the given config class. When class name is empty, current commanding menu is hidden."),
    Unary("showcompass", Boolean, Nothing, "Enables the compass (the default is true)."),
    Unary("showcuratorcompass", Boolean, Nothing, "Hides or shows compass in curator interface."),
    Unary("showgps", Boolean, Nothing, "Enables the GPS receiver (the default is false)."),
    Unary("showhud", Array, Nothing, "Enable / disable showing of particular HUD elements."),
    Unary("showhud", Boolean, Nothing, "Enable / disable showing of HUD."),
    Unary("showmap", Boolean, Nothing, "Enables the map (the default is true)."),
    Unary("showpad", Boolean, Nothing, "Enables the notepad (the default is true)."),
    Unary("showradio", Boolean, Nothing, "Enables the radio (the default is false)."),
    Unary("showscoretable", Number, Nothing, "Shows/Hides score table, 1 to force visible, 0 to force invisible, -1 default"),
    Unary("showsubtitles", Boolean, Boolean, "Enable / disable showing of subtitles. Return the previous state."),
    Unary("showuavfeed", Boolean, Nothing, "Show UAV view."),
    Unary("showwarrant", Boolean, Nothing, "Obsolete.
Enables the ID card (the default is false)."),
    Unary("showwatch", Boolean, Nothing, "Enables the watch (the default is true)."),
    Unary("showwaypoints", Boolean, Nothing, "Shows/Hides task HUD markers and waypoints that will fade out in time. Dependable on difficulty settings"),
    Unary("side", Group, Side, "Returns the side of the group."),
    Unary("side", Location, Side, "Return target side of given location."),
    Unary("side", Object, Side, "Returns the side of the unit."),
    Unary("simpletasks", Object, Array, "Return all simple tasks assigned to given person."),
    Unary("simulationenabled", Object, Boolean, "Check if the entity has enabled simulation."),
    Unary("simulclouddensity", Array, Number, "Returns density of clouds at given position."),
    Unary("simulcloudocclusion", Array, Number, "Returns clouds occlusion between two given points (0 = no clouds, 1 = full clouds)."),
    Unary("simulinclouds", Array, Boolean, "Returns if given position is in clouds."),
    Unary("sin", Number, Number, "The sine of x, the argument is in degrees."),
    Unary("size", Location, Array, "Return size of given location (width, height)."),
    Unary("sizeof", String, Number, "Return the size of the entity of given type."),
    Unary("skill", Object, Number, "Returns the current level of ability of the person."),
    Unary("skiptime", Number, Nothing, "Skips the specified time. Daytime is adjusted, a weather change is estimated and no changes to any units are done. Duration is in hours."),
    Unary("sleep", Number, Nothing, "Suspend execution of script for given time."),
    Unary("sliderposition", Control, Number, "Returns the current thumb position of the given slider."),
    Unary("sliderposition", Number, Number, "Returns the current thumb position of the slider with id idc of the topmost user dialog."),
    Unary("sliderrange", Control, Array, "Returns the limits (as an array [min, max]) of the given slider."),
    Unary("sliderrange", Number, Array, "Returns the limits (as an array [min, max]) of the slider with id idc of the topmost user dialog."),
    Unary("slidersetposition", Array, Nothing, "Sets the current thumb position of the slider with id idc of the topmost user dialog."),
    Unary("slidersetrange", Array, Nothing, "Sets the limits of the slider with id idc of the topmost user dialog."),
    Unary("slidersetspeed", Array, Nothing, "Sets the speed (a click on the arrow results in a move per line. A click on the scale outside the thumb results in a move per page) of the slider with id idc of the topmost user dialog."),
    Unary("sliderspeed", Control, Array, "Returns the speed (as an array [line, page, step]) of the given slider."),
    Unary("sliderspeed", Number, Array, "Returns the speed (as an array [line, page, step]) of the slider with id idc of the topmost user dialog."),
    Unary("soldiermagazines", Object, Array, "Get array with all magazines from vest."),
    Unary("someammo", Object, Boolean, "Checks whether the unit has some ammo remaining."),
    Unary("soundparams", Number, Array, "Returns the given sound params"),
    Unary("speaker", Object, String, "Returns the speaker of the variable assigned to the object in the mission editor."),
    Unary("speed", Object, Number, "Returns the object speed (in km/h)."),
    Unary("speedmode", Group, String, "Returns the speed mode of the group (\"LIMITED\", \"NORMAL\" or \"FULL\")."),
    Unary("speedmode", Object, String, "Returns the speed mode of the group (\"LIMITED\", \"NORMAL\" or \"FULL\")."),
    Unary("sqrt", Number, Number, "The square root of x."),
    Unary("squadparams", Object, Array, "Returns data about squad of given unit loaded from squad.xml"),
    Unary("stance", Object, String, "Returns the stance of the given unit."),
    Unary("startloadingscreen", Array, Nothing, "Shows loading screen with the given text, using the given resource. When loading screen is shown, simulation and scene drawing is disabled, scripts run at full speed."),
    Unary("stopenginertd", Object, Nothing, "Instant engines stop."),
    Unary("stopped", Object, Boolean, "Checks whether the unit is stopped using the \"stop\" command."),
    Unary("stopsound", Number, Nothing, "Stops the given sound"),
    Unary("str", Anything, String, "Converts any variable to a string."),
    Unary("supportinfo", String, Array, "Creates list of supported operators and type. Each field of array has format: \"x:name\" where x is 't' - type, 'n' - nullar operator, 'u' - unary operator, 'b' - binary operator. 'name' is operator's/type's name (in case operator, type of input operands is included). `mask` parameter can be empty string, or one of field. In this case, function returns empty array, if operator is not included in list. `mask` can contain wildcards, for example: *:name, t:*, t:name* or *:*. Use \"i:<command>\" to get extended info about command."),
    Unary("surfaceiswater", Array, Boolean, "Returns whether water is on given position."),
    Unary("surfacenormal", Array, Array, "Returns surface normal on given position."),
    Unary("surfacetexture", Array, String, "Returns the texture of the surface on given position."),
    Unary("surfacetype", Array, String, "Returns what surface is on given position."),
    Unary("switch", Anything, Switch, "Begins switch form"),
    Unary("switchcamera", Object, Nothing, "Switches camera to the given unit without changing the camera mode"),
    Unary("synchronizedobjects", Object, Array, "Return the list of objects synchronized with the given unit/trigger."),
    Unary("synchronizedtriggers", Array, Array, "Return the list of triggers synchronized with a given waypoint."),
    Unary("synchronizedwaypoints", Array, Array, "Return the list of waypoints synchronized with a given waypoint."),
    Unary("synchronizedwaypoints", Object, Array, "Return the list of waypoints synchronized with a given trigger."),
    Unary("systemchat", String, Nothing, "Types text to the system radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Unary("tan", Number, Number, "The tangens of x, the argument is in degrees."),
    Unary("taskalwaysvisible", Task, Boolean, "Returns true if task is flagged to be always visible or false if not. (always visible in 3D)."),
    Unary("taskchildren", Task, Array, "Return the child tasks of the specified task."),
    Unary("taskcompleted", Task, Boolean, "Return if task is completed. (state Succeeded, Failed or Canceled)"),
    Unary("taskcustomdata", Task, Array, "Returns array of custom data [icon,iconText,descriptionText] as defined via setSimpleTaskCustomData"),
    Unary("taskdescription", Task, Array, "Returns the descripction of the task."),
    Unary("taskdestination", Task, Array, "Returns the position of the task (as specified by destination parameter in config)."),
    Unary("taskhint", Array, Nothing, "Shows info about new,changed or failed task. The text can contain several lines. \\n is used to indicate the end of a line."),
    Unary("taskmarkeroffset", Object, Array, "Returns model space position for the task marker"),
    Unary("taskname", Task, String, "Returns the name of the task."),
    Unary("taskparent", Task, Task, "Return the parent task of the specified task."),
    Unary("taskresult", Task, Array, "Return the result of the given task."),
    Unary("taskstate", Task, String, "Return the state of the given task."),
    Unary("tasktype", Task, String, "Returns the task type name."),
    Unary("teammember", Object, TeamMember, "Return an agent for given person."),
    Unary("teamname", TeamMember, String, "Return a name of given team."),
    Unary("teamtype", TeamMember, String, "Return a type of given team."),
    Unary("terminate", Script, Nothing, "Terminate (abort) the script"),
    Unary("terrainintersect", Array, Boolean, "Checks for intersection of terrain between two positions. Returns true if intersects with terrain"),
    Unary("terrainintersectasl", Array, Boolean, "Checks for intersection of terrain between two positions. Returns true if intersects with terrain"),
    Unary("terrainintersectatasl", Array, Array, "Checks for intersection of terrain between two positions. Returns resulting position if intersects with terrain or [0,0,0] if not"),
    Unary("text", Location, String, "Return text attached to given location."),
    Unary("text", String, String, "Creates a structured text containing the given plain text."),
    Unary("textlog", Anything, Nothing, "Dumps the argument value into the debugging output."),
    Unary("textlogformat", Array, Nothing, "Shortcut to textLog format [format, arg1, arg2, ...] (for better performance in retail version)."),
    Unary("tg", Number, Number, "The tangens of x, the argument is in degrees."),
    Unary("throw", Anything, Nothing, "Throws an exception. The exception is processed by first catch block. See <f>try</f>."),
    Unary("titlecut", Array, Nothing, "Obsolete."),
    Unary("titlefadeout", Number, Nothing, "Terminate the title effect and set duration of the fade out phase to the given time."),
    Unary("titleobj", Array, Nothing, "Object title - the argument uses format [\"text\",\"type\",speed, showInMap] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
The object can be defined in the description.ext file."),
    Unary("titlersc", Array, Nothing, "Resource title - the argument uses format [\"name\",\"type\",speed, showInMap] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
Resource can be defined in the description.ext file."),
    Unary("titletext", Array, Nothing, "Text title - the argument uses format [\"text\",\"type\",speed, showInMap, isStructuredText] or [\"text\",\"type\"]. If speed is not given, it's assumed to be one."),
    Unary("toarray", HashMap, Array, "Converts Hashmap into [[key,key,...],[value,value,...]] array."),
    Unary("toarray", String, Array, "Converts a string into an array of characters."),
    Unary("tofixed", Number, Nothing, "Uses fixed-point notation in all number to string conversions until the end of the current scope"),
    Unary("tolower", String, String, "Converts a string to lower case."),
    Unary("toloweransi", String, String, "Converts an ANSI string to lower case. Faster than toLower but less versatile."),
    Unary("tostring", Array, String, "Converts an array of characters into a string."),
    Unary("tostring", Code, String, "Converts script code into string"),
    Unary("toupper", String, String, "Converts a string to upper case."),
    Unary("toupperansi", String, String, "Converts an ANSI string to upper case. Faster than toUpper but less versatile."),
    Unary("triggeractivated", Object, Boolean, "Returns true if the trigger has been activated."),
    Unary("triggeractivation", Object, Array, "Returns trigger activation in the form [by, type, repeating]"),
    Unary("triggerammo", Object, Nothing, "Triggers ammo as if it did hit"),
    Unary("triggerarea", Object, Array, "Returns trigger area in the form [a, b, angle, rectangle]"),
    Unary("triggerattachedvehicle", Object, Object, "Returns vehicle attached to the trigger (for example using <f>triggerAttachVehicle</f>)"),
    Unary("triggerinterval", Object, Number, "Returns trigger condition check interval in seconds"),
    Unary("triggerstatements", Object, Array, "Returns trigger statements in the form [cond, activ, desactiv]"),
    Unary("triggertext", Object, String, "Returns trigger text."),
    Unary("triggertimeout", Object, Array, "Returns trigger timeout in the form [min, mid, max, interruptable]"),
    Unary("triggertimeoutcurrent", Object, Number, "Returns trigger timeout or -1 if countdown is not in progress."),
    Unary("triggertype", Object, String, "Returns trigger type."),
    Unary("trim", String, String, "Strips whitespace from both ends of string."),
    Unary("try", Code, Exception, "Defines try-catch structure. This is structured exception block. Any thrown exception in try block is caught in catch block. The structured exception block has following form<pre>try   //begin of try-catch block
{
   //block, that can throw exception
}
catch{
   //block, that process an exception. Exception is described in _exception variable
}</pre>;
"),
    Unary("tvadd", Array, Number, "Adds an item with given text to Tree View with given idc under specified path (zero based)."),
    Unary("tvclear", Control, Nothing, "Removes all items from Tree View with given idc."),
    Unary("tvclear", Number, Nothing, "Removes all items from Tree View with given idc."),
    Unary("tvcollapse", Array, Nothing, "Collapses tree item pointed to by path. IDC means id of parent Tree View."),
    Unary("tvcollapseall", Control, Nothing, "Collapses whole tree. IDC means id of Tree to collapse."),
    Unary("tvcollapseall", Number, Nothing, "Collapses whole tree. IDC means id of Tree to collapse."),
    Unary("tvcount", Array, Number, "Returns children count of item on given path. IDC means id of parent Tree View."),
    Unary("tvcursel", Control, Array, "Returns path to currently selected item."),
    Unary("tvcursel", Number, Array, "Returns path to currently selected item. IDC means id of parent Tree View."),
    Unary("tvdata", Array, String, "Returns string data from item on given path. IDC means id of parent Tree View."),
    Unary("tvdelete", Array, Nothing, "Removes an item on given path from Tree View with given idc."),
    Unary("tvexpand", Array, Nothing, "Expands tree item pointed to by path. IDC means id of parent Tree View."),
    Unary("tvexpandall", Control, Nothing, "Expands whole tree. IDC means id of Tree to expand."),
    Unary("tvexpandall", Number, Nothing, "Expands whole tree. IDC means id of Tree to expand."),
    Unary("tvpicture", Array, String, "Returns name of picture from item pointed to by path. IDC means id of parent Tree View."),
    Unary("tvpictureright", Array, String, "Returns name of picture from item pointed to by path. IDC means id of parent Tree View."),
    Unary("tvselection", Control, Array, "Returns array of paths to selected items."),
    Unary("tvsetcursel", Array, Nothing, "Sets cursor to given item on given path. IDC means id of parent Tree View."),
    Unary("tvsetdata", Array, Nothing, "Sets string data to item on given path. IDC means id of parent Tree View."),
    Unary("tvsetpicture", Array, Nothing, "Sets picture to item selected by path. IDC means id of parent Tree View. Name is the picture name. The picture is searched in the mission directory"),
    Unary("tvsetpicturecolor", Array, Nothing, "Sets color of picture to item selected by path. IDC means id of parent Tree View."),
    Unary("tvsetpictureright", Array, Nothing, "Sets picture to item selected by path. IDC means id of parent Tree View. Name is the picture name. The picture is searched in the mission directory"),
    Unary("tvsetpicturerightcolor", Array, Nothing, "Sets color of picture to item selected by path. IDC means id of parent Tree View."),
    Unary("tvsettext", Array, String, "Sets text in the item on given path. IDC means id of parent Tree View."),
    Unary("tvsettooltip", Array, Nothing, "Sets tooltip for item with the given index of the tree view with id idc of the topmost user dialog to the given data."),
    Unary("tvsetvalue", Array, Nothing, "Sets scalar data to item on given path. IDC means id of parent Tree View."),
    Unary("tvsort", Array, Nothing, "Sorts children of given item by data. Param reversed is optional. IDC means id of parent Tree View."),
    Unary("tvsortbyvalue", Array, Nothing, "Sorts children of given item by value. Param reversed is optional. IDC means id of parent Tree View."),
    Unary("tvtext", Array, String, "Returns shown text in the item on given path. IDC means id of parent Tree View."),
    Unary("tvtooltip", Array, String, "Returns the tooltip of the item in the given path of the treeview with id idc of the topmost user dialog."),
    Unary("tvvalue", Array, Number, "Returns scalar data from item on given path. IDC means id of parent Tree View."),
    Unary("type", Location, String, "Return type of given location."),
    Unary("type", Task, String, "Returns the name of the task."),
    Unary("typename", Anything, String, "Returns type-name of expression. Type is returned as string"),
    Unary("typeof", Object, String, "Returns the name of the type of the given object."),
    Unary("uavcontrol", Object, Array, "Get list with unit connected to vehicle and position in that vehicle."),
    Unary("uisleep", Number, Nothing, "Suspend execution of script for given uitime."),
    Unary("unassigncurator", Object, Nothing, "Unassign curator (will destroy both sides of connection)."),
    Unary("unassignteam", Object, Nothing, "Unassigns the vehicle (its commander unit) from his team. This is equal to vehicle assignTeam \"MAIN\"."),
    Unary("unassignvehicle", Object, Nothing, "The person is unassigned from the vehicle. If he is currently inside, the group leader will issue an order to disembark."),
    Unary("underwater", Object, Boolean, "Return whether object is fully underwater."),
    Unary("uniform", Object, String, "Returns name of currently used uniform."),
    Unary("uniformcontainer", Object, Object, "Returns container of currently used uniform."),
    Unary("uniformitems", Object, Array, "Get array with all items from uniform."),
    Unary("uniformmagazines", Object, Array, "Get array with all magazines from vest."),
    Unary("uniqueunititems", Array, HashMap, "Returns accumulated inventory items of unit"),
    Unary("uniqueunititems", Object, HashMap, "Returns accumulated inventory items of unit"),
    Unary("unitaddons", String, Array, "Get list with addons which unitClass belongs to."),
    Unary("unitaimposition", Object, Array, "Returns future unit aiming position."),
    Unary("unitaimpositionvisual", Object, Array, "Returns actual unit aiming position (also used to draw group markers)."),
    Unary("unitbackpack", Object, Object, "Returns unit's backpack."),
    Unary("unitcombatmode", Object, String, "Returns the combat mode of the given unit (\"BLUE\",\"GREEN\",\"YELLOW\" or \"RED\")."),
    Unary("unitisuav", Object, Boolean, "Returns true if the unit type is UAV - coresponding to transport param \"isUAV\")."),
    Unary("unitpos", Object, String, "Return the unit position rules."),
    Unary("unitready", Array, Boolean, "Checks whether the unit is ready. A unit is busy when it's given an order like \"move\", until the command is finished."),
    Unary("unitready", Object, Boolean, "Checks whether the unit is ready. A unit is busy when it's given an order like \"move\", until the command is finished."),
    Unary("unitrecoilcoefficient", Object, Number, "Returns unit's custom recoil coefficient."),
    Unary("units", Group, Array, "Returns an array with all the units in the group."),
    Unary("units", Object, Array, "Returns an array with all the units in the group of the given object. For a destroyed object an empty array is returned."),
    Unary("units", Side, Anything, "Returns all units on a specific side."),
    Unary("unlockachievement", String, Boolean, "Unlock the given achievement."),
    Unary("updateobjecttree", Control, Nothing, "Update the editor object tree."),
    Unary("useaiopermapobstructiontest", Boolean, Nothing, "Enable or disable secondary obstruction test on road paths"),
    Unary("useaisteeringcomponent", Boolean, Nothing, "Enable or disable new ai driving routines."),
    Unary("values", HashMap, Array, "Returns all values stored in the HashMap."),
    Unary("vectordir", Object, Array, "Return object's direction vector in world coordinates as [x, z, y]."),
    Unary("vectordirvisual", Object, Array, "Return object's direction vector in world coordinates as [x, z, y]."),
    Unary("vectorlinearconversion", Array, Array, "Returns lerped vector between given 2 points"),
    Unary("vectormagnitude", Array, Number, "Magnitude of a vector"),
    Unary("vectormagnitudesqr", Array, Number, "Squared magnitude of a vector"),
    Unary("vectornormalized", Array, Array, "Normalized vector (unit vector), if original vector is zero, result is a zero vector as well"),
    Unary("vectorup", Object, Array, "Return object's up vector in world coordinates as [x, z, y]."),
    Unary("vectorupvisual", Object, Array, "Return object's up vector in world coordinates as [x, z, y]."),
    Unary("vehicle", Object, Object, "Returns the vehicle in which the given unit is mounted. If there is none, the unit is returned."),
    Unary("vehiclecargoenabled", Object, Boolean, "Check if the vehicle has enabled transporting other vehicles or not."),
    Unary("vehiclemoveinfo", Object, Array, "Returns array with vehicle move info in format [moveMode, turnMode]"),
    Unary("vehiclereceiveremotetargets", Object, Boolean, "Returns vehicle receives radar targets from center."),
    Unary("vehiclereportownposition", Object, Boolean, "Returns vehicle reports own radar position to center."),
    Unary("vehiclereportremotetargets", Object, Boolean, "Returns true if vehicle reports radar targets to center."),
    Unary("vehiclevarname", Object, String, "Returns the name of the variable which contains a reference to this object."),
    Unary("velocity", Object, Array, "Returns the velocity (speed vector) of the vehicle as an array with format [x, z, y]."),
    Unary("velocitymodelspace", Object, Array, "Returns the velocity (speed vector) of the vehicle as an array with format [x, z, y]. Vector is in model space"),
    Unary("verifysignature", String, Boolean, "Check if file is signed by any key present in game keys folders. Note: On client, it does not check against the keys accepted by server."),
    Unary("vest", Object, String, "Returns name of currently used vest."),
    Unary("vestcontainer", Object, Object, "Returns container of currently used vest."),
    Unary("vestitems", Object, Array, "Get array with all items from vest."),
    Unary("vestmagazines", Object, Array, "Get array with all magazines from vest."),
    Unary("visibleposition", Object, Array, "Returns the object rendered position in format <ar>Position</ar>."),
    Unary("visiblepositionasl", Object, Array, "Returns the object rendered position in format <ar>PositionASL</ar>."),
    Unary("waituntil", Code, Nothing, "Suspend execution of script until condition is satisfied."),
    Unary("waypointattachedobject", Array, Object, "Gets the object attached to the waypoint."),
    Unary("waypointattachedvehicle", Array, Object, "Gets the vehicle attached to the waypoint."),
    Unary("waypointbehaviour", Array, String, "Gets the waypoint behavior."),
    Unary("waypointcombatmode", Array, String, "Gets the waypoint combat mode."),
    Unary("waypointcompletionradius", Array, Number, "Gets the radius around the waypoint where is the waypoint completed."),
    Unary("waypointdescription", Array, String, "Gets the waypoint description."),
    Unary("waypointforcebehaviour", Array, Boolean, "Returns true if the waypoint behavior is forced."),
    Unary("waypointformation", Array, String, "Gets the waypoint formation."),
    Unary("waypointhouseposition", Array, Number, "Gets the house position assigned to the waypoint."),
    Unary("waypointloiteraltitude", Array, Number, "Gets the waypoint loiter altitude. Waypoint uses format <ar>Waypoint</ar>.
"),
    Unary("waypointloiterradius", Array, Number, "Gets the waypoint loiter radius. Waypoint uses format <ar>Waypoint</ar>.
"),
    Unary("waypointloitertype", Array, String, "Gets the waypoint loiter type. Waypoint uses format <ar>Waypoint</ar>.
"),
    Unary("waypointname", Array, String, "Gets the waypoint name."),
    Unary("waypointposition", Array, Array, "Gets the waypoint position. Waypoint uses format <ar>Waypoint</ar>.
Note: this function is identical to <f>getWaypointPosition</f>."),
    Unary("waypoints", Group, Array, "Return the list of waypoints for given group."),
    Unary("waypoints", Object, Array, "Return the list of waypoints for given group."),
    Unary("waypointscript", Array, String, "Gets the waypoint script."),
    Unary("waypointsenableduav", Object, Boolean, "Returns if player can set waypoints for given UAV in AV terminal"),
    Unary("waypointshow", Array, String, "Gets the waypoint show/hide status."),
    Unary("waypointspeed", Array, String, "Gets the waypoint speed."),
    Unary("waypointstatements", Array, Array, "Gets the waypoint statements."),
    Unary("waypointtimeout", Array, Array, "Gets the waypoint timeout values."),
    Unary("waypointtimeoutcurrent", Group, Number, "Gets the current waypoint timeout or -1 if countdown is not in progress."),
    Unary("waypointtype", Array, String, "Gets the waypoint type."),
    Unary("waypointvisible", Array, Number, "Gets waypoint visibility."),
    Unary("weaponcargo", Object, Array, "Get array with weapons from ammo box (or any general weapon holder container). "),
    Unary("weaponinertia", Object, Array, "Returns current rate of how much the weapon view is distorted because of quick aiming"),
    Unary("weaponlowered", Object, Boolean, "True if given soldier's weapon is lowered."),
    Unary("weapons", Object, Array, "Returns an array of names of all the vehicle's weapons."),
    Unary("weaponsitems", Object, Array, "Returns an array with subarrays contains class names and also names of connected items of all the vehicle's weapons like [['arifle_MX_ACO_pointer_F','','acc_pointer_IR','optic_Aco',['30Rnd_65x39_caseless_mag',29],[],]]"),
    Unary("weaponsitemscargo", Object, Array, "Returns an array with subarrays contains class names and also names of connected items of all the vehicle's cargo weapons like [['arifle_MX_ACO_pointer_F','','acc_pointer_IR','optic_Aco',['30Rnd_65x39_caseless_mag',29],[],]]"),
    Unary("weaponstate", Array, Array, "Returns the current weapon state as an array of strings in the follow format [WeaponName, MuzzleName, ModeName, MagazineName, AmmoCount, RoundReloadPhase, MagazineReloadPhase]"),
    Unary("weaponstate", Object, Array, "Returns the current weapon state as an array of strings in the follow format [WeaponName, MuzzleName, ModeName, MagazineName, AmmoCount, RoundReloadPhase, MagazineReloadPhase]"),
    Unary("weightrtd", Object, Array, "Returns weight of helicopter."),
    Unary("wfsidetext", Group, String, "Returns the unlocalized text value of a group's side as: East, West, Resistance, Civilian, or Unknown."),
    Unary("wfsidetext", Object, String, "Returns the unlocalized text value of a object's side as: East, West, Resistance, Civilian, or Unknown."),
    Unary("wfsidetext", Side, String, "Returns the unlocalized text value of a side as: East, West, Resistance, Civilian, or Unknown."),
    Unary("while", Code, While, "The first part of the while construct."),
    Unary("wingsforcesrtd", Object, Array, "Returns force produced by wings."),
    Unary("with", Namespace, With, "The first part of the with construct."),
    Unary("worldtoscreen", Array, Array, "Converts position in world space into screen (UI) space."),
];

pub const BINARY: [Signature; 1453] = [
    Binary(Anything, "breakout", String, Anything, "Exits the given scope with given value"),
    Binary(Anything, "call", Code, Anything, "Executes the function body. Argument pars is passed as _this."),
    Binary(Anything, "clear3denattribute", String, Nothing, "Returns TRUE if change was processed."),
    Binary(Anything, "exec", String, Nothing, "Executes a script. Argument is passed to the script as local variable _this. The script is first searched in the mission folder, then in the campaign scripts subfolder and finally in the global scripts folder."),
    Binary(Anything, "execfsm", String, Number, "Execute the scripted FSM. Argument is passed to the FSM as local variable _this. The FSM file is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder. Return the FSM handler or 0 when failed."),
    Binary(Anything, "execvm", String, Script, "Compile and execute function (sqf). Argument is passed to the script as local variable _this. The function is first searched in the mission folder, then in the campaign scripts folder and finally in the global scripts folder."),
    Binary(Anything, "in", Array, Boolean, "Checks whether x is equal to any element in the array."),
    Binary(Anything, "isequalref", Anything, Boolean, "Two values are compared by reference and if equal, true is returned"),
    Binary(Anything, "isequalto", Anything, Boolean, "Performs strict comparison between var1 and var2 and returns true if equal otherwise false."),
    Binary(Anything, "isequaltype", Anything, Boolean, "Checks if type of provided value matches the expected type"),
    Binary(Anything, "isequaltypeall", Anything, Boolean, "Checks if types of all elements of provided array match specific type"),
    Binary(Anything, "isequaltypeany", Array, Boolean, "Checks if given value matches any of the types in test array"),
    Binary(Anything, "isequaltypearray", Array, Boolean, "Checks if types of types of all elements of provided array match types of another array exactly"),
    Binary(Anything, "isequaltypeparams", Array, Boolean, "Checks if the types of provided params match the expected types"),
    Binary(Anything, "isnotequalref", Anything, Boolean, "Two values are compared by reference and if not equal, true is returned"),
    Binary(Anything, "isnotequalto", Anything, Boolean, "Performs strict comparison between var1 and var2 and returns true if not equal otherwise false."),
    Binary(Anything, "onmapsingleclick", Code, Nothing, "Defines an action performed when the user clicks on the map. Command receives:<br/>
<br/>
_pos <t>array</t> position<br/>
_units <t>array</t> selected units<br/>
_shift,_alt <t>bool</t> key state<br/>
_this <t>any</t> parameters passed to this function<br/>
<br/>If the click is processed, command should return true."),
    Binary(Anything, "onmapsingleclick", String, Nothing, "Defines an action performed when the user clicks on the map. Command receives:<br/>
<br/>
_pos <t>array</t> position<br/>
_units <t>array</t> selected units<br/>
_shift,_alt <t>bool</t> key state<br/>
_this <t>any</t> parameters passed to this function<br/>
<br/>If the click is processed, command should return true."),
    Binary(Anything, "param", Array, Anything, "Parses array of params by given index and returns the value"),
    Binary(Anything, "params", Array, Boolean, "Parses array of params into array of private variables"),
    Binary(Anything, "remoteexec", Array, Nothing, "Executes the function remotely by spawning it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Binary(Anything, "remoteexec", Array, String, "Executes the function remotely by spawning it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Binary(Anything, "remoteexeccall", Array, Nothing, "Executes the function remotely by calling it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Binary(Anything, "remoteexeccall", Array, String, "Executes the function remotely by calling it. Returns nil in case of error. If JIP is requested it returns an unique JIP id string."),
    Binary(Anything, "set3denattribute", Array, Boolean, "Returns TRUE if change was processed."),
    Binary(Anything, "set3denlayer", Number, Boolean, "Sets given editor entity to be in given layer."),
    Binary(Anything, "spawn", Code, Script, "Executes a script. Argument is passed to the script as local variable _this."),
    Binary(Anything, "try", Code, Exception, "Try with additional argument"),
    Binary(Array, "#", Number, Anything, "Selects index element of the array. Index 0 denotes the first element, 1 the second, etc."),
    Binary(Array, "+", Array, Array, "arrayA and arrayB are concatenated."),
    Binary(Array, "-", Array, Array, "All elements in arrayB are removed from arrayA."),
    Binary(Array, "allowgetin", Boolean, Nothing, "Allows the getting in of vehicles of all units in the list."),
    Binary(Array, "append", Array, Nothing, "Appends arrayB to arrayA"),
    Binary(Array, "apply", Code, Array, "Applies code to each element of array and returns resulting array"),
    Binary(Array, "arrayintersect", Array, Array, "Returns array containing common and also elements for both arrays"),
    Binary(Array, "checkvisibility", Array, Number, "Check visibility between two points. "),
    Binary(Array, "collect3denhistory", Code, Nothing, "Collects all history steps created by executing given code."),
    Binary(Array, "commandartilleryfire", Array, Nothing, "Orders a unit to reaload defined magazine commence fire burst on the given position (via the radio)."),
    Binary(Array, "commandchat", String, Nothing, "Types text to the command radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Binary(Array, "commandfire", Object, Nothing, "Orders a unit to commence firing on the given target (via the radio). If the target is objNull, the unit is ordered to commence firing on its current target (set using doTarget or commandTarget)."),
    Binary(Array, "commandfollow", Object, Nothing, "Orders a unit to follow the given unit (via the radio)."),
    Binary(Array, "commandfsm", Array, Nothing, "Orders a unit to process command defined by FSM file (via the radio)."),
    Binary(Array, "commandmove", Array, Nothing, "Orders the unit to move to the given position (format <ar>Position</ar>) (via the radio)."),
    Binary(Array, "commandradio", String, Nothing, "Sends the message to the command radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Array, "commandsuppressivefire", Array, Nothing, "Orders a unit to suppress given position or target (via the radio)."),
    Binary(Array, "commandsuppressivefire", Object, Nothing, "Orders a unit to suppress given position or target (via the radio)."),
    Binary(Array, "commandtarget", Object, Nothing, "Orders the unit to target the given target (via the radio)."),
    Binary(Array, "commandwatch", Array, Nothing, "Orders the unit to watch the given position (format <ar>Position</ar>) (via the radio)."),
    Binary(Array, "commandwatch", Object, Nothing, "Orders the unit to watch the given target (via the radio)."),
    Binary(Array, "createhashmapfromarray", Array, HashMap, "Creates a new HashMap from given keys and values arrays."),
    Binary(Array, "deleteat", Number, Anything, "Remove element at given index(and use them as a return value)."),
    Binary(Array, "deleterange", Array, Nothing, "Removes n consequent elements starting at given index."),
    Binary(Array, "distance", Array, Number, "Computes the distance between two objects or positions."),
    Binary(Array, "distance", Location, Number, "Computes the distance between two locations or positions."),
    Binary(Array, "distance", Object, Number, "Computes the distance between two objects or positions."),
    Binary(Array, "distance2d", Array, Number, "Computes the 2D distance between two objects or positions."),
    Binary(Array, "distance2d", Object, Number, "Computes the 2D distance between two objects or positions."),
    Binary(Array, "distancesqr", Array, Number, "Computes the distance square between two objects or positions."),
    Binary(Array, "distancesqr", Location, Number, "Computes the distance square between two locations or positions."),
    Binary(Array, "distancesqr", Object, Number, "Computes the distance square between two objects or positions."),
    Binary(Array, "doartilleryfire", Array, Nothing, "Orders a unit to reaload defined magazine commence fire burst on the given position (silently)."),
    Binary(Array, "dofire", Object, Nothing, "Orders a unit to commence firing on the given target (silently). If the target is objNull, the unit is ordered to commence firing on its current target (set using doTarget or commandTarget)."),
    Binary(Array, "dofollow", Object, Nothing, "Orders a unit to follow the given unit (silently)."),
    Binary(Array, "dofsm", Array, Nothing, "Orders a unit to process command defined by FSM file (silently)."),
    Binary(Array, "domove", Array, Nothing, "Orders the unit to move to the given position (format <ar>Position</ar>) (silently)."),
    Binary(Array, "dosuppressivefire", Array, Nothing, "Orders a unit to suppress given position or target (silently)."),
    Binary(Array, "dosuppressivefire", Object, Nothing, "Orders a unit to suppress given position or target (silently)."),
    Binary(Array, "dotarget", Object, Nothing, "Orders the unit to target the given target (silently)."),
    Binary(Array, "dowatch", Array, Nothing, "Orders the unit to watch the given position (format <ar>Position</ar>) (silently)."),
    Binary(Array, "dowatch", Object, Nothing, "Orders the unit to watch the given target (silently)."),
    Binary(Array, "enableinfopanelcomponent", Array, Boolean, "Controls availability of component to given object's info panel. \"left\" or \"right\" constants can be used as panel names."),
    Binary(Array, "find", Anything, Number, "Returns the position of the first array element that matches x, returns -1 if not found."),
    Binary(Array, "findany", Array, Number, "Returns the position of the first element in array A that also exists in array B, returns -1 if none found."),
    Binary(Array, "findemptyposition", Array, Array, "Search for the position nearest (up to maxDistance) to the center, with the free area (vehicle of the given type can be placed anywhere) of the given radius. When not found, empty array is returned."),
    Binary(Array, "findemptypositionready", Array, Boolean, "Check if findEmptyPosition can be called without waiting for files."),
    Binary(Array, "findif", Code, Number, "return index of first element for which given condition is true."),
    Binary(Array, "get3denattribute", String, Array, "Reads attribute value from given waypoint."),
    Binary(Array, "getdir", Array, Number, "Returns azimuth from obj1 to obj2"),
    Binary(Array, "getdir", Object, Number, "Returns azimuth from obj1 to obj2"),
    Binary(Array, "getdirvisual", Array, Number, "Returns azimuth from obj1 to obj2 in render state"),
    Binary(Array, "getdirvisual", Object, Number, "Returns azimuth from obj1 to obj2 in render state"),
    Binary(Array, "getenvsoundcontroller", String, Number, "Returns specified controller value"),
    Binary(Array, "getpos", Array, Array, "Returns position at given distance and azimuth from current object or position"),
    Binary(Array, "glanceat", Array, Nothing, "Control what the unit is glancing at (target or position) (format <ar>Position</ar>)"),
    Binary(Array, "glanceat", Object, Nothing, "Control what the unit is glancing at (target or position) (format <ar>Position</ar>)"),
    Binary(Array, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(Array, "in", Location, Boolean, "Check if the position is inside area defined by the location."),
    Binary(Array, "inarea", Array, Boolean, "Checks whether the position is in area defined by array"),
    Binary(Array, "inarea", Location, Boolean, "Checks whether the position is in location area"),
    Binary(Array, "inarea", Object, Boolean, "Checks whether the position is in trigger area"),
    Binary(Array, "inarea", String, Boolean, "Checks whether the position is in marker area"),
    Binary(Array, "inareaarray", Array, Array, "Filters given array of objects / positions by given trigger area"),
    Binary(Array, "inareaarray", Location, Array, "Checks whether the position is in location area"),
    Binary(Array, "inareaarray", Object, Array, "Filters given array of objects / positions by given trigger area"),
    Binary(Array, "inareaarray", String, Array, "Filters given array of objects / positions by given marker area"),
    Binary(Array, "infopanelcomponentenabled", Array, Boolean, "Returns availability state of component to given object's info panel. \"left\" or \"right\" constants can be used as panel names."),
    Binary(Array, "infopanelcomponents", String, Array, "Returns list of panels in given vehicle."),
    Binary(Array, "inpolygon", Array, Boolean, "Calculates wheater position is inside given polygon."),
    Binary(Array, "inrangeofartillery", Array, Boolean, "Returns true if all given units are able to fire at given position with given magazineType."),
    Binary(Array, "insert", Array, Nothing, "Inserts given values into array at given index."),
    Binary(Array, "intersect", Array, Array, "Find named selection in object which is in specified lod intersected by given section of a line."),
    Binary(Array, "isflatempty", Array, Array, "Chek if given area is flat and emty."),
    Binary(Array, "join", Group, Nothing, "Joins all units in the array to the given group.
Note: the total number of group members cannot exceed 12.
Note: This function is unsupported in MP in version 1.33 and before."),
    Binary(Array, "join", Object, Nothing, "Joins all units in the array to the given group.
Note: the total number of group members cannot exceed 12.
Note: This function is unsupported in MP in version 1.33 and before."),
    Binary(Array, "joinsilent", Group, Nothing, "Joins all units in the array to the given group. Avoid any radio communication related to joining."),
    Binary(Array, "joinsilent", Object, Nothing, "Joins all units in the array to the given group. Avoid any radio communication related to joining."),
    Binary(Array, "joinstring", String, String, "Joins array into string with given delimiter"),
    Binary(Array, "lnbsortby", Array, Nothing, "Sorts given listnbox by \"TEXT\", \"DATA\" or \"VALUE\" in the given column with optional sort order and case sensitivity."),
    Binary(Array, "lookat", Array, Nothing, "Control what the unit is looking at (target or position) (format <ar>Position</ar>)"),
    Binary(Array, "lookat", Object, Nothing, "Control what the unit is looking at (target or position) (format <ar>Position</ar>)"),
    Binary(Array, "matrixmultiply", Array, Array, "Resulting matrix of matrix multiplication"),
    Binary(Array, "nearentities", Array, Array, "Find entities in the circle with given radius. If typeName(s) is (are) given, only entities of given type (or its subtype) are listed."),
    Binary(Array, "nearentities", Number, Array, "Find entities in the circle with given radius. If typeName(s) is (are) given, only entities of given type (or its subtype) are listed."),
    Binary(Array, "nearestobject", Number, Object, "Find object nearest to given position with given Visitor id."),
    Binary(Array, "nearestobject", String, Object, "Find object nearest to given position with given type or visitor id."),
    Binary(Array, "nearobjects", Array, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Array, "nearobjects", Number, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Array, "nearobjectsready", Number, Boolean, "Check whether all data are loaded to nearObjects will return in reasonable time."),
    Binary(Array, "nearroads", Number, Array, "Find the road segments within the circle of given radius."),
    Binary(Array, "nearsupplies", Array, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Array, "nearsupplies", Number, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Array, "ordergetin", Boolean, Nothing, "Forces all units in the list to get in their assigned vehicle."),
    Binary(Array, "ppeffectcommit", Number, Nothing, "Set time when old pars are replaced by last set, if 0 set immediately"),
    Binary(Array, "ppeffectenable", Boolean, Nothing, "Enable/disable specified post process effect, is overloaded form multiple effects."),
    Binary(Array, "pushback", Anything, Number, "Adds an element to the end of a given array."),
    Binary(Array, "pushbackunique", Anything, Number, "Add and element into the end of a given array only if same element is not here already."),
    Binary(Array, "resize", Array, Nothing, "Changes the array size and fills new elements with given value."),
    Binary(Array, "resize", Number, Nothing, "Changes the array size. This function can be used to add or remove elements from the array."),
    Binary(Array, "ropeattachto", Object, Nothing, "Attach vehicle to rope with optional offset"),
    Binary(Array, "say", Array, Nothing, "The format of speechName is [sound, maxTitlesDistance] or [sound, maxTitlesDistance, speed]. The unit will play the given sound. If the unit is a person, it will also pefrorm the corresponding lipsync effect. If the camera is not withing the given range, the title is not shown. The sound is defined in the description.ext file.  If target is given, titles will be written to the conversation history."),
    Binary(Array, "say", String, Nothing, "The unit will play the given sound. If the unit is a person, it will also pefrorm the corresponding lipsync effect. The sound is defined in the description.ext file. If target is given, titles will be written to the conversation history."),
    Binary(Array, "say2d", Array, Nothing, "Functionally same as Say, only difference is sound played as 2D (mono) allways."),
    Binary(Array, "say2d", String, Nothing, "Functionally same as Say, only difference is sound played as 2D (mono) allways."),
    Binary(Array, "say3d", Array, Object, "Functionally same as Say, only difference is sound played as 3D allways."),
    Binary(Array, "say3d", String, Object, "Functionally same as Say, only difference is sound played as 3D allways."),
    Binary(Array, "select", Array, Array, "Extracts the elements from array between 'start' and 'start+length'."),
    Binary(Array, "select", Boolean, Anything, "If the index is false, this selects the first element of the array. If it is true, it selects the second one."),
    Binary(Array, "select", Code, Array, "If the code returns true current array element is selected and added to the resulting array"),
    Binary(Array, "select", Number, Anything, "Selects index element of the array. Index 0 denotes the first element, 1 the second, etc."),
    Binary(Array, "selectrandomweighted", Array, Anything, "Returns random weighted element of array"),
    Binary(Array, "set", Array, Nothing, "Format of element is [index, value].
Changes an element of the given array. If the element does not exist, index+1 is called to create it."),
    Binary(Array, "set3denlogictype", String, Nothing, "Swaps type of all listed editorLogics to given logicClassName."),
    Binary(Array, "set3denobjecttype", String, Nothing, "Swaps type of all listed editorObjects to given objectClassName."),
    Binary(Array, "seteffectcondition", String, Nothing, "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result. If the result is a boolean and true, the effect was launched. If the result is an object, the effect was launched if the result is the player or the player vehicle. If the result is an array, the effect was launched if the result contains the player or the player vehicle."),
    Binary(Array, "setmusiceffect", String, Nothing, "Defines the music track played on activation. Track is a subclass name of CfgMusic. \"$NONE$\" (no change) or \"$STOP$\" (stops the current music track)."),
    Binary(Array, "setsoundeffect", Array, Nothing, "Defines the different sound effects. Sound / voice plays a 2D / 3D sound from CfgSounds. SoundEnv plays an enviromental sound from CfgEnvSounds. SoundDet (only for triggers) creates a dynamic sound object attached to a trigger defined in CfgSFX."),
    Binary(Array, "settitleeffect", Array, Nothing, "Defines the title effect. Type can be \"NONE\", \"OBJECT\", \"RES\" or \"TEXT\". For \"TEXT\", the effect defines a subtype: \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" or \"WHITE IN\". Text is shown as text itself. For \"OBJECT\", text defines the shown object, a subclass of CfgTitles. For \"RES\", text defines a resource class, a subclass of RscTitles."),
    Binary(Array, "setwaypointbehaviour", String, Nothing, "Switches the unit behaviour when the waypoint becomes active. Possible values are: \"UNCHANGED\", \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" and \"STEALTH\"."),
    Binary(Array, "setwaypointcombatmode", String, Nothing, "The group combat mode is switched when the waypoint becomes active. Possible values are: \"NO CHANGE\", \"BLUE\", \"GREEN\", \"WHITE\", \"YELLOW\" and \"RED\"."),
    Binary(Array, "setwaypointcompletionradius", Number, Nothing, "Set the radius around the waypoint where is the waypoint completed."),
    Binary(Array, "setwaypointdescription", String, Nothing, "Sets the description shown in the HUD while the waypoint is active."),
    Binary(Array, "setwaypointforcebehaviour", Boolean, Nothing, "Forces the behavior of waypoint, disables AUTOCOMBAT"),
    Binary(Array, "setwaypointformation", String, Nothing, "Switches the group formation when the waypoint becomes active. Possible values are: \"NO CHANGE\", \"COLUMN\", \"STAG COLUMN\", \"WEDGE\", \"ECH LEFT\", \"ECH RIGHT\", \"VEE\" and \"LINE\"."),
    Binary(Array, "setwaypointhouseposition", Number, Nothing, "For waypoints attached to a house, this defines the target house position."),
    Binary(Array, "setwaypointloiteraltitude", Number, Nothing, "Assignes loiter altitude to waypoint"),
    Binary(Array, "setwaypointloiterradius", Number, Nothing, "Assignes loiter radius to waypoint"),
    Binary(Array, "setwaypointloitertype", String, Nothing, "Assignes loiter type to waypoint"),
    Binary(Array, "setwaypointname", String, Nothing, "Changes the waypoint name."),
    Binary(Array, "setwaypointposition", Array, Nothing, "Moves the waypoint to a random position in a circle with the given center and radius."),
    Binary(Array, "setwaypointscript", String, Nothing, "Attaches a script to a scripted waypoint. Command consist of a script name and additional script arguments."),
    Binary(Array, "setwaypointspeed", String, Nothing, "Switches the group speed mode when the waypoint becomes active. Possible values are: \"UNCHANGED\", \"LIMITED\", \"NORMAL\" and \"FULL\"."),
    Binary(Array, "setwaypointstatements", Array, Nothing, "The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed."),
    Binary(Array, "setwaypointtimeout", Array, Nothing, "Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid)."),
    Binary(Array, "setwaypointtype", String, Nothing, "Changes the waypoint type. Type can be: \"MOVE\", \"DESTROY\", \"GETIN\", \"SAD\", \"JOIN\", \"LEADER\", \"GETOUT\", \"CYCLE\", \"LOAD\", \"UNLOAD\", \"TR UNLOAD\", \"HOLD\", \"SENTRY\", \"GUARD\", \"TALK\", \"SCRIPTED\", \"SUPPORT\", \"GETIN NEAREST\", \"AND\" or \"OR\"."),
    Binary(Array, "setwaypointvisible", Boolean, Nothing, "Set waypoint's visibility."),
    Binary(Array, "setwppos", Array, Nothing, "Sets the waypoint position. Waypoint uses format <ar>Waypoint</ar>. Position uses format <ar>Position2D</ar>."),
    Binary(Array, "showwaypoint", String, Nothing, "Sets the condition determining when the waypoint is shown. Possible values are: \"NEVER\", \"EASY\" and \"ALWAYS\"."),
    Binary(Array, "sidechat", String, Nothing, "Types text to the side radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Binary(Array, "sideradio", String, Nothing, "Sends the message to the side radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Array, "sort", Boolean, Nothing, "Tries to sort given array in ascending (true) or descending (false) order."),
    Binary(Array, "synchronizewaypoint", Array, Nothing, "Synchronizes the waypoint with other waypoints. Each waypoint is given as an array [group, index]."),
    Binary(Array, "targetsaggregate", Array, Array, "Aggregate candidates."),
    Binary(Array, "unitsbelowheight", Number, Array, "Return units below passed height."),
    Binary(Array, "vectoradd", Array, Array, "Adds two 3D vectors"),
    Binary(Array, "vectorcos", Array, Number, "Cosine of angle between 2 vectors"),
    Binary(Array, "vectorcrossproduct", Array, Array, "Cross product of two 3D vectors"),
    Binary(Array, "vectordiff", Array, Array, "Subtracts right 3D vector from left"),
    Binary(Array, "vectordistance", Array, Number, "Squared distance between 2 vectors"),
    Binary(Array, "vectordistancesqr", Array, Number, "Squared distance between 2 vectors"),
    Binary(Array, "vectordotproduct", Array, Number, "Dot product of two 3D vectors"),
    Binary(Array, "vectorfromto", Array, Array, "Unit vector equal to direction from left to right vector"),
    Binary(Array, "vectormultiply", Number, Array, "Multiplies vector by a scalar"),
    Binary(Array, "waypointattachobject", Number, Nothing, "Attaches a static object to the given waypoint."),
    Binary(Array, "waypointattachobject", Object, Nothing, "Attaches a static object to the given waypoint."),
    Binary(Array, "waypointattachvehicle", Object, Nothing, "Attaches a vehicle to the given waypoint."),
    Binary(Boolean, "!=", Boolean, Boolean, "a is not equal to b"),
    Binary(Boolean, "&&", Boolean, Boolean, "a and b"),
    Binary(Boolean, "&&", Code, Boolean, "a and b, b evaluated only when a is true"),
    Binary(Boolean, "==", Boolean, Boolean, "a equal to b"),
    Binary(Boolean, "and", Boolean, Boolean, "a and b"),
    Binary(Boolean, "and", Code, Boolean, "a and b, b evaluated only when a is true"),
    Binary(Boolean, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(Boolean, "or", Boolean, Boolean, "a or b"),
    Binary(Boolean, "or", Code, Boolean, "a or b, b evaluated only when a is false"),
    Binary(Boolean, "setcamuseti", Number, Nothing, "Activate camera thermal vision"),
    Binary(Boolean, "||", Boolean, Boolean, "a or b"),
    Binary(Boolean, "||", Code, Boolean, "a or b, b evaluated only when a is false"),
    Binary(Code, "count", Array, Number, "Counts the elements in the array for which the given condition is true.

It is calculated as follows:

1) Set the count to 0.
2) For each element in the array assign an element as _x and evaluate the condition expression. If it's true, increase the count."),
    Binary(Code, "else", Code, Array, "Constructs an array that can be processed by <f>then</f>."),
    Binary(Code, "foreach", Array, Nothing, "Executes the given command for each element in array.
It's executed as follows:

for each element of array an element is assigned as _x and the command is executed."),
    Binary(Code, "foreach", HashMap, Anything, "Executes the given code for each element in HashMap."),
    Binary(Code, "foreachmember", TeamMember, Nothing, "Executes the given command for each member of the team (recursively)."),
    Binary(Code, "foreachmemberagent", TeamMember, Nothing, "Executes the given command for each agent member of the team (recursively)."),
    Binary(Code, "foreachmemberteam", TeamMember, Nothing, "Executes the given command for each team member of the team (recursively)."),
    Binary(Code, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(Config, "!=", Config, Boolean, "Checks whether two config entries are different."),
    Binary(Config, "/", String, Config, "Returns subentry of config entry with given name (alias for >>)."),
    Binary(Config, "==", Config, Boolean, "Checks whether two config entries are equal."),
    Binary(Config, ">>", String, Config, "Returns subentry of config entry with given name."),
    Binary(Config, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(Config, "select", Number, Config, "Returns subentry with given index."),
    Binary(Control, "!=", Control, Boolean, "Checks whether two controls are different."),
    Binary(Control, "==", Control, Boolean, "Checks whether two controls are equal."),
    Binary(Control, "addeditorobject", Array, String, "Add an object to the editor and assign arguments. Create script is called with _new equal to true. Returns the ID of the new EditorObject. Subtype class is optional."),
    Binary(Control, "addmenu", Array, Number, "Adds a new menu button. Priority is optional."),
    Binary(Control, "addmenuitem", Array, Number, "Creates a new menu item. Menu can be \"file\" or \"view\", index is index as returned from addMenu command. priority is optional and determines where in the menu the item will reside (higher priority items first)."),
    Binary(Control, "allow3dmode", Boolean, Nothing, "Allow/dissallow 3D mode."),
    Binary(Control, "allowfileoperations", Boolean, Nothing, "Allows/disallows file operations like loading and saving."),
    Binary(Control, "buttonsetaction", String, Nothing, "Assigns an action to the given button or active text. Action is any expression in this scripting language."),
    Binary(Control, "cbsetchecked", Boolean, Nothing, "Sets the current state of CheckBox."),
    Binary(Control, "controlsgroupctrl", Number, Control, "Return child control with specified idc."),
    Binary(Control, "createmenu", Number, Nothing, "Creates a previously added menu."),
    Binary(Control, "ctdata", Number, String, "Returns metadata (string) associated with a particular row."),
    Binary(Control, "ctfindheaderrows", Number, Array, "Returns array of indices of rows that are directly below this header and above the next one."),
    Binary(Control, "ctfindrowheader", Number, Number, "Returns index of the closest header above this row. If there's no header, negative index is returned."),
    Binary(Control, "ctheadercontrols", Number, Array, "Returns array of controls in the header with the given index."),
    Binary(Control, "ctremoveheaders", Array, Nothing, "Removes all headers with given indices. Indices of remaining headers will be recomputed."),
    Binary(Control, "ctremoverows", Array, Nothing, "Removes all rows with given indices. Indices of remaining rows will be recomputed."),
    Binary(Control, "ctrladdeventhandler", Array, Number, "Add an event handler to the given control. Returns id of the handler or -1 when failed."),
    Binary(Control, "ctrlanimatemodel", Array, Nothing, "Sets model animation same as cmd\"AnimateSource\"."),
    Binary(Control, "ctrlanimationphasemodel", String, Number, "Get model animation same as cmd\"animationSourcePhase\"."),
    Binary(Control, "ctrlchecked", Number, Boolean, "Returns the current state of textual checkbox with given index."),
    Binary(Control, "ctrlcommit", Number, Nothing, "Commit control animation."),
    Binary(Control, "ctrlenable", Boolean, Nothing, "Enable / disable given control."),
    Binary(Control, "ctrlmapanimadd", Array, Nothing, "Adds the next frame to the map animation. The format of frame is [time, zoom, position], the format of position is <ar>Position2D</ar>."),
    Binary(Control, "ctrlmapcursor", Array, Nothing, "Changes default cursor texture (\"Track\", \"Move\",\"Array\", \"Scroll\") to custom one. To restore default texture, write empty string. If new texture does not exist, default cursor texture is used."),
    Binary(Control, "ctrlmapscreentoworld", Array, Array, "Convert position in the map from screen coordinates to world coordinates."),
    Binary(Control, "ctrlmapsetposition", Array, Nothing, "Instantly sets position and size of the given map control."),
    Binary(Control, "ctrlmapworldtoscreen", Array, Array, "Convert position in the map from world coordinates to screen coordinates."),
    Binary(Control, "ctrlremovealleventhandlers", String, Nothing, "Remove all even handlers from the given control."),
    Binary(Control, "ctrlremoveeventhandler", Array, Nothing, "Remove a given event handler from the given control."),
    Binary(Control, "ctrlsetactivecolor", Array, Nothing, "Sets text color of given control when control is selected. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsetangle", Array, Nothing, "Sets the rotation of the control., when \"now\" is false control is animated after calling ctrlCommit"),
    Binary(Control, "ctrlsetautoscrolldelay", Number, Nothing, "Sets number of second before auto-scroll starts."),
    Binary(Control, "ctrlsetautoscrollrewind", Boolean, Nothing, "Defines if scroll should rewind when auto-scroll reach end."),
    Binary(Control, "ctrlsetautoscrollspeed", Number, Nothing, "Sets number of second required to scroll to next line. If speed smaller than 0, auto-scroll is disabled."),
    Binary(Control, "ctrlsetbackgroundcolor", Array, Nothing, "Sets background color of given control. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsetchecked", Array, Nothing, "Sets checked state of checkbox with given index."),
    Binary(Control, "ctrlsetchecked", Boolean, Nothing, "Sets checked state of checkbox."),
    Binary(Control, "ctrlsetdisabledcolor", Array, Nothing, "Sets text color of given control when control is disabled. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlseteventhandler", Array, Nothing, "Sets given event handler of given control"),
    Binary(Control, "ctrlsetfade", Number, Nothing, "Sets wanted transparency for control animation."),
    Binary(Control, "ctrlsetfont", String, Nothing, "Sets the main font of given control."),
    Binary(Control, "ctrlsetfonth1", String, Nothing, "Sets H1 font of given HTML control."),
    Binary(Control, "ctrlsetfonth1b", String, Nothing, "Sets H1 bold font of given HTML control."),
    Binary(Control, "ctrlsetfonth2", String, Nothing, "Sets H2 font of given HTML control."),
    Binary(Control, "ctrlsetfonth2b", String, Nothing, "Sets H2 bold font of given HTML control."),
    Binary(Control, "ctrlsetfonth3", String, Nothing, "Sets H3 font of given HTML control."),
    Binary(Control, "ctrlsetfonth3b", String, Nothing, "Sets H3 bold font of given HTML control."),
    Binary(Control, "ctrlsetfonth4", String, Nothing, "Sets H4 font of given HTML control."),
    Binary(Control, "ctrlsetfonth4b", String, Nothing, "Sets H4 bold font of given HTML control."),
    Binary(Control, "ctrlsetfonth5", String, Nothing, "Sets H5 font of given HTML control."),
    Binary(Control, "ctrlsetfonth5b", String, Nothing, "Sets H5 bold font of given HTML control."),
    Binary(Control, "ctrlsetfonth6", String, Nothing, "Sets H5 font of given HTML control."),
    Binary(Control, "ctrlsetfonth6b", String, Nothing, "Sets H6 bold font of given HTML control."),
    Binary(Control, "ctrlsetfontheight", Number, Nothing, "Sets the main font size of given control."),
    Binary(Control, "ctrlsetfontheighth1", Number, Nothing, "Sets H1 font size of given HTML control."),
    Binary(Control, "ctrlsetfontheighth2", Number, Nothing, "Sets H2 font size of given HTML control."),
    Binary(Control, "ctrlsetfontheighth3", Number, Nothing, "Sets H3 font size of given HTML control."),
    Binary(Control, "ctrlsetfontheighth4", Number, Nothing, "Sets H4 font size of given HTML control."),
    Binary(Control, "ctrlsetfontheighth5", Number, Nothing, "Sets H5 font size of given HTML control."),
    Binary(Control, "ctrlsetfontheighth6", Number, Nothing, "Sets H6 font size of given HTML control."),
    Binary(Control, "ctrlsetfontheightsecondary", Number, Nothing, "Sets the font size of the secondary text of given control."),
    Binary(Control, "ctrlsetfontp", Number, Nothing, "Sets P font size of given HTML control."),
    Binary(Control, "ctrlsetfontp", String, Nothing, "Sets P font of given HTML control."),
    Binary(Control, "ctrlsetfontpb", String, Nothing, "Sets P bold font of given HTML control."),
    Binary(Control, "ctrlsetfontsecondary", String, Nothing, "Sets the font of the secondary text in given control."),
    Binary(Control, "ctrlsetforegroundcolor", Array, Nothing, "Sets background color of given control. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsetmodel", String, Nothing, "Sets model to draw as control object."),
    Binary(Control, "ctrlsetmodeldirandup", Array, Nothing, "Sets orientation to control object."),
    Binary(Control, "ctrlsetmodelscale", Number, Nothing, "Sets given scale into control."),
    Binary(Control, "ctrlsetmouseposition", Array, Nothing, "Sets mouse position relative to the given control."),
    Binary(Control, "ctrlsetpixelprecision", Number, Nothing, "set pixel precision mode AUTO(default, when control is animated pixel precision is off otherwise on)/ON/OFF"),
    Binary(Control, "ctrlsetpixelprecision", String, Nothing, "set pixel precision mode AUTO(default, when control is animated pixel precision is off otherwise on)/ON/OFF"),
    Binary(Control, "ctrlsetposition", Array, Nothing, "Sets wanted position and size for control animation. Width and height are optional."),
    Binary(Control, "ctrlsetpositionh", Number, Nothing, "Sets wanted value for control animation."),
    Binary(Control, "ctrlsetpositionw", Number, Nothing, "Sets wanted value for control animation."),
    Binary(Control, "ctrlsetpositionx", Number, Nothing, "Sets wanted value for control animation."),
    Binary(Control, "ctrlsetpositiony", Number, Nothing, "Sets wanted value for control animation."),
    Binary(Control, "ctrlsetscale", Number, Nothing, "Sets wanted scale for control animation. Top left corner remains same."),
    Binary(Control, "ctrlsetscrollvalues", Array, Nothing, "Sets control's scroll values in 0...1 range. Use -1 to ignore a particular value"),
    Binary(Control, "ctrlsetshadow", Number, Nothing, "Sets 'shadow' property of the control"),
    Binary(Control, "ctrlsetstructuredtext", String, Nothing, "Set the Text displayed in the control."),
    Binary(Control, "ctrlsettext", String, Nothing, "Sets the text that will be shown in given control."),
    Binary(Control, "ctrlsettextcolor", Array, Nothing, "Sets text color of given control. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsettextcolorsecondary", Array, Nothing, "Sets text color of the secondary text of given control. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsettextsecondary", String, Nothing, "Sets the secondary text that will be shown in given control."),
    Binary(Control, "ctrlsettextselection", Array, Nothing, "Selects 'length' characters of control text from the 'start' position"),
    Binary(Control, "ctrlsettooltip", String, Nothing, "Sets tooltip text of given control."),
    Binary(Control, "ctrlsettooltipcolorbox", Array, Nothing, "Sets tooltip border color of given control. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsettooltipcolorshade", Array, Nothing, "Sets tooltip background color of given control. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsettooltipcolortext", Array, Nothing, "Sets tooltip text color of given control. Color is in format <ar>Color</ar>."),
    Binary(Control, "ctrlsettooltipmaxwidth", Number, Number, "Sets tooltip maximum width of given control, returns previously set width."),
    Binary(Control, "ctrlseturl", String, Nothing, "Sets url property of the given control."),
    Binary(Control, "ctrlseturloverlaymode", Number, Nothing, "Sets how url opening is handled: 0 - default browser, 1 - prefer Steam overlay if enabled, 2 - force Steam overlay and display error message if not enabled"),
    Binary(Control, "ctrlshow", Boolean, Nothing, "Show / hide given control."),
    Binary(Control, "ctrowcontrols", Number, Array, "Returns array of controls on the row with the given index."),
    Binary(Control, "ctsetcursel", Number, Nothing, "Selects the row with given index. Invalid index cancels selection."),
    Binary(Control, "ctsetdata", Array, Nothing, "Associates metadata (string) with the row determined by the index."),
    Binary(Control, "ctsetheadertemplate", Config, Nothing, "Takes config path to the new header template. Clears the whole table and sets the new header template."),
    Binary(Control, "ctsetrowtemplate", Config, Nothing, "Takes config path to the new row template. Clears the whole table and sets the new row template."),
    Binary(Control, "ctsetvalue", Array, Nothing, "Associates metadata (number) with the row determined by the index. "),
    Binary(Control, "ctvalue", Number, Number, "Returns metadata (number) associated with a particular row."),
    Binary(Control, "deleteeditorobject", String, Anything, "Delete the editor object. Requires all editor object links to be removed prior."),
    Binary(Control, "drawarrow", Array, Nothing, "Draw arrow in map."),
    Binary(Control, "drawellipse", Array, Nothing, "Draw ellipse in map."),
    Binary(Control, "drawicon", Array, Nothing, "Draw icon in map."),
    Binary(Control, "drawline", Array, Nothing, "Draw line in map."),
    Binary(Control, "drawlink", Array, Nothing, "The editor will draw a line between the two specified editor objects. Line type can be LINE or ARROW."),
    Binary(Control, "drawlocation", Location, Nothing, "Draw location in the map."),
    Binary(Control, "drawpolygon", Array, Nothing, "Draw a polygon on the map."),
    Binary(Control, "drawrectangle", Array, Nothing, "Draw rectangle in map."),
    Binary(Control, "drawtriangle", Array, Nothing, "Draw triangle in map."),
    Binary(Control, "editobject", String, Anything, "Show the edit object dialog for the given object."),
    Binary(Control, "editorseteventhandler", Array, Nothing, "Sets given event handler of given editor."),
    Binary(Control, "evalobjectargument", Array, Anything, "Return object argument in mission editor."),
    Binary(Control, "execeditorscript", Array, Anything, "Execute an editor script for the specified object."),
    Binary(Control, "findeditorobject", Anything, String, "Return object that matches the provided reference."),
    Binary(Control, "findeditorobject", Array, String, "Return object of given type with given arguments. Use [type, game value] to search by object reference of a specific editor object type."),
    Binary(Control, "geteditorobjectscope", String, String, "Returns the editor object scope of the specified editor object."),
    Binary(Control, "geteventhandlerinfo", Array, Array, "Returns event handler info in the following format: [exists, islast, total]"),
    Binary(Control, "getobjectargument", Array, String, "Return name of object argument in mission editor."),
    Binary(Control, "getobjectchildren", String, Array, "Return a list of all the children of the specified object."),
    Binary(Control, "getobjectproxy", String, Object, "Return the proxy object associated with the given editor object."),
    Binary(Control, "getvariable", Array, Anything, "Returns the value of given variable set on given UI control"),
    Binary(Control, "getvariable", String, Anything, "Returns the value of given variable set on given UI control"),
    Binary(Control, "htmlload", String, Nothing, "Load HTML from file to given control. On dedicated server/client connected to a dedicated server, if allowedHTMLloadExtensions parameter is specified in the DS config file this can only succeed if a given file extension is listed in it. The list should containt at least the following extensions: txt, htm, html, xml. Note, this list may not be completely up to date"),
    Binary(Control, "inserteditorobject", Array, String, "Insert an object to the editor and assign arguments. Create script is not called. Returns the ID of the new EditorObject. Subtype class is optional."),
    Binary(Control, "lbadd", String, Number, "Adds an item with the given text to the given listbox or combobox. It returns the index of the newly added item."),
    Binary(Control, "lbcolor", Number, Array, "Returns the text color of the item with the given index of the given listbox or combobox."),
    Binary(Control, "lbcolorright", Number, Array, "Returns the text color of the secondary text (right aligned) of the item with the given index of the given listbox or combobox."),
    Binary(Control, "lbdata", Number, String, "Returns the additional text (invisible) in an item with the given index of the given listbox or combobox."),
    Binary(Control, "lbdelete", Number, Nothing, "Removes the item with the given index from the given listbox or combobox."),
    Binary(Control, "lbisselected", Number, Boolean, "Check whether given row of the given listbox is selected."),
    Binary(Control, "lbpicture", Number, String, "Returns the picture name of the item with the given index of the given listbox or combobox."),
    Binary(Control, "lbpictureright", Number, String, "Returns the second (right aligned) picture name of the item with the given index of the given listbox or combobox."),
    Binary(Control, "lbsetcolor", Array, Nothing, "Sets the text color of the item with the given index of the given listbox or combobox. Color is in format <ar>Color</ar>."),
    Binary(Control, "lbsetcolorright", Array, Nothing, "Sets the text color of the secondary text (right aligned) of the item with the given index of the given listbox or combobox. Color is in format <ar>Color</ar>."),
    Binary(Control, "lbsetcursel", Number, Nothing, "Selects the item with the given index of the given listbox or combobox."),
    Binary(Control, "lbsetdata", Array, Nothing, "Sets the additional text (invisible) in the item with the given index of the given listbox or combobox to the given data."),
    Binary(Control, "lbsetpicture", Array, Nothing, "Sets the picture in the item with the given index of the given listbox or combobox. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Binary(Control, "lbsetpicturecolor", Array, Nothing, "Sets the color of the picture of the item with the given index of the given listbox or combobox. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Binary(Control, "lbsetpicturecolordisabled", Array, Nothing, "Sets the color of the picture of the item with the given index of the given listbox or combobox when control is disabled. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Binary(Control, "lbsetpicturecolorselected", Array, Nothing, "Sets the color of the picture of the item with the given index of the given listbox or combobox when item is selected. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Binary(Control, "lbsetpictureright", Array, Nothing, "Sets the second (right aligned) picture in the item with the given index of the given listbox or combobox. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Binary(Control, "lbsetpicturerightcolor", Array, Nothing, "Sets the color of the second (right aligned) picture of the of the item with the given index of the given listbox or combobox. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Binary(Control, "lbsetpicturerightcolordisabled", Array, Nothing, "Sets the color of the second (right aligned) picture of the item with the given index of the given listbox or combobox when control is disabled. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Binary(Control, "lbsetpicturerightcolorselected", Array, Nothing, "Sets the color of the second (right aligned) picture of the item with the given index of the given listbox or combobox when item is selected. Color is in format <ar>Color</ar>. (color which consists from only zeros means disable this override)"),
    Binary(Control, "lbsetselectcolor", Array, Nothing, "Sets the text select color of the item with the given index of the given listbox or combobox. Color is in format <ar>Color</ar>."),
    Binary(Control, "lbsetselectcolorright", Array, Nothing, "Sets the text select color of the secondary text (right aligned) of the item with the given index of the given listbox or combobox. Color is in format <ar>Color</ar>."),
    Binary(Control, "lbsetselected", Array, Nothing, "Set the selection state of the given row of the given listbox. Listbox must support multiple selection. Use -1 to select/deselect all"),
    Binary(Control, "lbsettext", Array, Nothing, "Sets the text in the item with the given index of the given listbox or combobox to the given data."),
    Binary(Control, "lbsettextright", Array, Nothing, "Sets the secondary text (right aligned) in the item with the given index of the given listbox or combobox to the given data."),
    Binary(Control, "lbsettooltip", Array, Nothing, "Sets tooltip for item with the given index of the given listbox or combobox to the given data."),
    Binary(Control, "lbsetvalue", Array, Nothing, "Sets the additional integer value in the item with the given index of the given listbox or combobox to the given value."),
    Binary(Control, "lbsortby", Array, Nothing, "Sorts given listbox by \"TEXT\", \"DATA\" or \"VALUE\" with optional sort order and case sensitivity."),
    Binary(Control, "lbtext", Number, String, "Returns the shown text in the item with the given index of the given listbox or combobox."),
    Binary(Control, "lbtextright", Number, String, "Returns the second text (right aligned) in the item with the given index of the given listbox or combobox."),
    Binary(Control, "lbtooltip", Number, String, "Returns tooltip for item with the given index of the given listbox or combobox"),
    Binary(Control, "lbvalue", Number, Number, "Returns the additional integer value in the item with the given index of the given listbox or combobox."),
    Binary(Control, "listobjects", String, Array, "Return the list of all objects of given type."),
    Binary(Control, "lnbaddcolumn", Number, Number, "Adds an item with the given text to the given listbox or combobox. It returns the index of the newly added item."),
    Binary(Control, "lnbaddrow", Array, Number, "Adds an row to the end od 2d listbox . It returns the index of the newly added row."),
    Binary(Control, "lnbcolor", Array, Array, "Returns the text color of the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbcolorright", Array, Array, "Returns the text color of the secondary text (right aligned) of the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbdata", Array, String, "Returns the additional text (invisible) in an item with the given position of the given 2D listbox."),
    Binary(Control, "lnbdeletecolumn", Number, Nothing, "Removes the item with the given index from the given listbox or combobox."),
    Binary(Control, "lnbdeleterow", Number, Nothing, "Removes row with the given index from the given  listbox or combobox."),
    Binary(Control, "lnbpicture", Array, String, "Returns the picture name of the item with the given position of the given listbox or combobox."),
    Binary(Control, "lnbpictureright", Array, String, "Returns the name of the second (right aligned) picture of the item with the given position of the given listbox or combobox."),
    Binary(Control, "lnbsetcolor", Array, Nothing, "Sets the text color of the item with the given position of the given 2D listbox . Color is in format <ar>Color</ar>."),
    Binary(Control, "lnbsetcolorright", Array, Nothing, "Sets the text color of the secondary text (right aligned) of the item with the given position of the given 2D listbox . Color is in format <ar>Color</ar>."),
    Binary(Control, "lnbsetcolumnspos", Array, Nothing, "Sets position of 2d listbox columns."),
    Binary(Control, "lnbsetcurselrow", Number, Nothing, "Selects the item with the given index of the given listbox or combobox."),
    Binary(Control, "lnbsetdata", Array, Nothing, "Sets the additional text (invisible) in the item with the given position of the given 2D listbox to the given data."),
    Binary(Control, "lnbsetpicture", Array, Nothing, "Sets the picture in the item with the given position of the given 2D listbox. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Binary(Control, "lnbsetpicturecolor", Array, Nothing, "Sets the picture color in the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbsetpicturecolorright", Array, Nothing, "Sets the second (right aligned) picture color in the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbsetpicturecolorselected", Array, Nothing, "Sets the picture color in the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbsetpicturecolorselectedright", Array, Nothing, "Sets the second (right aligned) picture color in the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbsetpictureright", Array, Nothing, "Sets the second (right aligned) picture in the item with the given position of the given 2D listbox. Name is the picture name. The picture is searched in the mission directory, the dtaExt subdirectory of the campaign directory and the dtaExt directory and the data bank (or directory)."),
    Binary(Control, "lnbsettext", Array, Nothing, "Sets the text in the item with the given index of the given 2D listbox to the given text."),
    Binary(Control, "lnbsettextright", Array, Nothing, "Sets the secondary (right aligned) text in the item with the given index of the given 2D listbox to the given text."),
    Binary(Control, "lnbsettooltip", Array, Nothing, "Sets the tooltip on the item with the given position of the given 2D listbox"),
    Binary(Control, "lnbsetvalue", Array, Nothing, "Sets the additional integer value in the item with the given position of the given 2D listbox  to the given value."),
    Binary(Control, "lnbsort", Array, Nothing, "Sorts given listnbox by texts in given column."),
    Binary(Control, "lnbsortbyvalue", Array, Nothing, "Sorts given listnbox by values in given column."),
    Binary(Control, "lnbtext", Array, String, "Returns the shown text in the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbtextright", Array, String, "Returns the shown secondary (right aligned) text in the item with the given position of the given 2D listbox."),
    Binary(Control, "lnbvalue", Array, Number, "Returns the additional integer value in the item with the given position of the given 2D listbox."),
    Binary(Control, "loadoverlay", Config, Nothing, "Creates the load overlay dialog for the specified type of overlay."),
    Binary(Control, "lookatpos", Array, Nothing, "Center the map on, and point the camera at, the position."),
    Binary(Control, "mapcenteroncamera", Boolean, Array, "Enable / disable continuous centering the map on the camera position"),
    Binary(Control, "menuaction", Array, String, "Returns action stored in item on given path."),
    Binary(Control, "menuadd", Array, Number, "Adds new submenu entry into item on given path."),
    Binary(Control, "menuchecked", Array, Boolean, "Returns if item on given path is checked or not."),
    Binary(Control, "menucollapse", Array, Nothing, "Collapses item on given path and all its childs."),
    Binary(Control, "menudata", Array, String, "Returns data stored in menu entry on given path"),
    Binary(Control, "menudelete", Array, Nothing, "Deletes menu entry on given path."),
    Binary(Control, "menuenable", Array, Nothing, "Enables or disables menu entry on given path."),
    Binary(Control, "menuenabled", Array, Boolean, "Returns if menu entry on given path is enabled or not."),
    Binary(Control, "menuexpand", Array, Nothing, "Expands given menu entry on given path and all its parents so entry is visible."),
    Binary(Control, "menupicture", Array, String, "Returns picture set into item on given path"),
    Binary(Control, "menusetaction", Array, Nothing, "Sets new action into menu entry on given path."),
    Binary(Control, "menusetcheck", Array, Nothing, "Sets item on given path to be checked or not."),
    Binary(Control, "menusetdata", Array, Nothing, "Sets new data into item on given path."),
    Binary(Control, "menusetpicture", Array, Nothing, "Sets new picture into menu entry on given path."),
    Binary(Control, "menusetshortcut", Array, Nothing, "Sets shortcut for the item on given path."),
    Binary(Control, "menusettext", Array, Nothing, "Sets text for the item on given path."),
    Binary(Control, "menuseturl", Array, Nothing, "Sets URL for the item on given path."),
    Binary(Control, "menusetvalue", Array, Nothing, "Sets new value into menu entry on given path."),
    Binary(Control, "menushortcut", Array, Number, "Returns shortcut related to menu entry on given path."),
    Binary(Control, "menushortcuttext", Array, String, "Returns text describing shortcut set to item on given path."),
    Binary(Control, "menusize", Array, Number, "Returns how many sub entries is in item on given path."),
    Binary(Control, "menusort", Array, Nothing, "Sorts subentries of item on given path by their text."),
    Binary(Control, "menutext", Array, String, "Returns current text set in menu entry on given path."),
    Binary(Control, "menuurl", Array, String, "Returns current URL set in entry on given path."),
    Binary(Control, "menuvalue", Array, Number, "Returns current value set in menu entry on given path."),
    Binary(Control, "moveobjecttoend", String, Nothing, "Shifts an editor object to the end of the objects array. This means that the object will be drawn last (after all other objects)."),
    Binary(Control, "newoverlay", Config, Nothing, "Creates the new overlay dialog for the specified type of overlay."),
    Binary(Control, "nmenuitems", Number, Number, "Returns the total number of user-added menu items belonging to the given menu."),
    Binary(Control, "nmenuitems", String, Number, "Returns the total number of user-added menu items belonging to the given menu."),
    Binary(Control, "ondoubleclick", String, Anything, "Defines an action performed when the user double clicks on the map. Command receives:<br/>
<br/>
_pos <t>array</t> position<br/>
_units <t>array</t> selected units<br/>
_shift,_alt <t>bool</t> key state"),
    Binary(Control, "onshownewobject", String, Anything, "Defines an action performed when the user right clicks on the map and selects New Object. Set to empty for default behavior. Command receives:<br/>
<br/>
_pos <t>array</t> position"),
    Binary(Control, "posscreentoworld", Array, Array, "Convert screen coordinates in map to world coordinates."),
    Binary(Control, "posworldtoscreen", Array, Array, "Convert world coordinates to screen coordinates in map."),
    Binary(Control, "progresssetposition", Number, Nothing, "Sets the current position in the progress bar."),
    Binary(Control, "removedrawicon", Array, Nothing, "Removes an icon for an editor object."),
    Binary(Control, "removedrawlinks", Array, Nothing, "Remove all drawn links for the given editor object for the given editor object type. Pass an empty string as param type to remove all draw links for an object."),
    Binary(Control, "removemenuitem", Number, Nothing, "Removes a previously added menu item."),
    Binary(Control, "removemenuitem", String, Nothing, "Removes a previously added menu item."),
    Binary(Control, "selecteditorobject", String, Anything, "Select an editor object. Does not un-select previously selected objects."),
    Binary(Control, "setdrawicon", Array, Nothing, "Set the icon to be shown in 2D editor for the specified editor object. If maintain size is false, icon will not scale depending on the scale of the map. If maintain size is a number, the icon will maintain size if map scale is below that number. is3D, show line and priority are optional."),
    Binary(Control, "seteditormode", String, Nothing, "Sets map mode to MAP, 3D or PREVIEW."),
    Binary(Control, "seteditorobjectscope", Array, Nothing, "This command defines the level of access a user has to editor objects. objects is an array of either Editor Objects (eg [_unit_0]) or actual Game Objects (eg [player]). If the array is empty then the command will automatically parse all editor objects. editor type is the editor type to effect (eg unit), or  for none. condition is an executable string that must evaluate to true or false. If true, the scope of the evaluated editor object will be modified. scope is one of HIDE, VIEW, SELECT, LINKTO, LINKFROM, ALLNODRAG, ALLNOTREE or ALL. subordinates also is a boolean value, if true then subordinates in the editor will be assigned the same scope as the parent."),
    Binary(Control, "setobjectarguments", Array, Anything, "Set object arguments in mission editor."),
    Binary(Control, "setobjectproxy", Array, Anything, "Set the proxy object associated with the given editor object."),
    Binary(Control, "setvariable", Array, Nothing, "Sets given variable on given UI control."),
    Binary(Control, "setvisibleiftreecollapsed", Array, Nothing, "Sets whether or not the object is visible even if the tree is collapsed."),
    Binary(Control, "show3dicons", Boolean, Nothing, "Toggle the drawing of 3D icons."),
    Binary(Control, "showlegend", Boolean, Nothing, "Shows/hides map legend."),
    Binary(Control, "showneweditorobject", Array, Anything, "Show the add editor object dialog, type is editor object type, class is class definition to automatically select, side filters by a certain side, pos is position to create the object."),
    Binary(Control, "slidersetposition", Number, Nothing, "Sets the current thumb position of the given slider."),
    Binary(Control, "slidersetrange", Array, Nothing, "Sets the limits of the slider with id idc of the given slider."),
    Binary(Control, "slidersetspeed", Array, Nothing, "Sets the speed (a click on the arrow results in a move per line. A click on the scale outside the thumb results in a move per page) of the given slider."),
    Binary(Control, "tvadd", Array, Number, "Adds an item with given text to Tree View under specified path (zero based)."),
    Binary(Control, "tvcollapse", Array, Nothing, "Collapses given path."),
    Binary(Control, "tvcount", Array, Number, "Returns count of items in given path."),
    Binary(Control, "tvdata", Array, String, "Returns string from given path."),
    Binary(Control, "tvdelete", Array, Nothing, "Deletes item in given path."),
    Binary(Control, "tvexpand", Array, Nothing, "Expands given path."),
    Binary(Control, "tvisselected", Array, Boolean, "Returns true if given treeview item is selected."),
    Binary(Control, "tvpicture", Array, String, "Returns picture on given path of tree."),
    Binary(Control, "tvpictureright", Array, String, "Returns picture on given path of tree."),
    Binary(Control, "tvsetcolor", Array, Nothing, "Sets color to given path"),
    Binary(Control, "tvsetcursel", Array, Nothing, "Sets cursor to given path."),
    Binary(Control, "tvsetdata", Array, Nothing, "Sets data to given path."),
    Binary(Control, "tvsetpicture", Array, Nothing, "Sets picture to item selected by path."),
    Binary(Control, "tvsetpicturecolor", Array, Nothing, "Sets the color of a tree item's left picture specified by path."),
    Binary(Control, "tvsetpicturecolordisabled", Array, Nothing, "Sets the color of a tree item's left picture specified by path when the item or its parent tree is disabled."),
    Binary(Control, "tvsetpicturecolorselected", Array, Nothing, "Sets the color of a tree item's left picture specified by path when the item is selected."),
    Binary(Control, "tvsetpictureright", Array, Nothing, "Sets picture to item selected by path."),
    Binary(Control, "tvsetpicturerightcolor", Array, Nothing, "Sets the color of a tree item's right picture specified by path."),
    Binary(Control, "tvsetpicturerightcolordisabled", Array, Nothing, "Sets the color of a tree item's left picture specified by path when the item or its parent tree is disabled."),
    Binary(Control, "tvsetpicturerightcolorselected", Array, Nothing, "Sets the color of a tree item's right picture specified by path when the item is selected."),
    Binary(Control, "tvsetselectcolor", Array, Nothing, "Sets selected color to given path"),
    Binary(Control, "tvsetselected", Array, Nothing, "Sets the selection state of given treeview item in multi-select control."),
    Binary(Control, "tvsettext", Array, Nothing, "Sets text to given path."),
    Binary(Control, "tvsettooltip", Array, Nothing, "Sets tooltip for item in the given path of the given ctree control to the given data."),
    Binary(Control, "tvsetvalue", Array, Nothing, "Sets value to given path."),
    Binary(Control, "tvsort", Array, Nothing, "Sorts childrens of given item by data."),
    Binary(Control, "tvsortall", Array, Nothing, "Sorts all children of given item by data."),
    Binary(Control, "tvsortbyvalue", Array, Nothing, "Sorts childrens of given item by value."),
    Binary(Control, "tvsortbyvalueall", Array, Nothing, "Sorts all children of given item by value."),
    Binary(Control, "tvtext", Array, String, "Gets text from given path"),
    Binary(Control, "tvtooltip", Array, String, "Returns the tooltip in the path of given ctree."),
    Binary(Control, "tvvalue", Array, Number, "Reads value from given path."),
    Binary(Control, "updatedrawicon", Array, Nothing, "Updates the icon to be shown in 2D editor for the specified editor object. If maintain size is false, icon will not scale depending on the scale of the map. If maintain size is a number, the icon will maintain size if map scale is below that number."),
    Binary(Control, "updatemenuitem", Array, Nothing, "Sets the text and command for the menu item. index is index as returned from addMenuItem command. command is optional."),
    Binary(DiaryRecord, "!=", DiaryRecord, Boolean, "Checks whether two diary records are different."),
    Binary(DiaryRecord, "==", DiaryRecord, Boolean, "Checks whether two diary records are equal."),
    Binary(Display, "!=", Display, Boolean, "Checks whether two displays are different."),
    Binary(Display, "==", Display, Boolean, "Checks whether two displays are equal."),
    Binary(Display, "closedisplay", Number, Nothing, "Close given display."),
    Binary(Display, "createdisplay", String, Display, "Create child display of given display and load from resource \"name\"."),
    Binary(Display, "createmissiondisplay", Array, Display, "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\". Mission space defines container's config class name."),
    Binary(Display, "createmissiondisplay", String, Display, "Create single missions display as a child of given display. The mission dialog will be set to the directory given as an argument \"root\"."),
    Binary(Display, "creatempcampaigndisplay", String, Nothing, "Create a MP campaign display."),
    Binary(Display, "ctrlat", Array, Control, "Finds the control at given coordinates on the given display"),
    Binary(Display, "ctrlcreate", Array, Control, "Creates new control in given display. The control is created in given groupControl (optional)"),
    Binary(Display, "displayaddeventhandler", Array, Number, "Add an event handler to the given display. Returns id of the handler or -1 when failed."),
    Binary(Display, "displayctrl", Number, Control, "Return child control with specified idc."),
    Binary(Display, "displayremovealleventhandlers", String, Nothing, "Remove all even handlers from the given display."),
    Binary(Display, "displayremoveeventhandler", Array, Nothing, "Remove a given event handler from the given display."),
    Binary(Display, "displayseteventhandler", Array, Nothing, "Sets given event handler of given display."),
    Binary(Display, "geteventhandlerinfo", Array, Array, "Returns event handler info in the following format: [exists, islast, total]"),
    Binary(Display, "getvariable", Array, Anything, "Returns the value of given variable set on given UI display"),
    Binary(Display, "getvariable", String, Anything, "Returns the value of given variable set on given UI display"),
    Binary(Display, "setvariable", Array, Nothing, "Sets given variable on given UI display"),
    Binary(Exception, "catch", Code, Anything, "processes code, when exception is thrown in <f>try</f> block"),
    Binary(For, "do", Code, Anything, "End of for command, starts cycle"),
    Binary(For, "from", Number, For, "Continue sequence of 'for' command."),
    Binary(For, "step", Number, For, "Optionally can set step. If you want to count down, step must be specified, and set negative. Default value is 1."),
    Binary(For, "to", Number, For, "Continue sequence of 'for' command."),
    Binary(Group, "!=", Group, Boolean, "Checks whether two groups are different. If either of them is grpNull, true is returned."),
    Binary(Group, "==", Group, Boolean, "Checks whether two groups are the same. If either of them is grpNull, false is returned."),
    Binary(Group, "addeventhandler", Array, Nothing, "The format of handler is [type,command]. Check scripting topic Event handlers for more information. The index of the currently added handler is returned."),
    Binary(Group, "addeventhandler", Array, Number, "The format of handler is [type,command]. Check scripting topic Event handlers for more information. The index of the currently added handler is returned."),
    Binary(Group, "addgroupicon", Array, Number, "Add icon to a group. Returns icon ID"),
    Binary(Group, "addvehicle", Object, Nothing, "Tells the group it owns the vehicle now."),
    Binary(Group, "addwaypoint", Array, Array, "Adds (or inserts when index is given) a new waypoint to a group. The waypoint is placed randomly in a circle with the given center and radius. The function returns a waypoint with format [group, index]."),
    Binary(Group, "allowfleeing", Number, Nothing, "Sets the group courage. The less courage, the sooner the group will start fleeing. 0 means maximum courage, while 1 means always fleeing."),
    Binary(Group, "copywaypoints", Group, Nothing, "Copy the chain of waypoints from source to target group. The target group will start to process waypoints from the first one."),
    Binary(Group, "create3denentity", Array, Anything, "Creates new entity of given (entity mode) in 3DEN inside given group"),
    Binary(Group, "createunit", Array, Object, "Creates a unit (person) of the given type (type is a name of a subclass of CfgVehicles) and makes it a member of the given group. If the markers array contains several marker names, the position of a random one is used. Otherwise, the given position is used. The unit is placed inside a circle with this position as its center and placement as its radius. Special properties can be: \"NONE\" and \"FORM\"."),
    Binary(Group, "deletegroupwhenempty", Boolean, Nothing, "Enable or disable garbage collection of given group when its empty"),
    Binary(Group, "enableattack", Boolean, Nothing, "Set if leader can issue attack commands."),
    Binary(Group, "enabledynamicsimulation", Boolean, Nothing, "Enables or disables dynamic simulation on given group"),
    Binary(Group, "enablegunlights", String, Nothing, "Tells AI units to force the gun light on (forceOn), off (forceOff) or set it automatically when in combat mode (auto)"),
    Binary(Group, "enableirlasers", Boolean, Nothing, "Enable/disable using IR lasers for AI"),
    Binary(Group, "forgettarget", Object, Nothing, "Reset info group has about target."),
    Binary(Group, "get3denattribute", String, Array, "Reads attribute value from given group."),
    Binary(Group, "geteventhandlerinfo", Array, Array, "Returns event handler info in the following format: [exists, islast, total]"),
    Binary(Group, "getgroupicon", Number, Array, "Get group icon properties."),
    Binary(Group, "getvariable", Array, Anything, "Return the value of variable in the variable space of given group. If not found, default value is returned."),
    Binary(Group, "getvariable", String, Anything, "Return the value of variable in the variable space of given group."),
    Binary(Group, "knowsabout", Object, Number, "Checks whether the unit knows about the target (and how much). If the unit is a vehicle, the vehicle commander is considered instead."),
    Binary(Group, "leavevehicle", Object, Nothing, "Ceases the using of the vehicle in the group. It unassigns all grouped units from the vehicle."),
    Binary(Group, "lockwp", Boolean, Nothing, "Disables switching to the next waypoint (the current waypoint will never complete while lockWp is used). This is sometimes used during cut-scenes."),
    Binary(Group, "move", Array, Nothing, "Creates a move waypoint on the given position (format <ar>Position</ar>) and makes it the currently active group waypoint."),
    Binary(Group, "removealleventhandlers", String, Nothing, "Removes all event handlers of the given type which were added by <f>addEventHandler</f>."),
    Binary(Group, "removeeventhandler", Array, Nothing, "Removes event handler added by <f>addEventHandler</f>. Format of handler is [type,index]. Index is returned by addEventHandler. When any handler is removed, all handler indices higher that the deleted one should be decremented."),
    Binary(Group, "removegroupicon", Number, Nothing, "Remove icon with given ID from group."),
    Binary(Group, "reveal", Array, Nothing, "Reveals the unit to the group. It does not matter whether the group can know about the unit or not."),
    Binary(Group, "reveal", Object, Nothing, "Reveals the unit to the group. It does not matter whether the group can know about the unit or not."),
    Binary(Group, "selectleader", Object, Nothing, "Select group leader."),
    Binary(Group, "setbehaviour", String, Nothing, "Sets the group behaviour mode. Behaviour is one of: \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\"."),
    Binary(Group, "setbehaviourstrong", String, Nothing, "Sets the group units behaviour mode and forces group behaviour to same value. Behaviour is one of: \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\"."),
    Binary(Group, "setcombatbehaviour", String, Nothing, "Sets the given group combat behaviour mode. Behaviour is one of: \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\"."),
    Binary(Group, "setcombatmode", String, Nothing, "Sets the group's combat mode (engagement rules). Mode can be one of: \"BLUE\" (Never fire), \"GREEN\" (Hold fire - defend only), \"WHITE\" (Hold fire, engage at will), \"YELLOW\" (Fire at will) or \"RED\" (Fire at will, engage at will)."),
    Binary(Group, "setcurrentwaypoint", Array, Nothing, "Switch the group to process the given waypoint."),
    Binary(Group, "setformation", String, Nothing, "Sets the group formation. Formation is one of: \"COLUMN\", \"STAG COLUMN\", \"WEDGE\", \"ECH LEFT\", \"ECH RIGHT\", \"VEE\" or \"LINE\"."),
    Binary(Group, "setformdir", Number, Nothing, "Sets the formation heading. The accepted heading range is from 0 to 360. The formation is facing this direction unless an enemy is seen. When the group is moving, this value is overridden by the movement direction."),
    Binary(Group, "setgroupicon", Array, Nothing, "Set group icons properties."),
    Binary(Group, "setgroupiconparams", Array, Nothing, "Set group icons parameters. [color,string,float,bool]"),
    Binary(Group, "setgroupid", Array, Nothing, "Sets the group identity. nameFormat contains strings \"%CLASS_NAME\" where CLASS_NAME is name of class in CfgWorlds, parameters are names of subclasses of CLASS_NAME with the description of the name subpart."),
    Binary(Group, "setgroupidglobal", Array, Nothing, "Sets the group identity and synchronizes it over the network. NameFormat contains strings \"%CLASS_NAME\" where CLASS_NAME is name of class in CfgWorlds, parameters are names of subclasses of CLASS_NAME with the description of the name subpart."),
    Binary(Group, "setgroupowner", Number, Boolean, "Changes the ownership of a group to a given client. Group leader can't be a player. Only works when called from a server. Returns true if locality was changed."),
    Binary(Group, "setspeedmode", String, Nothing, "Sets the group speed mode. Mode may be one of: \"LIMITED\" (half speed), \"NORMAL\" (full speed, maintain formation) or \"FULL\" (do not wait for any other units in the formation)."),
    Binary(Group, "setvariable", Array, Nothing, "Set variable to given value in the variable space of given group. If public is true then the value is broadcast to all computers."),
    Binary(Group, "targets", Array, Array, "Returns targets known by given group filtered by given sides and distance."),
    Binary(Group, "unitsbelowheight", Number, Array, "Return units in group below passed height."),
    Binary(HashMap, "apply", Code, Array, "Executes the given code for each element in HashMap."),
    Binary(HashMap, "deleteat", Array, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "deleteat", Boolean, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "deleteat", Code, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "deleteat", Config, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "deleteat", Namespace, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "deleteat", Number, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "deleteat", Side, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "deleteat", String, Anything, "Deletes the given key from the HashMap and returns the previous value."),
    Binary(HashMap, "get", Array, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "get", Boolean, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "get", Code, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "get", Config, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "get", Namespace, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "get", Number, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "get", Side, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "get", String, Anything, "Retrieves a value from the HashMap. Returns Nil if key was not found."),
    Binary(HashMap, "getordefault", Array, Anything, "Retrieves a value from the Hashmap, returns defaultValue if key was not found. Sets key to defaultValue if setDefault is true."),
    Binary(HashMap, "getordefaultcall", Array, Anything, "Retrieves a value from the Hashmap, executes given callCode if key was not found and returns result. Sets key to the code result value if setKey is true."),
    Binary(HashMap, "insert", Array, Nothing, "Inserts the elements from a [key,value] array into the HashMap"),
    Binary(HashMap, "merge", Array, Nothing, "Merges other HashMap elements into HashMap and optionally overwrites existing values"),
    Binary(HashMap, "merge", HashMap, Nothing, "Merges other HashMap elements into HashMap and optionally overwrites existing values"),
    Binary(HashMap, "set", Array, Boolean, "Sets an entry in the HashMap. Returns whether an already existing entry was replaced."),
    Binary(HashMap, "toarray", Boolean, Array, "Converts Hashmap into [[key,value],[key,value],...] array, or to splitArray [[key,key,...],[value,value,...]] array."),
    Binary(If, "exitwith", Code, Anything, "if result of condition is true, evaluates code, and current block with result of code"),
    Binary(If, "then", Array, Anything, "The first or second element of the array is executed depending on the result of the if condition. The result of the executed expression is returned as a result (the result may be <t>nothing</t>)."),
    Binary(If, "then", Code, Anything, "The code is executed when the if condition is met. If the code is executed, the last value calculated in the code is returned. If the code is not executed, <t>nothing</t> is returned."),
    Binary(If, "throw", Anything, Nothing, "if result of condition is true, throw command is executed"),
    Binary(Location, "!=", Location, Boolean, "Checks whether two locations are different. If either of them is null, true is returned."),
    Binary(Location, "==", Location, Boolean, "Checks whether two locations are the same. If either of them is null, false is returned."),
    Binary(Location, "attachobject", Object, Nothing, "Attach a object to given location."),
    Binary(Location, "distance", Array, Number, "Computes the distance between two locations or positions."),
    Binary(Location, "distance", Location, Number, "Computes the distance between two locations or positions."),
    Binary(Location, "distancesqr", Array, Number, "Computes the distance square between two locations or positions."),
    Binary(Location, "distancesqr", Location, Number, "Computes the distance square between two locations or positions."),
    Binary(Location, "getvariable", Array, Anything, "Return the value of variable in the variable space of given location."),
    Binary(Location, "getvariable", String, Anything, "Return the value of variable in the variable space of given location."),
    Binary(Location, "setdirection", Number, Nothing, "Set a new direction (angle) of given location."),
    Binary(Location, "setimportance", Number, Nothing, "Set a new importance of given location."),
    Binary(Location, "setname", String, Nothing, "Set which global variable will contain given location."),
    Binary(Location, "setposition", Array, Nothing, "Set a new position of given location."),
    Binary(Location, "setrectangular", Boolean, Nothing, "Set if given location has rectangular shape."),
    Binary(Location, "setside", Side, Nothing, "Set a new target side of given location."),
    Binary(Location, "setsize", Array, Nothing, "Set a new size (width, height) of given location."),
    Binary(Location, "setspeech", String, Nothing, "Add speech to location."),
    Binary(Location, "settext", String, Nothing, "Set a new text attached to given location."),
    Binary(Location, "settype", String, Nothing, "Set a new type of given location."),
    Binary(Location, "setvariable", Array, Nothing, "Set variable to given value in the variable space of given location."),
    Binary(Namespace, "!=", Namespace, Boolean, "Checks whether two namespaces are different."),
    Binary(Namespace, "==", Namespace, Boolean, "Checks whether two namespaces are equal."),
    Binary(Namespace, "getvariable", Array, Anything, "Return the value of variable in the given namespace. If not found, default value is returned."),
    Binary(Namespace, "getvariable", String, Anything, "Return the value of variable in the given namespace."),
    Binary(Namespace, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(Namespace, "setvariable", Array, Nothing, "Set variable to given value in the given namespace. 'Public' only allowed for missionNamespace"),
    Binary(NetObject, "!=", NetObject, Boolean, "Checks whether two objects are different. If either of them is netObjNull, true is returned."),
    Binary(NetObject, "==", NetObject, Boolean, "Checks whether two objects are the same. If either of them is netObjNull, false is returned."),
    Binary(Number, "!=", Number, Boolean, "a is not equal to b"),
    Binary(Number, "%", Number, Number, "The remainder of a divided by b. Note that the remainder is calculated in the real domain."),
    Binary(Number, "*", Number, Number, "a multiplied by b"),
    Binary(Number, "+", Number, Number, "a plus b"),
    Binary(Number, "-", Number, Number, "a minus b"),
    Binary(Number, "/", Number, Number, "a divided by b"),
    Binary(Number, "<", Number, Boolean, "a lesser than b"),
    Binary(Number, "<=", Number, Boolean, "a lesser or equal than b"),
    Binary(Number, "==", Number, Boolean, "a equal to b"),
    Binary(Number, ">", Number, Boolean, "a greater than b"),
    Binary(Number, ">=", Number, Boolean, "a greater or equal than b"),
    Binary(Number, "^", Number, Number, "a raised to the power of b"),
    Binary(Number, "add3denlayer", String, Number, "Creates new entity layer with given name"),
    Binary(Number, "allobjects", Number, Array, "Returns array of matching objects depending on the passed arguments"),
    Binary(Number, "atan2", Number, Number, "Returns the arctangens of x/y. The returned value is in degrees, in the range from -180 to +180, using the signs of both parameters to determine the quadrant of the returned value."),
    Binary(Number, "bezierinterpolation", Array, Array, "Gets interpolated value based on bezier curve with given control points (progress is 0-1)"),
    Binary(Number, "boundingbox", Object, Array, "Gets object bounding box with specified clipping (0-ClipVisual, 1-ClipShadow, 2-ClipGeometry, 3-ClipGeneral)"),
    Binary(Number, "boundingboxreal", Object, Array, "Gets object bounding box real with specified clipping (0-ClipVisual, 1-ClipShadow, 2-ClipGeometry, 3-ClipGeneral)"),
    Binary(Number, "cutfadeout", Number, Nothing, "Terminate the effect in the given layer and set duration of the fade out phase to the given time."),
    Binary(Number, "cutobj", Array, Nothing, "Object background - the right argument uses format [\"name\",\"type\",speed] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
The left argument define layer in which the effect is show, 0 is the back most.
The object can be defined in the description.ext file."),
    Binary(Number, "cutrsc", Array, Nothing, "Resource background - the right argument uses format [\"name\",\"type\",speed] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
The left argument define layer in which the effect is show, 0 is the back most.
The resource can be defined in the description.ext file."),
    Binary(Number, "cuttext", Array, Nothing, "Text background - the right argument uses format [\"text\",\"type\",speed, showInMap, isStructuredText] or [\"text\",\"type\"]. If speed is not given, it's assumed to be one. Type may be one of: \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" or \"WHITE IN\".
The left argument define layer in which the effect is show, 0 is the back most."),
    Binary(Number, "debugfsm", Boolean, Nothing, "Switch FSM debug log on/off."),
    Binary(Number, "enablechannel", Array, Nothing, "Enables/disables chat channel."),
    Binary(Number, "enablechannel", Boolean, Nothing, "Enables/disables chat channel."),
    Binary(Number, "fadeenvironment", Number, Nothing, "Causes a smooth change in the volume of the environment. The change duration is given by time, the target volume by volume. The default volume is 1.0."),
    Binary(Number, "fademusic", Number, Nothing, "Causes a smooth change in the music volume. The change duration is given by time, the target volume by volume. The default music volume is 0.5."),
    Binary(Number, "faderadio", Number, Nothing, "Causes a smooth change in the radio volume. The change duration is given by time, the target volume by volume. The default radio volume is 1.0."),
    Binary(Number, "fadesound", Number, Nothing, "Causes a smooth change in the master volume. The change duration is given by time, the target volume by volume. The default master volume is 1.0."),
    Binary(Number, "fadespeech", Number, Nothing, "Causes a smooth change in the master speech volume. The change duration is given by time, the target volume by volume. The default master volume is 1.0."),
    Binary(Number, "get3denattribute", String, Array, "Reads attribute value from given editor object."),
    Binary(Number, "getfsmvariable", Array, Anything, "Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command."),
    Binary(Number, "getfsmvariable", String, Anything, "Return the value of variable in the variable space of given FSM. The FSM handle is the number returned by the execFSM command."),
    Binary(Number, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(Number, "lbsortby", Array, Nothing, "Sorts given listbox by \"TEXT\", \"DATA\" or \"VALUE\" with optional sort order and case sensitivity."),
    Binary(Number, "max", Number, Number, "The greater of a,b"),
    Binary(Number, "min", Number, Number, "The smaller of a,b"),
    Binary(Number, "mod", Number, Number, "The remainder of a divided by b. Note that the remainer is calculated in the real domain."),
    Binary(Number, "ppeffectadjust", Array, Nothing, "Set post process effect parameters"),
    Binary(Number, "ppeffectcommit", Number, Nothing, "Set time when old pars are replaced by last set, if 0 set immediately"),
    Binary(Number, "ppeffectenable", Boolean, Nothing, "Enable / disable post process effect"),
    Binary(Number, "ppeffectforceinnvg", Boolean, Nothing, "Forces to use PP effect in NVG"),
    Binary(Number, "preloadobject", Object, Boolean, "Preload all data for given object."),
    Binary(Number, "preloadobject", String, Boolean, "Preload all data for given object."),
    Binary(Number, "publicvariableclient", String, Nothing, "Send the variable value to the client computer.
Only type <t>Number</t> is supported in versions 1.33 and before.
The following types are supported since 1.34:
<t>Number</t>, <t>Boolean</t>, <t>Object</t> and <t>Group</t>."),
    Binary(Number, "radiochanneladd", Array, Nothing, "Add the units to the custom radio channel."),
    Binary(Number, "radiochannelremove", Array, Nothing, "Remove the units from the custom radio channel."),
    Binary(Number, "radiochannelsetcallsign", String, Nothing, "Set the custom channel call sign."),
    Binary(Number, "radiochannelsetlabel", String, Nothing, "Set the custom channel label."),
    Binary(Number, "random", Array, Number, "Returns random number but always the same as long as you provide same seed"),
    Binary(Number, "random", Number, Number, "Returns random number but always the same as long as you provide same seed"),
    Binary(Number, "setairportside", Side, Nothing, "Set owner of the airport"),
    Binary(Number, "setfog", Array, Nothing, "Changes the fog value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. Fog can be either a single value indicating fog density or an array [fog, decay, base]: fog - indicates fog density, 0 - no fog, 1 - maximum fog; decay - indicates density falloff with altitude; base - indicates altitude at which fog will have its nominal density."),
    Binary(Number, "setfog", Number, Nothing, "Changes the fog value smoothly during the given time (in seconds). A time of zero means there will be an immediate change. Fog can be either a single value indicating fog density or an array [fog, decay, base]: fog - indicates fog density, 0 - no fog, 1 - maximum fog; decay - indicates density falloff with altitude; base - indicates altitude at which fog will have its nominal density."),
    Binary(Number, "setforcegeneratorrtd", Array, Nothing, ""),
    Binary(Number, "setfsmvariable", Array, Nothing, "Set variable to given value in the variable space of given FSM. The FSM handle is the number returned by the execFSM command."),
    Binary(Number, "setgusts", Number, Nothing, "Changes the gusts value smoothly during the given time (in seconds). A time of zero means there will be an immediate change."),
    Binary(Number, "setlightnings", Number, Nothing, "Changes the lightnings value smoothly during the given time (in seconds). A time of zero means there will be an immediate change."),
    Binary(Number, "setovercast", Number, Nothing, "Changes the overcast level to the given value smoothly during the given time (in seconds). A time of zero means an immediate change. An overcast level of zero means clear (sunny) weather and with an overcast level of one, storms and showers are very likely."),
    Binary(Number, "setradiomsg", String, Nothing, "Sets the radio message (0, 0, map radio) to the given text. Use \"NULL\" to disable the radio slot."),
    Binary(Number, "setrain", Number, Nothing, "Changes the rain density smoothly during the given time (in seconds). A time of zero means an immediate change. A rain level of zero is no rain and a rain level of one is maximum rain. Rain is not possible when overcast is smaller than 0.7."),
    Binary(Number, "setrainbow", Number, Nothing, "Changes the rainbow value smoothly during the given time (in seconds). A time of zero means there will be an immediate change."),
    Binary(Number, "setwaves", Number, Nothing, "Changes the waves value smoothly during the given time (in seconds). A time of zero means there will be an immediate change."),
    Binary(Number, "setwinddir", Number, Nothing, "Changes the wind direction smoothly during the given time (in seconds). A time of zero means there will be an immediate change."),
    Binary(Number, "setwindforce", Number, Nothing, "Set max. wind overall wind changes in time. A time of zero means there will be an immediate change. A wind level of zero is minimal changes and a wind level of one means that wind can chage rapidly and max. wind speed i 35m/s."),
    Binary(Number, "setwindstr", Number, Nothing, "Changes the wind strength smoothly during the given time (in seconds). A time of zero means there will be an immediate change."),
    Binary(Number, "tofixed", Number, String, "Formats a number using fixed-point notation"),
    Binary(Object, "!=", Object, Boolean, "Checks whether two objects are different. If either of them is objNull, true is returned."),
    Binary(Object, "==", Object, Boolean, "Checks whether two objects are the same. If either of them is objNull, false is returned."),
    Binary(Object, "action", Array, Nothing, "Makes the unit peform an action. The format of action can be [type, target, param1, param2, param3]. Only type is required, target defaults to unit and param1, param2, param3 are type specific."),
    Binary(Object, "actionparams", Number, Array, "Returns array with user added action params in format of addAction"),
    Binary(Object, "addaction", Array, Nothing, "Creates an action and returns its ID. It uses the following algorithm: the first action added to the given vehicle has ID zero, the next vehicle has ID one, etc."),
    Binary(Object, "addaction", Array, Number, "Creates an action and returns its ID. It uses the following algorithm: the first action added to the given vehicle has ID zero, the next vehicle has ID one, etc."),
    Binary(Object, "addbackpack", String, Nothing, "Adds the backpack to the unit. "),
    Binary(Object, "addbackpackcargo", Array, Nothing, "Adds bacpacks to the cargo space. The format of backpacks is [backpacksName, count].
For backpacksName values see <cl>CfgWeapons</cl>."),
    Binary(Object, "addbackpackcargoglobal", Array, Nothing, "Adds bacpacks to the cargo space.  MP synchronized. The format of backpacks is [backpacksName, count].
For backpacksName values see <cl>CfgWeapons</cl>."),
    Binary(Object, "addbackpackglobal", String, Nothing, "Adds the backpack to the unit(even non-local) "),
    Binary(Object, "addbinocularitem", String, Nothing, "Adds item to the binocular weapon cargo space. This is used for infantry weapons."),
    Binary(Object, "addcuratoraddons", Array, Nothing, "Allow curator use of given addon."),
    Binary(Object, "addcuratorcameraarea", Array, Nothing, "Adds or changes curator camera area (depends on if ID is allready used)"),
    Binary(Object, "addcuratoreditableobjects", Array, Nothing, "Register objects which can be edited by a curator."),
    Binary(Object, "addcuratoreditingarea", Array, Nothing, "Adds or changes curator edit area (depends on if ID is allready used)"),
    Binary(Object, "addcuratorpoints", Number, Nothing, "Adds or removes curator points."),
    Binary(Object, "addeventhandler", Array, Nothing, "The format of handler is [type,command]. Check scripting topic Event handlers for more information. The index of the currently added handler is returned."),
    Binary(Object, "addeventhandler", Array, Number, "The format of handler is [type,command]. Check scripting topic Event handlers for more information. The index of the currently added handler is returned."),
    Binary(Object, "addforce", Array, Nothing, "Applies force to given object at given position. Force is defined as vector [x, y, z] in world space, position is vector [x, y, z] in model space."),
    Binary(Object, "addgoggles", String, Nothing, "Create a new item and try to link them into goggles slot."),
    Binary(Object, "addhandgunitem", String, Nothing, "Adds item to the weapon cargo space. This is used for infantry weapons."),
    Binary(Object, "addheadgear", String, Nothing, "Create a new item and try to link them into headgear slot"),
    Binary(Object, "additem", String, Nothing, "Create new item and store it to to the inventory. "),
    Binary(Object, "additemcargo", Array, Nothing, "Create new items and store them to the weapon holder."),
    Binary(Object, "additemcargoglobal", Array, Nothing, "Create new items and store them to the weapon holder."),
    Binary(Object, "additemtobackpack", String, Nothing, "Create new item and store it to soldier's backpack"),
    Binary(Object, "additemtouniform", String, Nothing, "Create new item and store it to soldier's uniform"),
    Binary(Object, "additemtovest", String, Nothing, "Create new item and store it to soldier's vest"),
    Binary(Object, "addlivestats", Number, Nothing, "Xbox Live MP only: adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle)."),
    Binary(Object, "addmagazine", Array, Nothing, "Adds a magazine to the unit and sets ammo count. Note: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined."),
    Binary(Object, "addmagazine", String, Nothing, "Adds a magazine to the unit. Note: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined."),
    Binary(Object, "addmagazineammocargo", Array, Nothing, "Adds magazines to the weapon cargo space. This is used for infantry weapons.  MP synchronized. The format of magazines is [magazineName, count, ammo].
For magazineName values see <cl>CfgWeapons</cl>."),
    Binary(Object, "addmagazinecargo", Array, Nothing, "Adds magazines to the weapon cargo space. This is used for infantry weapons. The format of magazines is [magazineName, count].
For magazineName values see <cl>CfgWeapons</cl>."),
    Binary(Object, "addmagazinecargoglobal", Array, Nothing, "Adds magazines to the weapon cargo space. This is used for infantry weapons.  MP synchronized. The format of magazines is [magazineName, count].
For magazineName values see <cl>CfgWeapons</cl>."),
    Binary(Object, "addmagazineglobal", String, Nothing, "Adds a magazine to the unit. Note: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined."),
    Binary(Object, "addmagazines", Array, Nothing, "Adds magazines to the unit."),
    Binary(Object, "addmagazineturret", Array, Nothing, "Adds a magazine to the turret. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function, for example by adding 20 grenades. When doing so, application behaviour is undefined."),
    Binary(Object, "addmpeventhandler", Array, Nothing, "The format of handler is [type,command]. Check scripting topic Event handlers for more information. The index of the currently added handler is returned."),
    Binary(Object, "addmpeventhandler", Array, Number, "The format of handler is [type,command]. Check scripting topic Event handlers for more information. The index of the currently added handler is returned."),
    Binary(Object, "addownedmine", Object, Nothing, "Set ownership over a remotely detonatable mine to the unit."),
    Binary(Object, "addplayerscores", Array, Nothing, "MP server only: adds player score."),
    Binary(Object, "addprimaryweaponitem", String, Nothing, "Adds item to the weapon cargo space of primary weapon."),
    Binary(Object, "addrating", Number, Nothing, "Adds number to the unit rating. This is usually used to reward for completed mission objectives. The rating for killed enemies and killed friendlies is adjusted automatically. When the rating is lower than zero, a unit is considered \"renegade\" and is an enemy to everyone."),
    Binary(Object, "addscore", Number, Nothing, "MP only: adds unit score. This is shown in the \"I\" MP screen as the total score."),
    Binary(Object, "addsecondaryweaponitem", String, Nothing, "Adds item to the weapon cargo space of secondary weapon."),
    Binary(Object, "addtorque", Array, Nothing, "Applies torque to given object. Torque is defined as vector [x, y, z] applied in world space."),
    Binary(Object, "adduniform", String, Nothing, "Create a new uniform and try to link it into uniform slot(given uniform has to be supported by allowedUniforms list of target soldier)."),
    Binary(Object, "addvest", String, Nothing, "Create a new vest and try to link it into vest slot."),
    Binary(Object, "addweapon", String, Nothing, "Adds the weapon to the unit. Note: you may create invalid combinations by using this function, for example by adding two rifles. When doing so, application behaviour is undefined."),
    Binary(Object, "addweaponcargo", Array, Nothing, "Adds weapons to the weapon cargo space. This is used for infantry weapons. The format of weapons is [weaponName, count].
For weaponName values see <cl>CfgWeapons</cl>."),
    Binary(Object, "addweaponcargoglobal", Array, Nothing, "Adds weapons to the weapon cargo space. This is used for infantry weapons.  MP synchronized. The format of weapons is [weaponName, count].
For weaponName values see <cl>CfgWeapons</cl>."),
    Binary(Object, "addweaponglobal", String, Nothing, "Adds the weapon to the unit. Note: you may create invalid combinations by using this function, for example by adding two rifles. When doing so, application behaviour is undefined."),
    Binary(Object, "addweaponitem", Array, Nothing, "Adds item to the weapon cargo space of a given weapon."),
    Binary(Object, "addweaponturret", Array, Nothing, "Adds the weapon to the given vehicle's turret. "),
    Binary(Object, "addweaponwithattachmentscargo", Array, Nothing, "Adds weapons with attachments to the unit's cargo space. This is used for infantry weapons."),
    Binary(Object, "addweaponwithattachmentscargoglobal", Array, Nothing, "Adds weapons with attachments to the unit's cargo space. This is used for infantry weapons.  MP synchronized."),
    Binary(Object, "aimedattarget", Array, Number, "Returns how good is weapon aimed to target."),
    Binary(Object, "alldiaryrecords", String, Array, "Returns a list of all diary records available for given subject."),
    Binary(Object, "allowcrewinimmobile", Array, Nothing, "If true, units can be in vehicle with broken tracks/wheels."),
    Binary(Object, "allowcrewinimmobile", Boolean, Nothing, "If true, units can be in vehicle with broken tracks/wheels."),
    Binary(Object, "allowcuratorlogicignoreareas", Boolean, Nothing, "Allow curator placing and working with modules outside of edit areas."),
    Binary(Object, "allowdamage", Boolean, Nothing, "Allow or prevent an object being damaged (or injured, or killed). The command does not prevent object from taking scripted damage such as setHit, setHitIndex, setHitPointDamage or setDamage."),
    Binary(Object, "allowdammage", Boolean, Nothing, "See allowDamage"),
    Binary(Object, "allowfleeing", Number, Nothing, "Sets the group courage. The less courage, the sooner the group will start fleeing. 0 means maximum courage, while 1 means always fleeing."),
    Binary(Object, "allowservice", Number, Nothing, "Sets which supply service mode is allowed - 0:none, 1:auto, 2:manual, 3:both. Default - 3:both"),
    Binary(Object, "allowsprint", Boolean, Nothing, "Force player to run/jog if set to false."),
    Binary(Object, "ammo", String, Number, "Counts how many shots the unit has left for the currently loaded magazine of given muzzle type."),
    Binary(Object, "ammoonpylon", Number, Number, "returns ammo count on given pylon"),
    Binary(Object, "ammoonpylon", String, Number, "returns ammo count on given pylon"),
    Binary(Object, "animate", Array, Nothing, "Process animation on object. Animation is defined in config file. Wanted animation phase is set to phase."),
    Binary(Object, "animatebay", Array, Nothing, "force animation of bay to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when bay state = 1"),
    Binary(Object, "animatedoor", Array, Nothing, "Process animation of door on vehicle. Animation is defined in config file. Wanted animation phase is set to phase."),
    Binary(Object, "animatepylon", Array, Nothing, "force animation of pylon to given state, -1 for reset to engine handling, can cause weapon inoperative, because weapon is released when pylon state = 1"),
    Binary(Object, "animatesource", Array, Nothing, "Process animation on object. Animation is defined by source name in model config."),
    Binary(Object, "animationphase", String, Number, "Return animation phase of animation on object."),
    Binary(Object, "animationsourcephase", String, Number, "Return animation phase (started by \"animateSource\") of animation on object."),
    Binary(Object, "assignascargo", Object, Nothing, "Assigns the soldier to the cargo / passenger space of the given vehicle."),
    Binary(Object, "assignascargoindex", Array, Nothing, "Assigns the character to a specific cargo / passenger index of the given vehicle."),
    Binary(Object, "assignascommander", Object, Nothing, "Assigns the soldier as commander of the given vehicle."),
    Binary(Object, "assignasdriver", Object, Nothing, "Assigns the soldier as driver of the given vehicle."),
    Binary(Object, "assignasgunner", Object, Nothing, "Assigns the soldier as gunner of the given vehicle."),
    Binary(Object, "assignasturret", Array, Nothing, "Assigns the soldier to turret."),
    Binary(Object, "assigncurator", Object, Nothing, "Assign player as curator. 2 players cannot act as one Zeus."),
    Binary(Object, "assignitem", String, Nothing, "Assigns existing item from inventory (uniform, vest, backpack) to a correct slot."),
    Binary(Object, "assignteam", String, Nothing, "Assigns the vehicle (specifically its commander unit) to the given team. The possible team values are: \"MAIN\", \"RED\", \"GREEN\", \"BLUE\" and \"YELLOW\"."),
    Binary(Object, "assigntoairport", Number, Nothing, "Set airport to be used by AI on getout"),
    Binary(Object, "assigntoairport", Object, Nothing, "Set airport to be used by AI on getout"),
    Binary(Object, "attachto", Array, Nothing, "Attaches an object to another object. The offset is applied to the object center unless a memory point is provided."),
    Binary(Object, "awake", Boolean, Nothing, "Awakes PhysX object or puts it to sleep"),
    Binary(Object, "backpackspacefor", String, Array, "Returns how much space is in backpack for given weapon or magazine."),
    Binary(Object, "buildingexit", Number, Array, "Returns the given indexed exit in a building. The returned value is in format <ar>Position</ar>."),
    Binary(Object, "buildingpos", Number, Array, "Returns the given indexed position in a building. The returned value is in format <ar>Position</ar>."),
    Binary(Object, "camcommand", String, Nothing, "Executes a command on the given camera / actor object. The \"manual on\" and \"manual off\" commands are recognized for all types. For the \"camera\" type, the following commands can be used: \"inertia on\" and \"inertia off\". For the \"seagull\" type it's one of: \"landed\" and \"airborne\"."),
    Binary(Object, "camcommit", Number, Nothing, "Commits the camera changes smoothly over time. A time of zero results in an immediate change."),
    Binary(Object, "camcommitprepared", Number, Nothing, "Commits the prepared camera changes smoothly over time. A time of zero results in an immediate change."),
    Binary(Object, "camconstuctionsetparams", Array, Nothing, "Sets construction camera parameters."),
    Binary(Object, "cameraeffect", Array, Nothing, "Switches the camera to the given vehicle / camera. The format of effect is [name, position]. Name is one of: \"Internal\", \"External\", \"Fixed\" or \"FixedWithZoom\". Position is one of: \"TOP\", \"LEFT\", \"RIGHT\", \"FRONT\" or \"BACK\" (\"BACK\" is normally used)."),
    Binary(Object, "campreload", Number, Nothing, "Preload the scene for he prepared camera. Time gives timeout, zero means no (infinite) timeout."),
    Binary(Object, "campreparebank", Number, Nothing, "Prepares the camera bank angle. See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparedir", Number, Nothing, "Prepares the camera heading. See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparedive", Number, Nothing, "Prepares the camera dive angle. See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparefocus", Array, Nothing, "focusRange is in format [distance,blur].
Prepares the camera focus blur. See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparefov", Number, Nothing, "Prepares the camera field of view (zoom). See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparefovrange", Array, Nothing, "Prepares the camera field of view range for auto zooming. See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparepos", Array, Nothing, "Prepares the camera position (format <ar>Position</ar>). See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparerelpos", Array, Nothing, "Prepares the camera position relative to the current position of the currect target (see <f>camPrepareTarget</f>). See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparetarget", Array, Nothing, "Prepares the camera target to a position (format <ar>Position</ar>). See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "campreparetarget", Object, Nothing, "Prepares the camera target. See also <f>camPreload</f> and <f>camCommitPrepared</f>."),
    Binary(Object, "camsetbank", Number, Nothing, "Sets the camera bank angle. It does not automatically commit changes."),
    Binary(Object, "camsetdir", Array, Nothing, "Sets the camera heading. It does not automatically commit changes."),
    Binary(Object, "camsetdive", Number, Nothing, "Sets the camera dive angle. It does not automatically commit changes."),
    Binary(Object, "camsetfocus", Array, Nothing, "focusRange is in format [distance,blur].
Sets the camera focus blur. It does not automatically commit changes."),
    Binary(Object, "camsetfov", Number, Nothing, "Sets the camera field of view (zoom). It does not automatically commit changes."),
    Binary(Object, "camsetfovrange", Array, Nothing, "Sets the camera field of view range for auto zooming. It does not automatically commit changes."),
    Binary(Object, "camsetpos", Array, Nothing, "Sets the camera position (format <ar>Position</ar>). It does not automatically commit changes."),
    Binary(Object, "camsetrelpos", Array, Nothing, "Sets the camera position relative to the current position of the currect target (see <f>camSetTarget</f>). It does not automatically commit changes."),
    Binary(Object, "camsettarget", Array, Nothing, "Sets the camera target to a position (format <ar>Position</ar>). It does not automatically commit changes."),
    Binary(Object, "camsettarget", Object, Nothing, "Sets the camera target. It does not automatically commit changes."),
    Binary(Object, "canadd", Array, Boolean, "Check if given object(or group of objects) can be stored into target entity"),
    Binary(Object, "canadd", String, Boolean, "Check if given object(or group of objects) can be stored into target entity"),
    Binary(Object, "canadditemtobackpack", Array, Boolean, "Check if given object(or group of objects) can be stored into soldier's uniform"),
    Binary(Object, "canadditemtobackpack", String, Boolean, "Check if given object(or group of objects) can be stored into soldier's uniform"),
    Binary(Object, "canadditemtouniform", Array, Boolean, "Check if given object(or group of objects) can be stored into soldier's uniform"),
    Binary(Object, "canadditemtouniform", String, Boolean, "Check if given object(or group of objects) can be stored into soldier's uniform"),
    Binary(Object, "canadditemtovest", Array, Boolean, "Check if given object(or group of objects) can be stored into soldier's uniform"),
    Binary(Object, "canadditemtovest", String, Boolean, "Check if given object(or group of objects) can be stored into soldier's uniform"),
    Binary(Object, "canslingload", Object, Boolean, "Returns true if it is possible to sling load cargo"),
    Binary(Object, "canvehiclecargo", Object, Array, "Returns bool array if it is possible to load cargo inside vehicle and if possible to load cargo into empty vehicle"),
    Binary(Object, "checkaifeature", String, Boolean, "Check if given AI behaviour is enabled (see enableAI/disableAI)"),
    Binary(Object, "commandartilleryfire", Array, Nothing, "Orders a unit to reaload defined magazine commence fire burst on the given position (via the radio)."),
    Binary(Object, "commandchat", String, Nothing, "Types text to the command radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Binary(Object, "commandfire", Object, Nothing, "Orders a unit to commence firing on the given target (via the radio). If the target is objNull, the unit is ordered to commence firing on its current target (set using doTarget or commandTarget)."),
    Binary(Object, "commandfollow", Object, Nothing, "Orders a unit to follow the given unit (via the radio)."),
    Binary(Object, "commandfsm", Array, Nothing, "Orders a unit to process command defined by FSM file (via the radio)."),
    Binary(Object, "commandmove", Array, Nothing, "Orders the unit to move to the given position (format <ar>Position</ar>) (via the radio)."),
    Binary(Object, "commandradio", String, Nothing, "Sends the message to the command radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Object, "commandsuppressivefire", Array, Nothing, "Orders a unit to suppress given position or target (via the radio)."),
    Binary(Object, "commandsuppressivefire", Object, Nothing, "Orders a unit to suppress given position or target (via the radio)."),
    Binary(Object, "commandtarget", Object, Nothing, "Orders the unit to target the given target (via the radio)."),
    Binary(Object, "commandwatch", Array, Nothing, "Orders the unit to watch the given position (format <ar>Position</ar>) (via the radio)."),
    Binary(Object, "commandwatch", Object, Nothing, "Orders the unit to watch the given target (via the radio)."),
    Binary(Object, "confirmsensortarget", Array, Nothing, "Sets for which side is given unit known target"),
    Binary(Object, "connectterminaltouav", Object, Boolean, "Connect person with UAV terminal to UAV unit, or disconnect when UAV==objNull"),
    Binary(Object, "countenemy", Array, Number, "Counts how many units in the array are considered enemy by the given unit."),
    Binary(Object, "countfriendly", Array, Number, "Counts how many units in the array are considered friendly by the given unit."),
    Binary(Object, "countunknown", Array, Number, "Counts how many units in the array are considered unknown to the given unit."),
    Binary(Object, "creatediaryrecord", Array, DiaryRecord, "Create a new log record."),
    Binary(Object, "creatediarysubject", Array, Number, "Create a new subject page in a log."),
    Binary(Object, "createsimpletask", Array, Task, "Create a new simple task (subtask of parentTask)."),
    Binary(Object, "curatorcoef", String, Number, "Returns current coeficient setting"),
    Binary(Object, "currentmagazinedetailturret", Array, String, "Return the name of the type of the currently using magazine on specified turret."),
    Binary(Object, "currentmagazineturret", Array, String, "Return the name of the type of the currently using magazine on specified turret."),
    Binary(Object, "currentvisionmode", Array, Array, "Returns current vision mode and FLIR index for the given vehicle's turret or [] for the primary gunner turret"),
    Binary(Object, "currentvisionmode", String, Array, "Returns current vision mode and FLIR index for the given unit's weapon or \"\" for the current weapon"),
    Binary(Object, "currentweaponturret", Array, String, "Return the name of the currently selected weapon on specified turret."),
    Binary(Object, "currentzeroing", Array, Array, "Retrieves the current zeroing on specified weapon and optionally specific muzzle"),
    Binary(Object, "customchat", Array, Nothing, "Sends the chat message to the custom radio channel."),
    Binary(Object, "customradio", Array, Nothing, "Sends the message to the custom radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Object, "deletevehiclecrew", Object, Nothing, "Deletes given vehicle crew person from vehicle including dead persons."),
    Binary(Object, "diarysubjectexists", String, Boolean, "Checks whether given subject is present in the diary of given person."),
    Binary(Object, "directionstabilizationenabled", Array, Boolean, "Get state of direction stabilization of selected turret"),
    Binary(Object, "directsay", String, Nothing, "Sends the message to the direct channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Object, "disableai", String, Nothing, "Disables parts of the AI behaviour to get more control over a unit. Section is one of \"TARGET\" (disables watching assigned targets), \"AUTOTARGET\" (disables independed target assigning and watching of unknown targets), \"MOVE\" (disables movement), \"SUPPRESSION\" (disable suppression being accumulated out of danger events), \"AIMINGERROR\" (disable distractions on aiming), \"CHECKVISIBLE\" (disable visibility raycasts), \"COVER\" (disable usage of cover), \"AUTOCOMBAT\" (disable autonomous switching to combat mode), \"MINEDETECTION\" (disable autonomous AI mine detection), \"ALL\" to disable everything"),
    Binary(Object, "disablebrakes", Boolean, Nothing, "Disables vehicle brakes. Brakes are automatically enabled if driver brakes"),
    Binary(Object, "disablecollisionwith", Object, Nothing, "Disable collision between vehicles."),
    Binary(Object, "disableconversation", Boolean, Nothing, "Lock / unlock the unit to using conversation. Implemented by the counter, so lock - unlock need to be matched."),
    Binary(Object, "disablenvgequipment", Boolean, Nothing, "Enable/disable transport vision modes(Nv)"),
    Binary(Object, "disabletiequipment", Boolean, Nothing, "Enable/disable transport vision modes(Ti)"),
    Binary(Object, "disableuavconnectability", Array, Nothing, "disable unit's AV terminal(s) connecting to UAV"),
    Binary(Object, "distance", Array, Number, "Computes the distance between two objects or positions."),
    Binary(Object, "distance", Object, Number, "Computes the distance between two objects or positions."),
    Binary(Object, "distance2d", Array, Number, "Computes the 2D distance between two objects or positions."),
    Binary(Object, "distance2d", Object, Number, "Computes the 2D distance between two objects or positions."),
    Binary(Object, "distancesqr", Array, Number, "Computes the distance square between two objects or positions."),
    Binary(Object, "distancesqr", Object, Number, "Computes the distance square between two objects or positions."),
    Binary(Object, "doartilleryfire", Array, Nothing, "Orders a unit to reaload defined magazine commence fire burst on the given position (silently)."),
    Binary(Object, "dofire", Object, Nothing, "Orders a unit to commence firing on the given target (silently). If the target is objNull, the unit is ordered to commence firing on its current target (set using doTarget or commandTarget)."),
    Binary(Object, "dofollow", Object, Nothing, "Orders a unit to follow the given unit (silently)."),
    Binary(Object, "dofsm", Array, Nothing, "Orders a unit to process command defined by FSM file (silently)."),
    Binary(Object, "domove", Array, Nothing, "Orders the unit to move to the given position (format <ar>Position</ar>) (silently)."),
    Binary(Object, "doorphase", String, Number, "Return animation phase of door on vehicle."),
    Binary(Object, "dosuppressivefire", Array, Nothing, "Orders a unit to suppress given position or target (silently)."),
    Binary(Object, "dosuppressivefire", Object, Nothing, "Orders a unit to suppress given position or target (silently)."),
    Binary(Object, "dotarget", Object, Nothing, "Orders the unit to target the given target (silently)."),
    Binary(Object, "dowatch", Array, Nothing, "Orders the unit to watch the given position (format <ar>Position</ar>) (silently)."),
    Binary(Object, "dowatch", Object, Nothing, "Orders the unit to watch the given target (silently)."),
    Binary(Object, "elevateperiscope", Array, Nothing, "Elevates vehicle's periscope on given turret."),
    Binary(Object, "emptypositions", String, Number, "Returns the number of available cargo, driver, gunner or commander positions in the vehicle."),
    Binary(Object, "enableai", String, Nothing, "Enables parts of the AI behaviour. Section is one of \"TARGET\" (enables watching assigned targets), \"AUTOTARGET\" (enables independed target assigning and watching of unknown targets), \"MOVE\" (enables movement), \"SUPPRESSION\" (enables suppression being accumulated out of danger events), \"AIMINGERROR\" (enables distractions on aiming), \"CHECKVISIBLE\" (enables visibility raycasts), \"COVER\" (enable usage of cover), \"AUTOCOMBAT\" (enable autonomous switching to combat mode)"),
    Binary(Object, "enableaifeature", Array, Nothing, "Enable/disable given AI behaviour (alias of enableAI/disableAI)"),
    Binary(Object, "enableaimprecision", Boolean, Nothing, "Set whether animation's aim precision affects weapon sway."),
    Binary(Object, "enableattack", Boolean, Nothing, "Set if leader can issue attack commands."),
    Binary(Object, "enableautostartuprtd", Boolean, Nothing, "enables automatic start up action,"),
    Binary(Object, "enableautotrimrtd", Boolean, Boolean, "eanbles autoTrim"),
    Binary(Object, "enablecollisionwith", Object, Nothing, "Enable collision between vehicles."),
    Binary(Object, "enablecopilot", Boolean, Nothing, "Enables copilot actions."),
    Binary(Object, "enabledirectionstabilization", Array, Nothing, "Enables/disables direction stabilization for selected turret. Works only for turrets which have directionStabilized enabled in their view modes config."),
    Binary(Object, "enabledynamicsimulation", Boolean, Nothing, "Enables or disables dynamic simulation on given non ai object."),
    Binary(Object, "enablefatigue", Boolean, Nothing, "[deprecated] Replaced by enableStamina"),
    Binary(Object, "enablegunlights", String, Nothing, "Tells AI units to force the gun light on (forceOn), off (forceOff) or set it automatically when in combat mode (auto)"),
    Binary(Object, "enableinfopanelcomponent", Array, Boolean, "Controls availability of component to given object's info panel. \"left\" or \"right\" constants can be used as panel names."),
    Binary(Object, "enableirlasers", Boolean, Nothing, "Enable/disable using IR lasers for AI"),
    Binary(Object, "enablemimics", Boolean, Nothing, "Enables/disables mimics on a given unit"),
    Binary(Object, "enablepersonturret", Array, Nothing, "Enables/disables usage of PersonTurret"),
    Binary(Object, "enablereload", Boolean, Nothing, "Enable / disable reload right after magazine is empty."),
    Binary(Object, "enableropeattach", Boolean, Nothing, "Enable / disable ability to attach ropes or to be attached to ropes for given vehicle"),
    Binary(Object, "enablesimulation", Boolean, Nothing, "Enable / disable simulation for given entity."),
    Binary(Object, "enablesimulationglobal", Boolean, Nothing, "Enable / disable simulation for given entity globally. Only from server"),
    Binary(Object, "enablestamina", Boolean, Nothing, "Enable/disable stamina system"),
    Binary(Object, "enableuavconnectability", Array, Nothing, "enable unit's AV terminal(s) connecting to UAV"),
    Binary(Object, "enableuavwaypoints", Boolean, Nothing, "Enable/disable option to set waypoints for UAV unit in AV terminal"),
    Binary(Object, "enablevehiclecargo", Boolean, Nothing, "Enable/disable option to transport other vehicles (if configured) or be transported."),
    Binary(Object, "enablevehiclesensor", Array, Nothing, "enable/disable given sensor"),
    Binary(Object, "enableweapondisassembly", Boolean, Nothing, "Controls player ability to disassemble given object"),
    Binary(Object, "engineon", Boolean, Nothing, "Switches the vehicle's engine on (true) or off (false)."),
    Binary(Object, "findcover", Array, Object, "Returns the object where the object should search for cover. The minDist, visibilityPosition and ignoreObject parameters are optional. visibilityPosition is used to select cover that can see a certain position. ignoreObject is an object that is ignored in visibility check."),
    Binary(Object, "findnearestenemy", Array, Object, "Find the nearest enemy from the specified position."),
    Binary(Object, "findnearestenemy", Object, Object, "Find the nearest enemy from the specified position."),
    Binary(Object, "fire", Array, Nothing, "The unit will fire from the given weapon. The array has format [muzzle, mode, magazine] or [muzzle, mode]."),
    Binary(Object, "fire", String, Nothing, "The unit will fire from the given weapon."),
    Binary(Object, "fireattarget", Array, Boolean, "Gunner in unit's vehicle fire at given target. If weapon is not given, current is used."),
    Binary(Object, "flyinheight", Number, Nothing, "Sets the height level for the helicopter. The accepted range is from 50 to 1000. Final height is max(flyInHeight, flyInHeightASL)."),
    Binary(Object, "flyinheightasl", Array, Nothing, "Sets the minimal ASL height. Final height is max(flyInHeight, flyInHeightASL)."),
    Binary(Object, "forceadduniform", String, Nothing, "Create a new uniform and hard link it into uniform slot(without any restrictions)."),
    Binary(Object, "forceflagtexture", String, Nothing, "force the flag texture., doesn't reqquire flag holder. If the texture is \"\", the flag is not drawn. Warning: flags are not performance friendly, use them wisely."),
    Binary(Object, "forcefollowroad", Boolean, Nothing, "Sets the vehicle to always stays on the road."),
    Binary(Object, "forcespeed", Number, Nothing, "Force the speed of the given object."),
    Binary(Object, "forcewalk", Boolean, Nothing, "Force player to walk."),
    Binary(Object, "forceweaponfire", Array, Nothing, "The unit will be forced to fire from the given weapon."),
    Binary(Object, "forgettarget", Object, Nothing, "Reset info group has about target."),
    Binary(Object, "get3denattribute", String, Array, "Reads attribute value from given object."),
    Binary(Object, "getartilleryeta", Array, Number, "Get ETA in seconds for given artillery unit, it's magazineType and target position. Returns negative value if fire is not possible."),
    Binary(Object, "getcargoindex", Object, Number, "Returns the index of the unit in Cargo"),
    Binary(Object, "getcompatiblepylonmagazines", Number, Array, "return list of compatible magazines, number > 0 or class name for one given pylon, or 0 for array of all pylons together"),
    Binary(Object, "getcompatiblepylonmagazines", String, Array, "return list of compatible magazines, number > 0 or class name for one given pylon, or 0 for array of all pylons together"),
    Binary(Object, "getdir", Array, Number, "Returns azimuth from obj1 to obj2"),
    Binary(Object, "getdir", Object, Number, "Returns azimuth from obj1 to obj2"),
    Binary(Object, "getdirvisual", Array, Number, "Returns azimuth from obj1 to obj2 in render state"),
    Binary(Object, "getdirvisual", Object, Number, "Returns azimuth from obj1 to obj2 in render state"),
    Binary(Object, "getenv3dsoundcontroller", String, Number, "Returns specified 3D controller value for the given environmental object"),
    Binary(Object, "geteventhandlerinfo", Array, Array, "Returns event handler info in the following format: [exists, islast, total]"),
    Binary(Object, "gethidefrom", Object, Array, "Returns the hiding position in format <ar>Position</ar>. If enemy is null it is the some position in front of the object or enemy position otherwise."),
    Binary(Object, "gethit", String, Number, "Return current level of damage for a specific selection."),
    Binary(Object, "gethitindex", Number, Number, "Return current level of damage for a specific Hit Point (specified by its hit part index). All hit points can be obtained with getAllHitPointsDamage command."),
    Binary(Object, "gethitpointdamage", String, Number, "Return current level of damage for a specific Hit Point (specified by its config class)."),
    Binary(Object, "getopticsmode", Number, String, "Returns current optics mode class name of a unit's weapon."),
    Binary(Object, "getpos", Array, Array, "Returns position at given distance and azimuth from current object or position"),
    Binary(Object, "getreldir", Array, Number, "Returns relative direction from obj1 to obj2"),
    Binary(Object, "getreldir", Object, Number, "Returns relative direction from obj1 to obj2"),
    Binary(Object, "getrelpos", Array, Array, "Returns position at given distance and relative direction from current object"),
    Binary(Object, "getsoundcontroller", String, Number, "Return specified controller value"),
    Binary(Object, "getsoundcontrollerresult", Config, Number, "Calculate expression value"),
    Binary(Object, "getspeed", String, Number, "Get the speed for the given speed mode. SpeedMode can be: \"AUTO\",\"SLOW\",\"NORMAL\",\"FAST\"."),
    Binary(Object, "getturretlimits", Array, Array, "Returns turn and elevation limits for given turret"),
    Binary(Object, "getturretopticsmode", Array, Nothing, "Sets the current optics mode of the turret occupied by the unit."),
    Binary(Object, "getunittrait", String, Boolean, "Gets trait from given soldier"),
    Binary(Object, "getunittrait", String, Nothing, "Gets trait from given soldier"),
    Binary(Object, "getunittrait", String, Number, "Gets trait from given soldier"),
    Binary(Object, "getvariable", Array, Anything, "Return the value of variable in the variable space of given object. If not found, default value is returned."),
    Binary(Object, "getvariable", String, Anything, "Return the value of variable in the variable space of given object."),
    Binary(Object, "glanceat", Array, Nothing, "Control what the unit is glancing at (target or position) (format <ar>Position</ar>)"),
    Binary(Object, "glanceat", Object, Nothing, "Control what the unit is glancing at (target or position) (format <ar>Position</ar>)"),
    Binary(Object, "globalchat", String, Nothing, "Types text to the global radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Binary(Object, "globalradio", String, Nothing, "Sends the message to the global radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Object, "groupchat", String, Nothing, "Types text to the group radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Binary(Object, "groupradio", String, Nothing, "Sends the message to the group radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Object, "groupselectunit", Array, Nothing, "Select unit from unit's group."),
    Binary(Object, "hasweapon", String, Boolean, "Checks whether the unit has the given weapon."),
    Binary(Object, "hcgroupparams", Group, Array, "Returns parameters describing group in high command bar. Return value is [string,float[4]]"),
    Binary(Object, "hcremovegroup", Group, Nothing, "Removes group from unit's high command bar."),
    Binary(Object, "hcselectgroup", Array, Nothing, "Select given group in HC bar."),
    Binary(Object, "hcsetgroup", Array, Nothing, "Add group to unit's high command bar. Array parameters are group, group name and team (teammain, teamred, teamgreen, teamblue, teamyellow) . Group is the only necessary parameter."),
    Binary(Object, "hideobject", Boolean, Nothing, "Hide object (cannot hide static objects)."),
    Binary(Object, "hideobjectglobal", Boolean, Nothing, "Hide object (cannot hide static objects)."),
    Binary(Object, "hideselection", Array, Nothing, "Hides or enables the given selection of the object."),
    Binary(Object, "in", Object, Boolean, "Checks whether the soldier is mounted in the vehicle."),
    Binary(Object, "inarea", Array, Boolean, "Checks whether the position is in area defined by array"),
    Binary(Object, "inarea", Location, Boolean, "Checks whether the object is in location area"),
    Binary(Object, "inarea", Object, Boolean, "Checks whether the position is in trigger area"),
    Binary(Object, "inarea", String, Boolean, "Checks whether the position is in marker area"),
    Binary(Object, "inflame", Boolean, Nothing, "Controls fireplace buring. Set to true to inflame the fireplace."),
    Binary(Object, "infopanelcomponentenabled", Array, Boolean, "Returns availability state of component to given object's info panel. \"left\" or \"right\" constants can be used as panel names."),
    Binary(Object, "infopanelcomponents", String, Array, "Returns list of panels in given vehicle."),
    Binary(Object, "isflashlighton", String, Boolean, "Return if there is a linked and enabled flashlight on a given weapon."),
    Binary(Object, "isirlaseron", String, Boolean, "Returns if there is a linked and enabled IR on a given weapon."),
    Binary(Object, "iskindof", String, Boolean, "Checks whether the object is of the given type."),
    Binary(Object, "islaseron", Array, Boolean, "Returns true if vehicle have laser turned on the given turret."),
    Binary(Object, "issensortargetconfirmed", Side, Boolean, "Returns if given unit is confirmed enemy target for given side"),
    Binary(Object, "isuavconnectable", Array, Boolean, "return true, if UAV is connectable by AV terminal(s)"),
    Binary(Object, "isuniformallowed", String, Boolean, "Check whether given uniform can be dressed by target soldier."),
    Binary(Object, "isvehiclesensorenabled", String, Array, "returns class name (to identify list based on component name) and info if given sensor is enabled"),
    Binary(Object, "joinas", Array, Nothing, "Joins the unit to the given group, if position id is available, this one is used."),
    Binary(Object, "joinassilent", Array, Nothing, "Joins the unit to the given group, if position id is available, this one is used. Avoid any radio communication related to joining."),
    Binary(Object, "kbadddatabase", String, Boolean, "Register knowledge base database to given person."),
    Binary(Object, "kbadddatabasetargets", String, Boolean, "Register target list knowledge base database to given person."),
    Binary(Object, "kbaddtopic", Array, Nothing, "Register conversation topic to given person."),
    Binary(Object, "kbhastopic", String, Boolean, "Check if conversation topic was registered to given person."),
    Binary(Object, "kbreact", Array, Nothing, "Pass a non-verbal communication to the receiver."),
    Binary(Object, "kbremovetopic", String, Nothing, "Unregister conversation topic from given person."),
    Binary(Object, "kbtell", Array, Nothing, "Make the person tell to the receiver the sentence. Last parameter can be false/true to force radio channel selection, or number 1..10 to force possible CustomChannel, or radio channel name 'GLOBAL','SIDE','GROUP','VEHICLE','DIRECT','COMMAND'."),
    Binary(Object, "kbwassaid", Array, Boolean, "Check if given item was said by person to someone."),
    Binary(Object, "knowsabout", Object, Number, "Checks whether the unit knows about the target (and how much). If the unit is a vehicle, the vehicle commander is considered instead."),
    Binary(Object, "land", String, Nothing, "Forces a helicopter landing. The landing mode may be \"LAND\" (a complete stop), \"GET IN\" (hovering very low for another unit to get in), \"GET OUT\" (hovering low for another unit to get out) or \"NONE\" (cancel landing)."),
    Binary(Object, "landat", Number, Nothing, "Order AI airplane to land at given airport"),
    Binary(Object, "landat", Object, Nothing, "Order AI airplane to land at given airport"),
    Binary(Object, "lasertarget", Array, Object, "Returns target created by gunner in given vehicle on the given turret."),
    Binary(Object, "leavevehicle", Object, Nothing, "Ceases the using of the vehicle in the group. It unassigns all grouped units from the vehicle."),
    Binary(Object, "lightattachobject", Array, Nothing, "Attach light to given object (at given position)."),
    Binary(Object, "limitspeed", Number, Nothing, "Limit speed of given vehicle to given value (in km/h)."),
    Binary(Object, "linkitem", String, Nothing, "Create and assign new item to the soldier's body.(NVG, radio, ...)"),
    Binary(Object, "loadidentity", String, Boolean, "Loads person's identity from objects.sav file in campaign directory (from entry name)."),
    Binary(Object, "loadmagazine", Array, Nothing, "Initiates the loading action on active weapon of the given turret."),
    Binary(Object, "loadstatus", String, Boolean, "Loads object's properties from objects.sav file in campaign directory (from entry name)."),
    Binary(Object, "lock", Boolean, Nothing, "Locks the vehicle (disables mounting / dismounting) for the player."),
    Binary(Object, "lock", Number, Nothing, "Locks the vehicle (disables mounting / dismounting) for the player. 0 - Unlocked, 1 - Default, 2 - Locked, 3 - Locked for player"),
    Binary(Object, "lockcamerato", Array, Nothing, "Lock/unlock camera to target"),
    Binary(Object, "lockcargo", Array, Nothing, "Lock the cargo position of the vehicle."),
    Binary(Object, "lockcargo", Boolean, Nothing, "Lock the all cargo positions of the vehicle."),
    Binary(Object, "lockdriver", Boolean, Nothing, "Lock the driver position of the vehicle."),
    Binary(Object, "lockedcamerato", Array, Array, "Returns current camera lock target"),
    Binary(Object, "lockedcamerato", Array, Nothing, "Returns current camera lock target"),
    Binary(Object, "lockedcamerato", Array, Object, "Returns current camera lock target"),
    Binary(Object, "lockedcargo", Number, Boolean, "Check whether cargo position of the vehicle is locked."),
    Binary(Object, "lockedturret", Array, Boolean, "Check whether gunner position of the vehicle turret is locked."),
    Binary(Object, "lockinventory", Boolean, Nothing, "Locks vehicle inventory, making it unaccessible."),
    Binary(Object, "lockturret", Array, Nothing, "Lock the gunner position of the vehicle turret."),
    Binary(Object, "lockwp", Boolean, Nothing, "Disables switching to the next waypoint (the current waypoint will never complete while lockWp is used). This is sometimes used during cut-scenes."),
    Binary(Object, "lookat", Array, Nothing, "Control what the unit is looking at (target or position) (format <ar>Position</ar>)"),
    Binary(Object, "lookat", Object, Nothing, "Control what the unit is looking at (target or position) (format <ar>Position</ar>)"),
    Binary(Object, "magazinesturret", Array, Array, "Returns all magazines of given turret. Use turret path [-1] for drivers turret."),
    Binary(Object, "magazineturretammo", Array, Number, "Returns ammo count of given type from given turret."),
    Binary(Object, "minedetectedby", Side, Boolean, "Returns true if mine is detected by given side"),
    Binary(Object, "modeltoworld", Array, Array, "Converts position from object model space to world space."),
    Binary(Object, "modeltoworldvisual", Array, Array, "Converts position from object model space to world space in render time."),
    Binary(Object, "modeltoworldvisualworld", Array, Array, "Converts position from object model space to world space in render time."),
    Binary(Object, "modeltoworldworld", Array, Array, "Converts position from object model space to world space (usable by setPosWorld for example)."),
    Binary(Object, "move", Array, Nothing, "Creates a move waypoint on the given position (format <ar>Position</ar>) and makes it the currently active group waypoint."),
    Binary(Object, "moveinany", Object, Boolean, "Attemps to move unit in any free position in vehicle"),
    Binary(Object, "moveincargo", Array, Nothing, "Moves the soldier into a vehicle's specified cargo position. (Immediately, without animation)."),
    Binary(Object, "moveincargo", Object, Nothing, "Moves the soldier into the vehicle's cargo position. (Immediately, without animation)."),
    Binary(Object, "moveincommander", Object, Nothing, "Moves the soldier into the vehicle's commander position. (Immediatetely, without animation)."),
    Binary(Object, "moveindriver", Object, Nothing, "Moves the soldier into the vehicle's driver position. (Immediately, without animation)."),
    Binary(Object, "moveingunner", Object, Nothing, "Moves the soldier into the vehicle's gunner position. (Immediately, without animation)."),
    Binary(Object, "moveinturret", Array, Nothing, "Moves the soldier into the vehicle's turret. (Immediately, without animation)."),
    Binary(Object, "moveout", Object, Nothing, "Moves out person (dead or alive) from the given vehicle"),
    Binary(Object, "moveto", Array, Nothing, "Low level command to person to move to given position."),
    Binary(Object, "nearentities", Array, Array, "Find entities in the circle with given radius. If typeName(s) is (are) given, only entities of given type (or its subtype) are listed."),
    Binary(Object, "nearentities", Number, Array, "Find entities in the circle with given radius. If typeName(s) is (are) given, only entities of given type (or its subtype) are listed."),
    Binary(Object, "nearobjects", Array, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Object, "nearobjects", Number, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Object, "nearobjectsready", Number, Boolean, "Check whether all data are loaded to nearObjects will return in reasonable time."),
    Binary(Object, "nearroads", Number, Array, "Find the road segments within the circle of given radius."),
    Binary(Object, "nearsupplies", Array, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Object, "nearsupplies", Number, Array, "Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed."),
    Binary(Object, "neartargets", Number, Array, "Check target database of the unit for all targets in max. distance radius around it. The output is list of items: [position, type, side, subj. cost, object]"),
    Binary(Object, "periscopeelevation", Array, Nothing, "Returns vehicle's periscope elevation of given turret"),
    Binary(Object, "playaction", String, Nothing, "When used on a person, a smooth transition to the given action will be initiated."),
    Binary(Object, "playactionnow", String, Nothing, "When used on a person, a smooth transition to the given action will be initiated, but all previous playAction are discarded."),
    Binary(Object, "playgesture", String, Nothing, "When used on a person, a smooth transition to the given move will be initiated."),
    Binary(Object, "playmove", String, Nothing, "When used on a person, a smooth transition to the given move will be initiated."),
    Binary(Object, "playmovenow", String, Nothing, "When used on a person, a smooth transition to the given move will be initiated, but all previous playAction are discarded."),
    Binary(Object, "reload", Array, Boolean, "Reloads given muzzle wih given magazine"),
    Binary(Object, "remotecontrol", Object, Nothing, "Switch on remote control of the unit."),
    Binary(Object, "removeaction", Number, Nothing, "Removes the action with the given id."),
    Binary(Object, "removealleventhandlers", String, Nothing, "Removes all event handlers of the given type which were added by <f>addEventHandler</f>."),
    Binary(Object, "removeallmpeventhandlers", String, Nothing, "Removes all MP event handlers of the given type which were added by <f>addMPEventHandler</f>."),
    Binary(Object, "removebinocularitem", String, Nothing, "Removes given item from the binocular weapon cargo space."),
    Binary(Object, "removecuratoraddons", Array, Nothing, "Restrict curator use of given addon."),
    Binary(Object, "removecuratorcameraarea", Number, Nothing, "Removes curator camera area"),
    Binary(Object, "removecuratoreditableobjects", Array, Nothing, "Unregister objects which can be edited by a curator."),
    Binary(Object, "removecuratoreditingarea", Number, Nothing, "Removes editing area for given curator"),
    Binary(Object, "removediaryrecord", Array, Nothing, "Remove a log record."),
    Binary(Object, "removediarysubject", String, Nothing, "Remove a subject from a log."),
    Binary(Object, "removeeventhandler", Array, Nothing, "Removes event handler added by <f>addEventHandler</f>. Format of handler is [type,index]. Index is returned by addEventHandler. When any handler is removed, all handler indices higher that the deleted one should be decremented."),
    Binary(Object, "removehandgunitem", String, Nothing, "Removes given item from the weapon cargo space."),
    Binary(Object, "removeitem", String, Nothing, "Remove item from the inventory."),
    Binary(Object, "removeitemfrombackpack", String, Nothing, "Remove item from soldier's uniform."),
    Binary(Object, "removeitemfromuniform", String, Nothing, "Remove item from soldier's uniform."),
    Binary(Object, "removeitemfromvest", String, Nothing, "Remove item from soldier's uniform."),
    Binary(Object, "removeitems", String, Nothing, "Remove all items with given template from the inventory."),
    Binary(Object, "removemagazine", Array, Nothing, "Removes the magazine from the unit. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removemagazine", String, Nothing, "Removes the magazine from the unit. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removemagazineglobal", String, Nothing, "Removes the magazine from the unit. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removemagazines", String, Nothing, "Removes all magazines of the given type from the unit. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removemagazinesturret", Array, Nothing, "Removes all magazines of the given type from the unit. Use turret path [-1] for driver's turret. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removemagazineturret", Array, Nothing, "Removes the magazine from the turret. Use turret path [-1] for driver's turret.  Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removempeventhandler", Array, Nothing, "Removes MP event handler added by <f>addMPEventHandler</f>. Format of handler is [type,index]. Index is returned by addMPEventHandler. When any handler is removed, all handler indices higher that the deleted one should be decremented."),
    Binary(Object, "removeownedmine", Object, Nothing, "Remove ownership over a remotely detonatable mine from the unit."),
    Binary(Object, "removeprimaryweaponitem", String, Nothing, "Removes given item from the weapon cargo space."),
    Binary(Object, "removesecondaryweaponitem", String, Nothing, "Removes given item from the weapon cargo space."),
    Binary(Object, "removesimpletask", Task, Nothing, "Remove a simple task from the list of simple tasks."),
    Binary(Object, "removeweapon", String, Nothing, "Removes the weapon from the unit. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removeweaponattachmentcargo", Array, Nothing, "Remove attachment linked to a weapon from the vehicle cargo space."),
    Binary(Object, "removeweaponcargo", Array, Nothing, "Remove weapon from the vehicle cargo space."),
    Binary(Object, "removeweaponglobal", String, Nothing, "Removes the weapon from the unit. Note: you may create invalid combinations by using this function. When doing so, application behaviour is undefined."),
    Binary(Object, "removeweaponturret", Array, Nothing, "Removes the weapon from the given vehicle's turret. "),
    Binary(Object, "respawnvehicle", Array, Nothing, "Set vehicle as respawnable in MP games. Delay is respawn delay, default respawnDelay from description.ext is used. Count tells how many respawns is processed (default unlimited)."),
    Binary(Object, "reveal", Array, Nothing, "Reveals the unit to the group. It does not matter whether the group can know about the unit or not."),
    Binary(Object, "reveal", Object, Nothing, "Reveals the unit to the group. It does not matter whether the group can know about the unit or not."),
    Binary(Object, "ropeattachto", Object, Nothing, "Attach vehicle to rope with optional offset"),
    Binary(Object, "ropedetach", Object, Nothing, "Detach vehicle from rope"),
    Binary(Object, "saveidentity", String, Boolean, "Saves person's identity to objects.sav file in campaign directory as entry name."),
    Binary(Object, "savestatus", String, Boolean, "Saves object's properties to objects.sav file in campaign directory as entry name."),
    Binary(Object, "say", Array, Nothing, "The format of speechName is [sound, maxTitlesDistance] or [sound, maxTitlesDistance, speed]. The unit will play the given sound. If the unit is a person, it will also pefrorm the corresponding lipsync effect. If the camera is not withing the given range, the title is not shown. The sound is defined in the description.ext file.  If target is given, titles will be written to the conversation history."),
    Binary(Object, "say", String, Nothing, "The unit will play the given sound. If the unit is a person, it will also pefrorm the corresponding lipsync effect. The sound is defined in the description.ext file. If target is given, titles will be written to the conversation history."),
    Binary(Object, "say2d", Array, Nothing, "Functionally same as Say, only difference is sound played as 2D (mono) allways."),
    Binary(Object, "say2d", String, Nothing, "Functionally same as Say, only difference is sound played as 2D (mono) allways."),
    Binary(Object, "say3d", Array, Object, "Functionally same as Say, only difference is sound played as 3D allways."),
    Binary(Object, "say3d", String, Object, "Functionally same as Say, only difference is sound played as 3D allways."),
    Binary(Object, "selectdiarysubject", String, Boolean, "Selects the subject page in a log."),
    Binary(Object, "selectionnames", Number, Array, "returns list of modelSelections on the defined LOD resolution"),
    Binary(Object, "selectionnames", String, Array, "returns list of modelSelections on the defined LOD resolution"),
    Binary(Object, "selectionposition", Array, Array, "Searches for selection in the object model in the given LOD level of object model (Memory, Geometry, FireGeometry, LandContact, HitPoints, ViewGeometry) or by LOD resolution. Returns position in model space."),
    Binary(Object, "selectionposition", String, Array, "Searches for selection in the object model (first in the memory level, then in other levels). Returns position in model space."),
    Binary(Object, "selectionvectordirandup", Array, Array, "Searches for selection in the object model in the given LOD level of object model (Memory, Geometry, FireGeometry, LandContact, HitPoints, ViewGeometry) or by LOD resolution. Returns Direction and Up Vector in model space."),
    Binary(Object, "selectweapon", Array, Boolean, "Selects the given weapon, muzzle and firemode"),
    Binary(Object, "selectweapon", Array, Nothing, "Selects the given weapon, muzzle and firemode"),
    Binary(Object, "selectweapon", String, Nothing, "Selects the given weapon.
For weapon values see <cl>CfgWeapons</cl>."),
    Binary(Object, "selectweaponturret", Array, Nothing, "Selects the given weapon on specified turret"),
    Binary(Object, "sendsimplecommand", String, Nothing, "Sends a simple command to the vehicle's driver / gunner."),
    Binary(Object, "setactualcollectivertd", Number, Nothing, "Set wanted RPM of given motor, use index -1 for all motors."),
    Binary(Object, "setairplanethrottle", Number, Nothing, "Set wanted throttle position, works only on player's vehicle."),
    Binary(Object, "setairportside", Side, Nothing, "Set owner of the airport"),
    Binary(Object, "setammo", Array, Nothing, "Set how many shots the unit has left for the loaded magazine in the given weapon type."),
    Binary(Object, "setammocargo", Number, Nothing, "Sets the amount of ammo resources in the cargo space of a repair vehicle. Ammo resources are used to resupply vehicles; soldiers use individual magazines instead. An amount of one indicates a full cargo."),
    Binary(Object, "setammoonpylon", Array, Nothing, "set count of ammo in magazine on pylon"),
    Binary(Object, "setanimspeedcoef", Number, Nothing, "Sets a coefficient for animation speed"),
    Binary(Object, "setautonomous", Boolean, Boolean, "Set UAV autonomous mode."),
    Binary(Object, "setbehaviour", String, Nothing, "Sets the group behaviour mode. Behaviour is one of: \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\"."),
    Binary(Object, "setbehaviourstrong", String, Nothing, "Sets the group units behaviour mode and forces group behaviour to same value. Behaviour is one of: \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\"."),
    Binary(Object, "setbleedingremaining", Number, Nothing, "Sets bleeding time remaining."),
    Binary(Object, "setbrakesrtd", Array, Nothing, "Set brakes. If value 1.0f, brakes are on,   If value 0.0f,  brakes are off. index = 1 - left; index = 2 - right; index = 3 - both sides"),
    Binary(Object, "setcamerainterest", Number, Nothing, "Set camera interest for given entity."),
    Binary(Object, "setcaptive", Boolean, Nothing, "Marks the unit as captive. If the unit is a vehicle, the vehicle commander is marked instead.
A captive is neutral to everyone.
Note: This function does not remove the unit's weapons."),
    Binary(Object, "setcaptive", Number, Nothing, "Marks the unit as captive. If the unit is a vehicle, the vehicle commander is marked instead.
A captive is neutral to everyone.
Note: This function does not remove the unit's weapons."),
    Binary(Object, "setcenterofmass", Array, Nothing, "Changes the center of mass of an object smoothly during the given time (in seconds). A time of zero means an immediate change."),
    Binary(Object, "setcollisionlight", Boolean, Nothing, "Sets vehicle collision lights(true-on, false-off)."),
    Binary(Object, "setcombatbehaviour", String, Nothing, "Sets the given unit's combat behaviour mode. Behaviour is one of: \"CARELESS\", \"SAFE\", \"AWARE\", \"COMBAT\" or \"STEALTH\"."),
    Binary(Object, "setcombatmode", String, Nothing, "Sets the group's combat mode (engagement rules). Mode can be one of: \"BLUE\" (Never fire), \"GREEN\" (Hold fire - defend only), \"WHITE\" (Hold fire, engage at will), \"YELLOW\" (Fire at will) or \"RED\" (Fire at will, engage at will)."),
    Binary(Object, "setconvoyseparation", Number, Nothing, "Sets the distance to keep to following vehicle."),
    Binary(Object, "setcruisecontrol", Array, Nothing, "Sets the vehicles speed limiter/cruise control parameters"),
    Binary(Object, "setcuratorcameraareaceiling", Number, Nothing, "Sets maximal height where curator can fly"),
    Binary(Object, "setcuratorcoef", Array, Nothing, "Sets coef for some action (coef have to be bigger than -1 000 000 anything lower is considered as disabled action)"),
    Binary(Object, "setcuratoreditingareatype", Boolean, Nothing, "Set curator areas to act like whitelist(true)/blacklist(false)."),
    Binary(Object, "setcuratorwaypointcost", Number, Nothing, "Sets price for waypoint placement."),
    Binary(Object, "setcurrenttask", Task, Nothing, "Set the task as a current task of the person."),
    Binary(Object, "setcustomaimcoef", Number, Nothing, "Set custom aim precision coefficient for weapon sway"),
    Binary(Object, "setcustomweightrtd", Number, Nothing, "Add weight to helicopter."),
    Binary(Object, "setdamage", Array, Nothing, "Damages / repairs the object. Damage 0 means the object is fully functional, damage 1 means it's completely destroyed / dead."),
    Binary(Object, "setdamage", Number, Nothing, "Damages / repairs the object. Damage 0 means the object is fully functional, damage 1 means it's completely destroyed / dead."),
    Binary(Object, "setdammage", Number, Nothing, "See 'setDamage'"),
    Binary(Object, "setdestination", Array, Nothing, "Set the destination for path planning of the pilot."),
    Binary(Object, "setdiaryrecordtext", Array, Nothing, "Set text of a log record."),
    Binary(Object, "setdiarysubjectpicture", Array, Nothing, "Sets diary subject picture."),
    Binary(Object, "setdir", Number, Nothing, "Sets the object heading. The accepted heading range is from 0 to 360."),
    Binary(Object, "setdriveonpath", Array, Nothing, "Sets the path to follow for AI driver"),
    Binary(Object, "setdropinterval", Number, Nothing, "Set interval of emitting particles from particle source."),
    Binary(Object, "seteffectcondition", String, Nothing, "The statement is executed when the trigger or waypoint is activated and the effects are launched depending on the result. If the result is a boolean and true, the effect was launched. If the result is an object, the effect was launched if the result is the player or the player vehicle. If the result is an array, the effect was launched if the result contains the player or the player vehicle."),
    Binary(Object, "seteffectivecommander", Object, Nothing, "Sets effectiveCommander of the vehicle"),
    Binary(Object, "setenginerpmrtd", Array, Nothing, "Set engines rpm. Index = -1 for all."),
    Binary(Object, "setface", String, Nothing, "Sets the person's face."),
    Binary(Object, "setfaceanimation", Number, Nothing, "Sets the facial animation phase (eye blinking). Blink is in the range from 0 to 1."),
    Binary(Object, "setfatigue", Number, Nothing, "Sets the person's relative [0..1] exhaustion (changes stamina accordingly)."),
    Binary(Object, "setfeaturetype", Number, Boolean, "Enable/disable object as a feature/landmark. 0 - disable, 1 - object is always visible to object view distance, 2 - objects is visible to terrain view distance, limit is 500 map/static object and 200 dynamic objects including config features and auto features (flying helicopters, airplanes), when limit is reached function return false"),
    Binary(Object, "setflaganimationphase", Number, Nothing, "Animates flag"),
    Binary(Object, "setflagowner", Object, Nothing, "Sets the flag owner. When the owner is set to objNull, the flag is returned to the flagpole."),
    Binary(Object, "setflagside", Side, Nothing, "Sets the flag side."),
    Binary(Object, "setflagtexture", String, Nothing, "Sets the flag texture. If the texture is \"\", the flag is not drawn. Warning: flags are not performance friendly, use them wisely."),
    Binary(Object, "setformation", String, Nothing, "Sets the group formation. Formation is one of: \"COLUMN\", \"STAG COLUMN\", \"WEDGE\", \"ECH LEFT\", \"ECH RIGHT\", \"VEE\" or \"LINE\"."),
    Binary(Object, "setformationtask", String, Nothing, "Set the current task of the formation member."),
    Binary(Object, "setformdir", Number, Nothing, "Sets the formation heading. The accepted heading range is from 0 to 360. The formation is facing this direction unless an enemy is seen. When the group is moving, this value is overridden by the movement direction."),
    Binary(Object, "setfuel", Number, Nothing, "Sets the fuel amount. A fuel level of one is a full gas tank."),
    Binary(Object, "setfuelcargo", Number, Nothing, "Sets the fuel amount in the cargo space of a refuelling vehicle. A fuel level of one is a full gas tank."),
    Binary(Object, "setgroupid", Array, Nothing, "Sets the group identity. nameFormat contains strings \"%CLASS_NAME\" where CLASS_NAME is name of class in CfgWorlds, parameters are names of subclasses of CLASS_NAME with the description of the name subpart."),
    Binary(Object, "setgroupidglobal", Array, Nothing, "Sets the group identity and synchronizes it over the network. NameFormat contains strings \"%CLASS_NAME\" where CLASS_NAME is name of class in CfgWorlds, parameters are names of subclasses of CLASS_NAME with the description of the name subpart."),
    Binary(Object, "sethidebehind", Array, Nothing, "It sets the data for hiding. ObjectWhereHide can be taken using findCover. HidePosition can be taken using getHideFrom."),
    Binary(Object, "sethit", Array, Nothing, "Damage / repair part of object. Damage 0 means fully functional, damage 1 means completely destroyed / dead."),
    Binary(Object, "sethitindex", Array, Nothing, "Damage / repair part of object. Damage 0 means fully functional, damage 1 means completely destroyed / dead."),
    Binary(Object, "sethitpointdamage", Array, Nothing, "Damage / repair part of object. Damage 0 means fully functional, damage 1 means completely destroyed / dead. Use name of hit point."),
    Binary(Object, "setidentity", String, Nothing, "Sets the identity of a person. Identities are defined in the descripion.ext file of the mission or campaign."),
    Binary(Object, "setlightambient", Array, Nothing, "Set ambient color of light."),
    Binary(Object, "setlightattenuation", Array, Nothing, "Set attenuation of light."),
    Binary(Object, "setlightbrightness", Number, Nothing, "Set brightness of light."),
    Binary(Object, "setlightcolor", Array, Nothing, "Set diffuse color of light."),
    Binary(Object, "setlightconepars", Array, Nothing, "Set the directional light's cone parameters."),
    Binary(Object, "setlightdaylight", Boolean, Nothing, "Sets if light can be used during day."),
    Binary(Object, "setlightflaremaxdistance", Number, Nothing, "Sets max distance where the flare is visible."),
    Binary(Object, "setlightflaresize", Number, Nothing, "Sets relative size of the flare for the light."),
    Binary(Object, "setlightintensity", Number, Nothing, "Set intensity of light."),
    Binary(Object, "setlightir", Boolean, Nothing, "Set whether light is infrared only."),
    Binary(Object, "setlightuseflare", Boolean, Nothing, "Sets if light should use flare."),
    Binary(Object, "setlightvolumeshape", Array, Nothing, "Set the directional light's visual light volume."),
    Binary(Object, "setmagazineturretammo", Array, Nothing, "Sets ammo count to given amount for given turret."),
    Binary(Object, "setmass", Array, Nothing, "Changes the mass of an object smoothly during the given time (in seconds). A time of zero means an immediate change."),
    Binary(Object, "setmass", Number, Nothing, "Changes the mass of an object smoothly during the given time (in seconds). A time of zero means an immediate change."),
    Binary(Object, "setmaxload", Number, Nothing, "Sets maxLoad of a container"),
    Binary(Object, "setmimic", String, Nothing, "Sets a unit's mimic. The following values are recognized: \"Default\", \"Normal\", \"Smile\", \"Hurt\", \"Ironic\", \"Sad\", \"Cynic\", \"Surprised\", \"Agresive\" and \"Angry\"."),
    Binary(Object, "setmissiletarget", Object, Boolean, "Change missile target"),
    Binary(Object, "setmissiletargetpos", Array, Nothing, "Change missile target position (position is ATL)"),
    Binary(Object, "setmusiceffect", String, Nothing, "Defines the music track played on activation. Track is a subclass name of CfgMusic. \"$NONE$\" (no change) or \"$STOP$\" (stops the current music track)."),
    Binary(Object, "setname", Array, Nothing, "Sets the name of a person."),
    Binary(Object, "setname", String, Nothing, "Sets the name of a person."),
    Binary(Object, "setnamesound", String, Nothing, "Sets the nameSound of a person."),
    Binary(Object, "setobjectmaterial", Array, Nothing, "Sets material of object selection. The selection number is defined through the hiddenselection[]={} array in the vehicle's config (starting with 0)."),
    Binary(Object, "setobjectmaterialglobal", Array, Nothing, "Set the material of the given selection on all computers in a network session"),
    Binary(Object, "setobjectscale", Number, Nothing, "Sets attached or simple object scale."),
    Binary(Object, "setobjecttexture", Array, Nothing, "Textures object selection with texture named in array."),
    Binary(Object, "setobjecttextureglobal", Array, Nothing, "Set the texture of the given selection on all computers in a network session"),
    Binary(Object, "setopticsmode", Array, Nothing, "Sets the current optics mode of the unit's current weapon"),
    Binary(Object, "setopticsmode", Number, Nothing, "Sets the current optics mode of the unit's current weapon"),
    Binary(Object, "setopticsmode", String, Nothing, "Sets the current optics mode of the unit's current weapon"),
    Binary(Object, "setowner", Number, Boolean, "On server machine, change ownership of a non-AI object or an agent to a given client. Returns true if locality was changed."),
    Binary(Object, "setoxygenremaining", Number, Nothing, "Sets oxygen remaining. It has no effect when soldier is not diving."),
    Binary(Object, "setparticlecircle", Array, Nothing, "Update particle source to create particles on circle with given radius. Velocity is transformed and added to total velocity."),
    Binary(Object, "setparticleclass", String, Nothing, "Set parameters from config class. className is name of the class from CfgCloudlets."),
    Binary(Object, "setparticlefire", Array, Nothing, "Sets fire parameters to particle effect. Note: You need to create emitter first."),
    Binary(Object, "setparticleparams", Array, Nothing, "Set parameters to particle source. Array is in format <ar>ParticleArray</ar>."),
    Binary(Object, "setparticlerandom", Array, Nothing, "Set randomization of particle source parameters."),
    Binary(Object, "setpilotcameradirection", Array, Nothing, "Set pilot camera direction"),
    Binary(Object, "setpilotcamerarotation", Array, Nothing, "Set pilot camera rotation"),
    Binary(Object, "setpilotcameratarget", Array, Boolean, "Lock/unlock pilot camera rotation to given position or object. Null object will unlock camera."),
    Binary(Object, "setpilotcameratarget", Object, Boolean, "Lock/unlock pilot camera rotation to given position or object. Null object will unlock camera."),
    Binary(Object, "setpilotlight", Boolean, Nothing, "Sets vehicle pilot lights(true-on, false-off)."),
    Binary(Object, "setpitch", Number, Nothing, "Sets the pitch of a persons voice."),
    Binary(Object, "setplatenumber", String, Nothing, " change plate info on car or motorcycle"),
    Binary(Object, "setplayervonvolume", Number, Nothing, "Sets the players Voice over Net volume"),
    Binary(Object, "setpos", Array, Nothing, "Sets the object position. The pos array uses the <ar>Position</ar> format."),
    Binary(Object, "setposasl", Array, Nothing, "Sets the object position. The pos array uses the <ar>PositionASL</ar> format."),
    Binary(Object, "setposasl2", Array, Nothing, "Sets the object position. The pos array uses the <ar>PositionASL</ar> format. The version of the command does not offset based on object center."),
    Binary(Object, "setposaslw", Array, Nothing, "Sets the object position above sea surface. The pos array uses the <ar>PositionASLW</ar> format."),
    Binary(Object, "setposatl", Array, Nothing, "Sets the object position. The pos array uses the <ar>PositionATL</ar> format."),
    Binary(Object, "setposworld", Array, Nothing, "Sets the object position without any additional adjustations. The pos array uses the <ar>Position</ar> format."),
    Binary(Object, "setpylonloadout", Array, Boolean, "will add missile to vehicle pylon, TransportPylonsComponent in config is required"),
    Binary(Object, "setpylonspriority", Array, Nothing, "overrides default pylons priorities"),
    Binary(Object, "setrandomlip", Boolean, Nothing, "Enables/Disables random lip."),
    Binary(Object, "setrank", String, Nothing, "Sets rank of given unit. Possible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL."),
    Binary(Object, "setrepaircargo", Number, Nothing, "Sets the amount or repair resources in the cargo space of a repair vehicle. An amount of one is a full cargo space."),
    Binary(Object, "setrotorbrakertd", Number, Nothing, ""),
    Binary(Object, "setshotparents", Array, Nothing, "Request the shot's owner to change its parents."),
    Binary(Object, "setskill", Array, Nothing, "Sets skill of given type of person (commander unit). Value of skill may vary from 0 to 1."),
    Binary(Object, "setskill", Number, Nothing, "Sets ability levell of person (commander unit). Value of skill may vary from 0 to 1."),
    Binary(Object, "setslingload", Object, Boolean, "Create sling loading from first object to second if possible"),
    Binary(Object, "setsoundeffect", Array, Nothing, "Defines the different sound effects. Sound / voice plays a 2D / 3D sound from CfgSounds. SoundEnv plays an enviromental sound from CfgEnvSounds. SoundDet (only for triggers) creates a dynamic sound object attached to a trigger defined in CfgSFX."),
    Binary(Object, "setspeaker", String, Nothing, "Sets the speaker of a person."),
    Binary(Object, "setspeedmode", String, Nothing, "Sets the group speed mode. Mode may be one of: \"LIMITED\" (half speed), \"NORMAL\" (full speed, maintain formation) or \"FULL\" (do not wait for any other units in the formation)."),
    Binary(Object, "setstamina", Number, Nothing, "Set units' stamina (seconds until depletion)"),
    Binary(Object, "setsuppression", Number, Nothing, "Sets the AI suppression level."),
    Binary(Object, "settargetage", String, Nothing, "Sets how the target is known to the other centers. They behave like the target was seen age seconds ago. Possible age values are: \"ACTUAL\", \"5 MIN\", \"10 MIN\", \"15 MIN\", \"30 MIN\", \"60 MIN\", \"120 MIN\" or \"UNKNOWN\"."),
    Binary(Object, "settaskmarkeroffset", Array, Nothing, "Sets the task marker position in model space [meters]."),
    Binary(Object, "settitleeffect", Array, Nothing, "Defines the title effect. Type can be \"NONE\", \"OBJECT\", \"RES\" or \"TEXT\". For \"TEXT\", the effect defines a subtype: \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" or \"WHITE IN\". Text is shown as text itself. For \"OBJECT\", text defines the shown object, a subclass of CfgTitles. For \"RES\", text defines a resource class, a subclass of RscTitles."),
    Binary(Object, "settowparent", Object, Nothing, "Sets the towing (parent) vehicle which the towed vehicle should follow."),
    Binary(Object, "settriggeractivation", Array, Nothing, "Defines the trigger activation type. The first argument - who activates trigger (side, radio, vehicle or group member): \"NONE\", \"EAST\", \"WEST\", \"GUER\", \"CIV\", \"LOGIC\", \"ANY\", \"ALPHA\", \"BRAVO\", \"CHARLIE\", \"DELTA\", \"ECHO\", \"FOXTROT\", \"GOLF\", \"HOTEL\", \"INDIA\", \"JULIET\", \"STATIC\", \"VEHICLE\", \"GROUP\", \"LEADER\" or \"MEMBER\". The second argument - when is it activated (presention or detection by the specified side): \"PRESENT\", \"NOT PRESENT\", \"WEST D\", \"EAST D\", \"GUER D\" or \"CIV D\". The third argument - whether the activation is repeating."),
    Binary(Object, "settriggerarea", Array, Nothing, "Defines the area controlled by the trigger. The area is rectangular or elliptic, the width is 2 * a, the height is 2 * b. It is rotated angle degrees."),
    Binary(Object, "settriggerinterval", Number, Nothing, "Sets the interval in seconds for trigger condition check"),
    Binary(Object, "settriggerstatements", Array, Nothing, "The first argument can modify the condition of when the trigger is activated. The result of the activation defined by trigger activation is in variable this. Variable thisList contains all vehicles which caused the activation. Activ and desactiv expressions are launched upon trigger activation / deactivation."),
    Binary(Object, "settriggertext", String, Nothing, "Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers."),
    Binary(Object, "settriggertimeout", Array, Nothing, "Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time."),
    Binary(Object, "settriggertype", String, Nothing, "Sets the type of action processed by the trigger after activation (no action, a waypoints switch or an end of mission): \"NONE\", \"SWITCH\", \"END1\", \"END2\", \"END3\", \"END4\", \"END5\", \"END6\", \"LOOSE\" or \"WIN\"."),
    Binary(Object, "setturretlimits", Array, Nothing, "Sets turn and elevation limits for given turret"),
    Binary(Object, "setturretopticsmode", Array, Nothing, "Sets the current optics mode of the specified turret on the vehicle."),
    Binary(Object, "setturretopticsmode", Number, Nothing, "Sets the current optics mode of the turret occupied by the unit, or of the specified turret on the vehicle."),
    Binary(Object, "setunconscious", Boolean, Nothing, "Set / reset the unconscious life state of the given unit (in MP works only for a local unit)."),
    Binary(Object, "setunitability", Number, Nothing, "Sets skill of given unit. Skill may vary from 0.2 to 1.0."),
    Binary(Object, "setunitcombatmode", String, Nothing, "Sets the unit's combat mode (engagement rules). Mode can be one of: \"BLUE\" (Never fire), \"GREEN\" (Hold fire - defend only), \"WHITE\" (Hold fire, engage at will), \"YELLOW\" (Fire at will) or \"RED\" (Fire at will, engage at will)."),
    Binary(Object, "setunitfreefallheight", Number, Nothing, "Sets minimum freefall height AGL at which unit assumes HALO pose"),
    Binary(Object, "setunitloadout", Array, Nothing, "Create inventory items from given loadout structure and set them to the unit."),
    Binary(Object, "setunitloadout", Config, Nothing, "Create inventory items from given loadout config and set them to the unit."),
    Binary(Object, "setunitloadout", String, Nothing, "Create inventory items from given classname(cfgVehicles) and set them to the unit."),
    Binary(Object, "setunitpos", String, Nothing, "Sets the unit position rules. Mode may be one of: \"DOWN\", \"UP\" or \"AUTO\"."),
    Binary(Object, "setunitposweak", String, Nothing, "Equal to setUnitPos, for usage in formation FSM (to avoid collision with setUnitPos used by the mission)."),
    Binary(Object, "setunitrank", String, Nothing, "Sets rank of given unit. Possible values: PRIVATE, CORPORAL, SERGEANT, LIEUTENANT, CAPTAIN, MAJOR or COLONEL."),
    Binary(Object, "setunitrecoilcoefficient", Number, Nothing, "Proportionaly increase/decrease unit's recoil."),
    Binary(Object, "setunittrait", Array, Nothing, "Sets given trait to given soldier"),
    Binary(Object, "setunloadincombat", Array, Nothing, "Check if cargo of this vehicle want to get out when in combat. Vehicle has to be local."),
    Binary(Object, "setuseractiontext", Array, Nothing, "Change action texts."),
    Binary(Object, "setusermfdtext", Array, Nothing, "store user text value in MFD, limit is 50, user0...user49"),
    Binary(Object, "setusermfdvalue", Array, Nothing, "store user value in MFD, limit is 50, user0...user49"),
    Binary(Object, "setvariable", Array, Nothing, "Set variable to given value in the variable space of given object. If public is true then the value is broadcast to all computers."),
    Binary(Object, "setvectordir", Array, Nothing, "Set object's direction vector. Up vector will remain unchanged."),
    Binary(Object, "setvectordirandup", Array, Nothing, "Set object's direction and up vector"),
    Binary(Object, "setvectorup", Array, Nothing, "Set object's up vector. Direction vector will remain unchanged."),
    Binary(Object, "setvehicleammo", Number, Nothing, "Sets how much ammunition (compared to the current stored magazines, but fully loaded) the vehicle has. The value ranges from 0 to 1."),
    Binary(Object, "setvehicleammodef", Number, Nothing, "Sets how much ammunition (compared to the current configuration of magazines, but fully loaded) the vehicle has. The value ranges from 0 to 1."),
    Binary(Object, "setvehiclearmor", Number, Nothing, "Sets the armor (or health for men) state of the vehicle (a value from 0 to 1)."),
    Binary(Object, "setvehiclecargo", Object, Boolean, "Load cargo vehicle inside vehicle if possible."),
    Binary(Object, "setvehicleid", Number, Nothing, "Sets id (integer value) to vehicle. By this id vehicle is referenced by triggers and waypoints."),
    Binary(Object, "setvehiclelock", String, Nothing, "Set how vehicle is locked for player. Possible values: UNLOCKED, DEFAULT or LOCKED."),
    Binary(Object, "setvehicleposition", Array, Boolean, "Changes the object position. If the markers array contains more than one marker names, the position of a random one is used. Otherwise, the given position is used. The object is placed inside a circle with this position as its center and placement as its radius."),
    Binary(Object, "setvehicleradar", Number, Nothing, "Overrides AI decision to use radar"),
    Binary(Object, "setvehiclereceiveremotetargets", Boolean, Nothing, "vehicle will get information about radar targets from center"),
    Binary(Object, "setvehiclereportownposition", Boolean, Nothing, "vehicle will report his radar position to center"),
    Binary(Object, "setvehiclereportremotetargets", Boolean, Nothing, "vehicle will report radar targets to center"),
    Binary(Object, "setvehicletipars", Array, Nothing, "Set TI parameters for specified vehicle, pars: engine/body, tracks/wheels, main gun."),
    Binary(Object, "setvehiclevarname", String, Nothing, "Sets the name of the variable which contains a reference to this object. It is necessary in MP to change the variable content after a respawn."),
    Binary(Object, "setvelocity", Array, Nothing, "Sets the velocity (speed vector) of a vehicle."),
    Binary(Object, "setvelocitymodelspace", Array, Nothing, "Sets the velocity (speed vector) of a vehicle."),
    Binary(Object, "setvelocitytransformation", Array, Nothing, "interpolates and sets vectors. Time has to be from &lt;0,1&gt;."),
    Binary(Object, "setwantedrpmrtd", Array, Nothing, "Set wanted RPM of given motor, use index -1 for all motors."),
    Binary(Object, "setweaponreloadingtime", Array, Boolean, "Set phase of weapon reloading. ReloadTime goes from 0 to 1, where 0 is the end of loading procedure. Returns true if given weapon was found for given gunner"),
    Binary(Object, "setweaponzeroing", Array, Boolean, "Sets the zeroing on specified weapon muzzle"),
    Binary(Object, "setwingforcescalertd", Array, Nothing, "Set effectivity of wings. Values <0.0,1.0>. Use -1 to keep original value."),
    Binary(Object, "sidechat", String, Nothing, "Types text to the side radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Binary(Object, "sideradio", String, Nothing, "Sends the message to the side radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Object, "skill", String, Number, "Returns skill of given type of person (commander unit). Value of skill may vary from 0 to 1."),
    Binary(Object, "skillfinal", String, Number, "Returns final (calculated) skill of given type of person (commander unit). Value of skill may vary from 0 to 1."),
    Binary(Object, "stop", Boolean, Nothing, "Stops an AI unit. This function is obsolete. Use disableAI to get better control over stopping a unit."),
    Binary(Object, "suppressfor", Number, Nothing, "Makes the unit to apply suppressive fire on known enemies."),
    Binary(Object, "swimindepth", Number, Nothing, "Sets the target depth level for swimming soldier."),
    Binary(Object, "switchaction", String, Nothing, "When used on a person, the given action is started immediately (there is no transition). Use switchmove \"\" to switch back to the default movement if there is no transition back, otherwise the person may be stuck."),
    Binary(Object, "switchcamera", String, Nothing, "Switches the camera to the given vehicle / camera. Mode is one of: \"INTERNAL\" (1st person), \"GUNNER\" (optics / sights), \"EXTERNAL\" (3rd person) or \"GROUP\" (group)."),
    Binary(Object, "switchgesture", String, Nothing, "When used on a person, the given move is started immediately (there is no transition)."),
    Binary(Object, "switchlight", String, Nothing, "Controls the lamppost mode. Mode may be \"ON\", \"OFF\" and \"AUTO\". \"AUTO\" is default and means the lampost is only on during nighttime."),
    Binary(Object, "switchmove", String, Nothing, "When used on a person, the given move is started immediately (there is no transition). Use switchmove \"\" to switch back to the default movement if there is no transition back, otherwise the person may be stuck."),
    Binary(Object, "synchronizeobjectsadd", Array, Nothing, "Add given objects to the unit/trigger's list of synchronized objects."),
    Binary(Object, "synchronizeobjectsremove", Array, Nothing, "Remove given objects from the unit/trigger's list of synchronized objects."),
    Binary(Object, "synchronizetrigger", Array, Nothing, "Synchronizes the trigger with waypoints. Each waypoint is given as an array [group, index]."),
    Binary(Object, "synchronizewaypoint", Array, Nothing, "Synchronizes the trigger with waypoints. Each waypoint is given as an array [group, index]."),
    Binary(Object, "targetknowledge", Object, Array, "Returns units knowledge about target. The array has format [known by group, known by unit, last time target was seen by unit, last time target endangered unit, target side, position error, target position]"),
    Binary(Object, "targets", Array, Array, "Returns targets known by given unit filtered by given sides and distance."),
    Binary(Object, "targetsquery", Array, Array, "Find all targets known to sender matching given query."),
    Binary(Object, "triggerattachobject", Number, Nothing, "Assigns a static object to the trigger. The activation source is changed to \"STATIC\"."),
    Binary(Object, "triggerattachvehicle", Array, Nothing, "If [] is given, the trigger is detached from the assigned vehicle. If the activation source is \"VEHICLE\", \"GROUP\", \"LEADER\" or \"MEMBER\", it's changed to \"NONE\". If [vehicle] is given, the trigger is attached to the vehicle or its group. When the source is \"GROUP\", \"LEADER\" or \"MEMBER\", it's attached to the group, otherwise it's attached to the vehicle and the source is changed to \"VEHICLE\"."),
    Binary(Object, "triggerdynamicsimulation", Boolean, Nothing, "Controls ability of given unit to activate dynamically disabled entities. If false, dynamically disabled entities won't be activated by units presence"),
    Binary(Object, "turretlocal", Array, Boolean, "Checks whether the given vehicle's turret is local or is not."),
    Binary(Object, "turretowner", Array, Number, "Returns id of owner of given turret"),
    Binary(Object, "turretunit", Array, Object, "Returns the unit in the vehicle turret."),
    Binary(Object, "unassignitem", String, Nothing, "Unassign existing item to the soldier's containers. "),
    Binary(Object, "unitturret", Object, Array, "Returns the turret path the vehicle gunner is in."),
    Binary(Object, "unlinkitem", String, Nothing, "Unlink and remove existing linked item from soldier"),
    Binary(Object, "useaudiotimeformoves", Boolean, Nothing, "Switch between elapsed gamet time and audio time being used as animation timer. Used for audio/animation synchronization."),
    Binary(Object, "vectormodeltoworld", Array, Array, "Converts direction from object model space to world space. "),
    Binary(Object, "vectormodeltoworldvisual", Array, Array, "Converts direction from object model space to world space in render time. "),
    Binary(Object, "vectorworldtomodel", Array, Array, "Converts direction from world space to object model space."),
    Binary(Object, "vectorworldtomodelvisual", Array, Array, "Converts direction from world space to object model space  in render time."),
    Binary(Object, "vehiclechat", String, Nothing, "Types text to the vehicle radio channel.
Note: this function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them."),
    Binary(Object, "vehicleradio", String, Nothing, "Sends the message to the vehicle radio channel. The message is defined in the description.ext file or radio protocol."),
    Binary(Object, "weaponaccessories", String, Array, "Get array with all items linked to a given weapon."),
    Binary(Object, "weaponaccessoriescargo", Array, Array, "Show list of attachments linked to a given weapon"),
    Binary(Object, "weapondirection", String, Array, "Returns direction where is given weapon aiming."),
    Binary(Object, "weaponreloadingtime", Array, Number, "Returns current phase of weapon reloading from 0 to 1, where 0 is the end of loading procedure. -1 if not available"),
    Binary(Object, "weaponsinfo", Array, Array, "Returns extended info of entities weapons"),
    Binary(Object, "weaponstate", String, Array, "Returns the state of given weapon as an array of strings in the follow format [WeaponName, MuzzleName, ModeName, MagazineName, AmmoCount, RoundReloadPhase, MagazineReloadPhase]"),
    Binary(Object, "weaponsturret", Array, Array, "Returns all weapons of given turret. Use turret path [-1] for drivers turret."),
    Binary(Object, "worldtomodel", Array, Array, "Converts position from world space to object model space."),
    Binary(Object, "worldtomodelvisual", Array, Array, "Converts position from world space to object model space in render time."),
    Binary(Side, "!=", Side, Boolean, "Checks whether two side values are different."),
    Binary(Side, "==", Side, Boolean, "Checks whether two side values are equal."),
    Binary(Side, "addscoreside", Number, Nothing, "MP only: adds side score. This is shown in the \"I\" MP screen as the total score."),
    Binary(Side, "countside", Array, Number, "Checks how many vehicles belong to the given side."),
    Binary(Side, "getfriend", Side, Number, "Returns if sides are friendly or hostile.  For a value smaller than 0.6 it results in being enemy, otherwise it's friendly."),
    Binary(Side, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(Side, "knowsabout", Object, Number, "Checks whether the side knows about the target (and how much)."),
    Binary(Side, "reportremotetarget", Array, Nothing, "Will report target to datalink for given time"),
    Binary(Side, "revealmine", Object, Nothing, "Sets given mine as known to the side."),
    Binary(Side, "setfriend", Array, Nothing, "Sets how friendly side1 is with side2. For a value smaller than 0.6 it results in being enemy, otherwise it's friendly."),
    Binary(String, "!=", String, Boolean, "a is not equal to b (case insensitive)"),
    Binary(String, "+", String, String, "stringA and stringB are concatenated."),
    Binary(String, "==", String, Boolean, "a equal to b (case insensitive)"),
    Binary(String, "addpublicvariableeventhandler", Array, Nothing, "Create an event handler for given variable. The event handler will be executed when some client in MP exports a variable using publicVariable on all clients except the publishing one. For namespaces, only missionNamespace is allowed as a target."),
    Binary(String, "addpublicvariableeventhandler", Code, Nothing, "Create an event handler for given variable. The event handler will be executed when some client in MP exports a variable using publicVariable on all clients except the publishing one."),
    Binary(String, "allobjects", Number, Array, "Returns array of matching objects depending on the passed arguments"),
    Binary(String, "callextension", Array, Array, "Execute an extension function with additional arguments"),
    Binary(String, "callextension", String, String, "Execute an extension function"),
    Binary(String, "camcreate", Array, Object, "Creates a camera or an actor of the given type on the given initial position (format <ar>Position</ar>). Its type is one of \"CAMERA\" or \"SEAGULL\"."),
    Binary(String, "canadd", Array, Boolean, "Check if the attachmentcan be added to the weapon, or the magazine can be loaded."),
    Binary(String, "canadd", String, Boolean, "Check if the attachmentcan be added to the weapon, or the magazine can be loaded."),
    Binary(String, "canslingload", String, Boolean, "Returns true if it is possible to sling load cargo"),
    Binary(String, "configclasses", Config, Array, "Returns an array of config entries which meet the criteria in the code."),
    Binary(String, "counttype", Array, Number, "Counts how many vehicles in the array are of the given type. For types see <cl>CfgVehicles</cl>."),
    Binary(String, "createsite", Array, Object, "OBSOLETE DO NOT USE!!! Creates a new site."),
    Binary(String, "createunit", Array, Nothing, "Creates a unit of the given type. The format of unitInfo is:
[pos (<ar>Position</ar>), group (<t>Group</t>), init (<t>String</t>), skill (<t>Number</t>), rank (<t>String</t>)].
Note: init, skill and rank are optional. Their default values are \"\", 0.5, \"PRIVATE\"."),
    Binary(String, "createvehicle", Array, Object, "Creates an empty vehicle of the given type. Pos is in format <ar>Position</ar>.
See <cl>CfgVehicles</cl> for possible type values."),
    Binary(String, "createvehiclelocal", Array, Object, "Creates an empty vehicle of the given type. Pos is in format <ar>Position</ar>.
See <cl>CfgVehicles</cl> for possible type values. Vehicle is not transferred through network in MP games."),
    Binary(String, "cutfadeout", Number, Number, "Terminate the effect in the given layer and set duration of the fade out phase to the given time."),
    Binary(String, "cutobj", Array, Number, "Object background - the right argument uses format [\"name\",\"type\",speed] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
The left argument defines layer in which the effect is shown.
The object can be defined in the description.ext file."),
    Binary(String, "cutrsc", Array, Number, "Resource background - the right argument uses format [\"name\",\"type\",speed, showInMap, isStructuredText] or [\"name\",\"type\"]. If speed is not given, it's assumed to be one.
The left argument defines layer in which the effect is shown.
The resource can be defined in the description.ext file."),
    Binary(String, "cuttext", Array, Number, "Text background - the right argument uses format [\"text\",\"type\",speed] or [\"text\",\"type\"]. If speed is not given, it's assumed to be one. Type may be one of: \"PLAIN\", \"PLAIN DOWN\", \"BLACK\", \"BLACK FADED\", \"BLACK OUT\", \"BLACK IN\", \"WHITE OUT\" or \"WHITE IN\".
The left argument defines layer in which the effect is shown."),
    Binary(String, "enableaifeature", Boolean, Nothing, "Enable/disable given AI feature. Feature may be one of: \"AwareFormationSoft\", \"CombatFormationSoft\"."),
    Binary(String, "find", Array, Number, "Returns index of the first occurrence of str2 in str1, search is started from given offset, -1 if not found"),
    Binary(String, "find", String, Number, "Returns index of the first occurrence of str2 in str1, -1 if not found"),
    Binary(String, "get3denattribute", String, Array, "Reads attribute value from given marker."),
    Binary(String, "get3denmissionattribute", String, Anything, "Returns current value set in given global attribute"),
    Binary(String, "getcompatiblepylonmagazines", Number, Array, "return list of compatible magazines, number > 0 or class name for one given pylon, or 0 for array of all pylons together"),
    Binary(String, "getcompatiblepylonmagazines", String, Array, "return list of compatible magazines, number > 0 or class name for one given pylon, or 0 for array of all pylons together"),
    Binary(String, "gettextwidth", Array, Number, "Returns the estimated width of the text based on its font and height"),
    Binary(String, "hintc", Array, Nothing, "Creates a hint dialog with the given title and text. Texts can be plain or structured."),
    Binary(String, "hintc", String, Nothing, "Creates a hint dialog with the given title and text."),
    Binary(String, "in", HashMap, Boolean, "Checks whether HashMap contains the key."),
    Binary(String, "in", String, Boolean, "Checks whether string1 is present in string2"),
    Binary(String, "insert", Array, String, "Inserts given string into string at given index."),
    Binary(String, "iskindof", Array, Boolean, "Checks whether the type typeName1 is inherited from the type typeName1."),
    Binary(String, "iskindof", String, Boolean, "Checks whether the type typeName1 is inherited from the type typeName1."),
    Binary(String, "objstatus", String, Nothing, "Sets the briefing objective status. Status may be one of: \"ACTIVE\", \"FAILED\", \"DONE\" or \"HIDDEN\"."),
    Binary(String, "ppeffectadjust", Array, Nothing, "Adjust parameters for specified post process effect"),
    Binary(String, "ppeffectcommit", Number, Nothing, "Set time when old pars are replaced by last set, if 0 set immediately"),
    Binary(String, "ppeffectenable", Boolean, Nothing, "Enable/disable specified post process effect, is overloaded form multiple effects."),
    Binary(String, "regexfind", Array, Array, "Finds occurences of pattern in provided string"),
    Binary(String, "regexmatch", String, Boolean, "Returns whether the provided pattern matches the string"),
    Binary(String, "regexreplace", Array, String, "Replaces occurences of pattern in provided string"),
    Binary(String, "select", Array, String, "Extracts the characters in a string between 'start' and 'start+length'."),
    Binary(String, "servercommand", String, Boolean, "Process the specified server command
This command needs to be executed from UI handler to succeed."),
    Binary(String, "set3denmissionattribute", Array, Nothing, "Sets given value into global 3DEN attribute"),
    Binary(String, "setattributes", Array, String, "Returns a structured text created by the given structured or plain text by setting attributes to the given values."),
    Binary(String, "setdebriefingtext", Array, Nothing, "Sets debriefing text."),
    Binary(String, "setdynamicsimulationdistance", Number, Nothing, "Sets activation distance for given activation category. The recognized activation categories are \"Group\", \"Vehicle\", \"EmptyVehicle\" and \"Prop\""),
    Binary(String, "setdynamicsimulationdistancecoef", Number, Nothing, "Sets the activation distance multiplier value for the given category. The recognized activation categories are \"IsMoving\""),
    Binary(String, "setmarkeralpha", Number, Nothing, "Sets the marker alpha. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkeralphalocal", Number, Nothing, "Sets the marker alpha. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkerbrush", String, Nothing, "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkerbrushlocal", String, Nothing, "Selects the fill texture for the marker (\"RECTANGLE\" or \"ELLIPSE\"). Brush is the name of the subclass in CfgMarkerBrushes. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkercolor", String, Nothing, "Sets the marker color. Color is one of: \"Default\", \"ColorBlack\", \"ColorRed\", \"ColorRedAlpha\", \"ColorGreen\", \"ColorGreenAlpha\", \"ColorBlue\", \"ColorYellow\" or \"ColorWhite\". The marker is modified on all computers in a network session."),
    Binary(String, "setmarkercolorlocal", String, Nothing, "Sets the marker color. Color is one of: \"Default\", \"ColorBlack\", \"ColorRed\", \"ColorRedAlpha\", \"ColorGreen\", \"ColorGreenAlpha\", \"ColorBlue\", \"ColorYellow\" or \"ColorWhite\". The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkerdir", Number, Nothing, "Sets the orientation of the marker. Angle is in degrees. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkerdirlocal", Number, Nothing, "Sets the orientation of the marker. Angle is in degrees. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkerpolyline", Array, Nothing, "Sets the Marker's shape to Polyline and sets the polyline points. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkerpolylinelocal", Array, Nothing, "Sets the Marker's shape to Polyline and sets the polyline points. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkerpos", Array, Nothing, "Moves the marker. The format of pos is <ar>Position2D</ar>. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkerpos", Object, Nothing, "Moves the marker. The format of pos is <ar>Position2D</ar>. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkerposlocal", Array, Nothing, "Moves the marker. The format of pos is <ar>Position2D</ar>. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkerposlocal", Object, Nothing, "Moves the marker. The format of pos is <ar>Position2D</ar>. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkershadow", Boolean, Nothing, "Sets the marker shadow."),
    Binary(String, "setmarkershadowlocal", Boolean, Nothing, "Sets the marker shadow."),
    Binary(String, "setmarkershape", String, Nothing, "Selects the shape (type) of the marker. Shape can be \"ICON\", \"RECTANGLE\" or \"ELLIPSE\". The marker is modified on all computers in a network session."),
    Binary(String, "setmarkershapelocal", String, Nothing, "Selects the shape (type) of the marker. Shape can be \"ICON\", \"RECTANGLE\" or \"ELLIPSE\". The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkersize", Array, Nothing, "Sets the marker size. Size is in format [a-axis, b-axis]. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkersizelocal", Array, Nothing, "Sets the marker size. Size is in format [a-axis, b-axis]. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkertext", String, Nothing, "Sets the text label of an existing marker. The marker is modified on all computers in a network session."),
    Binary(String, "setmarkertextlocal", String, Nothing, "Sets the text label of an existing marker. The marker is only modified on the computer where the command is called."),
    Binary(String, "setmarkertype", String, Nothing, "Sets the marker type. Type may be any of: \"Flag\", \"Flag1\", \"Dot\", \"Destroy\", \"Start\", \"End\", \"Warning\", \"Join\", \"Pickup\", \"Unknown\", \"Marker\", \"Arrow\" or \"Empty\". The marker is modified on all computers in a network session."),
    Binary(String, "setmarkertypelocal", String, Nothing, "Sets the marker type. Type may be any of: \"Flag\", \"Flag1\", \"Dot\", \"Destroy\", \"Start\", \"End\", \"Warning\", \"Join\", \"Pickup\", \"Unknown\", \"Marker\", \"Arrow\" or \"Empty\". The marker is only modified on the computer where the command is called."),
    Binary(String, "setpipeffect", Array, Nothing, "Set a Render Target's visual effect (Picture-in-Picture)."),
    Binary(String, "splitstring", String, Array, "Splits string into tokens by given delimiter(s)"),
    Binary(String, "trim", Array, String, "Trim all characters in charList from string on specified sides."),
    Binary(Switch, ":", Code, Nothing, ""),
    Binary(Switch, "do", Code, Anything, "Switch form"),
    Binary(Task, "!=", Task, Boolean, "Checks whether two tasks are different."),
    Binary(Task, "==", Task, Boolean, "Checks whether two tasks are equal."),
    Binary(Task, "getvariable", Array, Anything, "Return the value of variable in the variable space of given task."),
    Binary(Task, "getvariable", String, Anything, "Return the value of variable in the variable space of given task."),
    Binary(Task, "sendtaskresult", Array, Nothing, "Send a result of the task to the task sender."),
    Binary(Task, "setsimpletaskalwaysvisible", Boolean, Nothing, "Makes the given task allways visiable or not."),
    Binary(Task, "setsimpletaskcustomdata", Array, Nothing, "Set custom data for the task. Tooltip (3 characters max) will be drawn in task list on the right side. Descriptin will be drawn in task description panel on the bottom."),
    Binary(Task, "setsimpletaskdescription", Array, Nothing, "Attach descriptions to the simple task."),
    Binary(Task, "setsimpletaskdestination", Array, Nothing, "Attach a destination to the simple task. Overrides setSimpleTaskTarget."),
    Binary(Task, "setsimpletasktarget", Array, Nothing, "Attach a target to the simple task. Overrides setSimpleTaskDestination."),
    Binary(Task, "setsimpletasktype", String, Nothing, "Sets the type of the simple task."),
    Binary(Task, "settaskresult", Array, Nothing, "Set a result of the task."),
    Binary(Task, "settaskstate", String, Nothing, "Set a new state of the task."),
    Binary(Task, "setvariable", Array, Nothing, "Set variable to given value in the variable space of given task."),
    Binary(TeamMember, "!=", TeamMember, Boolean, "Checks whether two team members are different. If either of them is teamMemberNull, true is returned."),
    Binary(TeamMember, "==", TeamMember, Boolean, "Checks whether two team members are the same. If either of them is teamMemberNull, false is returned."),
    Binary(TeamMember, "addresources", Array, Nothing, "Add (register) resources to the team member."),
    Binary(TeamMember, "addteammember", TeamMember, Nothing, "Add given member to given team."),
    Binary(TeamMember, "createtask", Array, Task, "Create a new AI task (subtask of parentTask). Type is name of registered task type."),
    Binary(TeamMember, "deleteresources", Array, Nothing, "Delete (unregister) resources of the team member."),
    Binary(TeamMember, "getvariable", Array, Anything, "Return the value of variable in the variable space of given team member."),
    Binary(TeamMember, "getvariable", String, Anything, "Return the value of variable in the variable space of given team member."),
    Binary(TeamMember, "registertask", String, Boolean, "Register a new task type. Parameters are defined in the given config class (subclass of CfgTasks)."),
    Binary(TeamMember, "removeteammember", TeamMember, Nothing, "Remove given member from given team."),
    Binary(TeamMember, "sendtask", Array, Task, "Create a new AI task (subtask of parentTask). Type is name of registered task type."),
    Binary(TeamMember, "setcombatmode", String, Nothing, "Sets the team member's combat mode (engagement rules). Mode can be one of: \"BLUE\" (Never fire), \"GREEN\" (Hold fire - defend only), \"WHITE\" (Hold fire, engage at will), \"YELLOW\" (Fire at will) or \"RED\" (Fire at will, engage at will)."),
    Binary(TeamMember, "setformation", String, Nothing, "Set a new formation to given team."),
    Binary(TeamMember, "setfromeditor", Boolean, Nothing, "Set if given team member was inserted directly from editor."),
    Binary(TeamMember, "setleader", TeamMember, Nothing, "Set the leader of given team."),
    Binary(TeamMember, "setvariable", Array, Nothing, "Set variable to given value in the variable space of given team member. If public is true then the value is broadcast to all computers."),
    Binary(TeamMember, "unregistertask", String, Boolean, "Unregister a task type."),
    Binary(While, "do", Code, Nothing, "Repeats the code while the condition is true. Note: the maximum repeat count for the loop is 10000. If the condition is still true after the loop was repeated 10000 times, the loop will be terminated and an error message is shown."),
    Binary(With, "do", Code, Nothing, "Execute the code inside the given namespace."),
];